public int NumbersFirstOrDefault() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.FirstOrDefault(-1); return firstNum; }
public int[] OddFactorOf300And900Count() { int[][] factorsOf300And900 = { new[] { 2, 2, 3, 5, 5 }, new[] { 2, 2, 3, 3, 5, 5 } }; int[] factorsCount = factorsOf300And900.Select( a => a.Count(n => n % 2 == 1)).ToArray(); return factorsCount; }
public List<string> StringOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderByDescending(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<Tuple<string, double>> CustomerExpensiveOrdersTotalAverage() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalAverage = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Where(o => o.Total > 100).Average(o => o.Total))).ToList(); return ordersTotalAverage; }
public List<Tuple<string, string>> ProductCrossGroupJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, string>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2.Select(p=>p.ProductName), (t, n) => Tuple.Create(t.Item1, n)).ToList(); return q; }
public Tuple<int, int>[] SelectManyJoinSumEven() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => (a + b) % 2 == 0), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public void NumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public int[] ShortStringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Where(w => w.Length < 4).Select(w => w.Length).ToArray(); return selected; }
public int DistinctOrdersCount(string region) { List<Customer> customers = GetCustomerList(); int count = customers.SelectMany(c => c.Orders).Distinct().Count(); return count; }
public Dictionary<string, double> CustomerInRegionOrdersTotalMinDict(string region) { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMin = customers.Where(c => c.Region.Equals(region)) .ToDictionary(c => c.CustomerId, c => c.Orders.Min(o => o.Total)); return ordersTotalMin; }
public Dictionary<string, List<Customer>> CustomerEachRegionOrdersMinCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersMin = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.Where(c => c.Orders.Count ==g.Min(c => c.Orders.Count)).ToList()); return customerOrdersMin; }
public List<double> BigDoubleOrderbyFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).OrderBy(n => n-(int)n).ToList(); return sortedNumbers; }
public List<Product> ProductOrderbyDescendingId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderByDescending(p => p.ProductId).ToList(); return sortedProducts; }
public int[] OddIntAddOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select((n, i) => n % 2 == 1 ? n + i : -1) .Where(n=>n!=-1).ToArray(); return numSelected; }
public List<string> StringSkipWhileCount(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterWordsWhile = words.SkipWhile(w => w[0] > c).ToList(); return afterWordsWhile; }
public List<int> RangeOfInts() { List<int> numbers = Enumerable.Range(0, 50).ToList(); return numbers; }
public List<int> RangeOfEvenIntsStartFrom(int start,int count) { List<int> numbers = Enumerable.Range(start, count).Where(n=>n%2==0).ToList(); return numbers; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category).ThenBy(p=>p.ProductName).ToList(); return sortedProducts; }
public int[] BigIntAddOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select((n, i) => n > 5 ? n + i : -1) .Where(n=>n!=-1).ToArray(); return numSelected; }
public List<int> RangeOfEvenInts() { List<int> numbers = Enumerable.Range(0, 100).Where(n=>n%2==0).ToList(); return numbers; }
public List<Tuple<int, string>> CustomerCrossGroupJoinRegionsWithCodeName() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public List<int> ShortStringLengthOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Where(w => w.Length < 6).Select(w => w.Length).OrderBy(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public Dictionary<bool, List<double>> DoubleGroupByBoolDictOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; Dictionary<bool, List<double>>  numbersGroups = numbers.GroupBy(n => n>5) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w).ToList()); return numbersGroups; }
public List<int> RangeOfIntsWithStartAndCount(int start,int count) { List<int> numbers = Enumerable.Range(start, count).ToList(); return numbers; }
public List<string> IntersectOfCategory() { string[] categories = {"Furnitures", "Seagoods"}; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> sharedCategories = productCategories.Intersect(categories).ToList(); return sharedCategories; }
public Product ProductFirst() { List<Product> products = GetProductList(); Product product12 = products.First(p => p.ProductId == 12); return product12; }
public double DoubleFirstOrDefault() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.FirstOrDefault(3.14); return firstNum; }
public bool EqualStrings() { List<string> wordsA = new List<string> { "Alpha", "Beta", "Gamma" }; List<string> wordsB = new List<string> { "Alpha", "Beta", "Gamma" }; bool equal = wordsA.SequenceEqual(wordsB); return equal; }
public List<Product> RepeatedProductsWithCount(int count) { List<Product> products = Enumerable.Repeat(Product.Default, count).ToList(); return products; }
public Dictionary<bool, List<Product>> ProductGroupByPriceDict() { List<Product> products = GetProductList(); Dictionary<bool, List<Product>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .ToDictionary(g => g.Key, g => g.ToList()); return productGroup; }
public Dictionary<string, int> ProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Sum(p => p.UnitsInStock)); return categories; }
public Product[] ProductsConvertToArray() { List<Product> products = GetProductList(); Product[] productsArray = products.OrderBy(p => p.UnitPrice).ToArray(); return productsArray; }
public Dictionary<string, int> ProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Min(p => p.UnitsInStock)); return categories; }
public List<Tuple<string, double>> CustomerOrdersTotalMin() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMin = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Min(o => o.Total))).ToList(); return ordersTotalMin; }
public List<Product> ProductsConvertToDescendingListAndPrintForeach() { List<Product> products = GetProductList(); List<Product> productsList = products.OrderByDescending(p => p.UnitPrice).ToList(); foreach (Product p in productsList) Console.WriteLine(p); return productsList; }
public List<Tuple<char, List<string>>> StringGroupByFirstCharOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(w=>w,new CaseInsensitiveComparer()).ToList())).ToList(); return wordsGroups; }
public double BigNumbersAggregateMultiply() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double product = numbers.Where(n => n > 2).Aggregate((a, b) => a * b); return product; }
public List<Tuple<string, double>> CustomerEachRegionOrdersTotalMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c => c.Orders).Max(o => o.Total))).ToList(); return ordersTotalMax; }
public List<int> IntTake() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Take(3).ToList(); return first3Numbers; }
public double DoubleAverage() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double averageNum = numbers.Average(); return averageNum; }
public void BigNumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public List<string> StringReverse() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.Reverse().ToList(); return sortedWords; }
public List<string> UnionOfName() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productNames = products.Select(p => p.ProductName); var customerNames = customers.Select(c => c.CompanyName); List<string> uniqueNames = productNames.Union(customerNames).ToList(); return uniqueNames; }
public Dictionary<string, double> CustomerOrdersTotalAverageDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalAverage = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Average(o => o.Total)); return ordersTotalAverage; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Tuple<string, List<Product>>> ProductEachCategoryFirstOrDefaultUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.FirstOrDefault(Product.Default).UnitPrice) .ToList())).ToList(); return categories; }
public Tuple<int, int>[] SelectManyJoin() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB, (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public List<string> StringOrderbyCustomThenbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w,new CaseInsensitiveComparer()) .ThenBy(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
public List<Tuple<string,int>> CustomerIdAndOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders.Count)).ToList(); return customerProperties; }
public double[] DoublesConvertToDescendingArray() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double[] doublesArray = doubles.OrderByDescending(d => d).ToArray(); return doublesArray; }
public void DoubleDeferred() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Select(n => d += n); foreach (var v in q) Console.Write(v + " " + d); }
public List<Tuple<string, int>> CustomerEachRegionOrdersMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.Max(c => c.Orders.Count))).ToList(); return ordersMax; }
public List<string> ExpensiveProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Where(p => p.UnitPrice > 100).Select(p => p.ProductName).ToList(); return productNames; }
public List<double> DoublesConvertToDescendingList() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; List<double> doublesList = doubles.OrderByDescending(d => d).ToList(); return doublesList; }
public List<Product> ProductTake() { List<Product> products = GetProductList(); List<Product> first3Products = products.Take(3).ToList(); return first3Products; }
public List<double> IntSqrtSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<double> afterNumbers = numbers.Select(i => Math.Sqrt(i)).TakeWhile((n, i) => n > i).ToList(); return afterNumbers; }
public List<double> DoublesConvertToListAndPrint() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; List<double> doublesList = doubles.OrderBy(d => d).ToList(); for (int i = 0; i < doublesList.Count; i++) Console.WriteLine(doublesList[i]); return doublesList; }
public double ProductUnitPriceAggregateAverage() { List<Product> products = GetProductList(); double aggregateSum = products.Select(p => p.UnitPrice).Aggregate((a, b) => (a + b) / 2); return aggregateSum; }
public int OddNumbersFirstOrDefault() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.FirstOrDefault(n => n % 2 == 1,-2); return firstNum; }
public List<Tuple<string, Customer>> CustomerCrossGroupJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, Customer>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=>t.Item2 ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public Dictionary<string, int> CustomerEachRegionOrdersSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersTotalSum = customers.GroupBy(c => c.Region) .ToDictionary(g=>g.Key, g=>g.Sum(c=>c.Orders.Count)); return ordersTotalSum; }
public double BigDoubleNumbersFirstOrDefault() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.FirstOrDefault(d => d > 5,-2.3); return firstNum; }
public List<int> RepeatedIntsWithCount(int count) { List<int> numbers = Enumerable.Repeat(0, count).ToList(); return numbers; }
public List<string> StringOrderbyLengthCustomThenby() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()).ThenBy(w=>w).ToList(); return sortedWords; }
public List<string> IntersectOfName() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productNames = products.Select(p => p.ProductName); var customerNames = customers.Select(c => c.CompanyName); List<string> sharedNames = productNames.Intersect(customerNames).ToList(); return sharedNames; }
public List<string> ConcatOfRegion() { string[] regions = { "WA", "AF", "RO" }; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> allRegions = customerRegions.Concat(regions).ToList(); return allRegions; }
public List<Tuple<string,DateTime>> WaCustomerSelectManyCustomerNewOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersEachWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.SkipWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return afterOrdersEachWhile; }
public List<Tuple<string, int>> CustomerEachCountryOrdersMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersMax = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Max(c => c.Orders.Count))).ToList(); return ordersMax; }
public List<Product> RepeatedProducts() { List<Product> products = Enumerable.Repeat(Product.Default, 30).ToList(); return products; }
public List<Tuple<string, int>> CustomerDistinctOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> orderCounts = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Distinct().Count())).ToList(); return orderCounts; }
public List<int> StringLengthOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Select(w => w.Length).OrderByDescending(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public int OddNumbersMinTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Where(n => n % 2 == 1).Min(n => n * 2); return minNum; }
public List<int> RangeOfSquareInts() { List<int> numbers = Enumerable.Range(0, 20).Select(n=>n*n).ToList(); return numbers; }
public List<Tuple<string, int>> ExpensiveProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p=>p.UnitPrice>100) .Sum(p => p.UnitsInStock))).ToList(); return categories; }
public Dictionary<bool, List<int>> ProductGroupByPriceWithIdDict() { List<Product> products = GetProductList(); Dictionary<bool, List<int>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); return productGroup; }
public List<string> StringIndexedWhere() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> q = words.Where((w,i)=>w.Length<i).ToList(); return q; }
public Dictionary<double, double> ConvertArrayToDictionary() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; Dictionary<double, double> doublesDict = doubles.ToDictionary(sr => sr, sr => sr * 2); return doublesDict; }
public List<int> IntsConvertToListAndPrintForeach() { int[] ints = { 2, 3, 1, 5, 4 }; List<int> intsList = ints.OrderBy(d => d).ToList(); foreach (int i in intsList) Console.WriteLine(i); return intsList; }
public List<string> ShortStringOrderbyLengthReverse() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w.Length).Reverse().ToList(); return sortedWords; }
public double[] DoublesConvertToArrayAndPrint() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double[] doublesArray = doubles.OrderBy(d => d).ToArray(); for (int i = 0; i < doublesArray.Length; i++) Console.WriteLine(doublesArray[i]); return doublesArray; }
public Dictionary<int, List<Customer>>  CustomerGroupJoinRegionsWithCode() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); Dictionary<int, List<Customer>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c.ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public Dictionary<string, List<Product>> ExpensiveProductEachCategoryMinUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.Where(p=>p.UnitPrice>100).GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Min(p => p.UnitPrice)) .ToList()); return categories; }
public Dictionary<string, List<Product>> ProductGroupTakeWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> firstGroupsWhile = products.GroupBy(p => p.Category) .TakeWhile(g => g.Key.Length > 6).ToDictionary(g => g.Key, g => g.ToList()); return firstGroupsWhile; }
public List<double> BigDoubleFractionOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).Select(n => n-(int)n).OrderByDescending(n=>n).ToList(); return sortedNumbers; }
public int ProductOutOfStock() { List<Product> products = GetProductList(); int count = products.Count(c => c.UnitsInStock == 0); return count; }
public Dictionary<string, bool> ExpensiveProductEachGroupAllMatch() { List<Product> products = GetProductList(); Dictionary<string, bool> allMatch = products.Where(p => p.UnitPrice > 100).GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.All(p => p.UnitsInStock > 0)); return allMatch; }
public List<double> DoubleOrderbyModDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<string> LongStringTake() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> first3Words = words.Where(w => w.Length > 5).Take(3).ToList(); return first3Words; }
public Dictionary<string, List<Product>> ExpensiveProductEachCategoryMaxUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.Where(p=>p.UnitPrice>100).GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Max(p => p.UnitPrice)) .ToList()); return categories; }
public List<Tuple<string, string>> CustomerCrossJoinRegionsPhone() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.Join(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c.Phone)).ToList(); return q; }
public Dictionary<string, Dictionary<int, Dictionary<int, List<Order>>>> CustomerNestedGroupByNameAndOrderYearAndMonth() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<int, Dictionary<int, List<Order>>>> customerOrderGroups = customers.ToDictionary( c => c.CompanyName, c => c.Orders.GroupBy(o => o.OrderDate.Year).ToDictionary( yg => yg.Key, yg => yg.GroupBy(o => o.OrderDate.Month).ToDictionary( mg => mg.Key, mg => mg.ToList() ) )); return customerOrderGroups; }
public bool[] BigIntWithOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => Tuple.Create(n > 5,n == i)) .Where(t=>t.Item1).Select(t=>t.Item2).ToArray(); return numSelected; }
public double ExpensiveProductStockAverage() { List<Product> products = GetProductList(); double averageUnitPrice = products.Where(p => p.UnitPrice > 100).Average(p => p.UnitsInStock); return averageUnitPrice; }
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersEachWhile = customers .SelectMany(c => c.Orders.SkipWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return afterOrdersEachWhile; }
public List<string> ExceptOfRegion() { string[] regions = {"WA", "AF","RO"}; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> differentRegions = customerRegions.Except(regions).ToList(); return differentRegions; }
public List<string> StringOrderbyDescending() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderByDescending(w => w).ToList(); return sortedWords; }
public List<char> ConcatOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> allFirstChars = productFirstChars.Concat(customerFirstChars).ToList(); return allFirstChars; }
public Dictionary<string, Product> ProductEachCategoryFirstDict() { List<Product> products = GetProductList(); Dictionary<string, Product> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.First()); return categories; }
public double BigDoubleNumbersFirst() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.First(d => d > 5); return firstNum; }
public Dictionary<string, int> ExpensiveProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Where(p=>p.UnitPrice>100).Sum(p => p.UnitsInStock)); return categories; }
public Dictionary<string, int> CustomerEachCountryOrdersSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersTotalSum = customers.GroupBy(c => c.Country) .ToDictionary(g=>g.Key, g=>g.Sum(c=>c.Orders.Count)); return ordersTotalSum; }
public int NumbersMin() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Min(); return minNum; }
public Dictionary<double, double> ConvertArrayToDictionaryWithDistinct() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 1.7, 2.9 }; Dictionary<double, double> doublesDict = doubles.Distinct().ToDictionary(sr => sr, sr => sr * 2); return doublesDict; }
public List<Tuple<string, DateTime>> CustomerOrdersNestedTake() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> first3Orders = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Take(3).ToList(); return first3Orders; }
public Dictionary<string, Dictionary<string, Customer>> CustomerNestedGroupByRegionAndName() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<string, Customer>> customerGroups = customers.GroupBy( c => c.Region).ToDictionary(g => g.Key, g => g.ToDictionary( c => c.CompanyName, c => c)); return customerGroups; }
public double[] DoubleExcept() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] differentNumbers = numbersA.Except(numbersB).ToArray(); return differentNumbers; }
public List<string> StringOrderbyLength() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderBy(w => w.Length).ToList(); return sortedWords; }
public List<int> IntSkipWhileCount(int[] numbers, int n) { List<int> afterNumbersWhile = numbers.SkipWhile(i => i > n).ToList(); return afterNumbersWhile; }
public Dictionary<string, List<Product>> ProductGroupByCategoryDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> category = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.ToList()); return category; }
public List<Tuple<string,int>> ConvertSelectedTupleToList() { object[] numbers = { Tuple.Create("Alice", "50"), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; List<Tuple<string,int>> strings = numbers.OfType<Tuple<string,int>>().ToList(); return strings; }
public char[] ProjectionStringExcept() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; var first = wordsA.Select(n => n[0]); var second = wordsB.Select(n => n[0]); char[] words = first.Except(second).ToArray(); return words; }
public List<Tuple<bool, List<double>>> DoubleGroupByBoolOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<Tuple<bool, List<double>>> numbersGroups = numbers.GroupBy(n => n>5) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(w=>w).ToList())).ToList(); return numbersGroups; }
public List<string> StringOrderbyCustomThenbyLengthDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w,new CaseInsensitiveComparer()) .ThenByDescending(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
public string StringFirstOrDefaultLong() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startsWithO = strings.FirstOrDefault(s => s.Length > 4,"empty"); return startsWithO; }
public char[] ProjectionStringIntersect() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; var first = wordsA.Select(n => n[0]); var second = wordsB.Select(n => n[0]); char[] words = first.Intersect(second).ToArray(); return words; }
public List<Product> ExpensiveProductOrderbyDescendingId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderByDescending(p => p.ProductId).ToList(); return sortedProducts; }
public List<string> StringSkipCount(int n) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterNWords = words.Skip(n).ToList(); return afterNWords; }
public  Dictionary<int, List<string>> CustomerGroupJoinRegionsWithCodeName() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); Dictionary<int, List<string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c.Select(c=>c.CompanyName).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public List<string> StringSkipWhileCount(string[] strings, char c) { List<string> afterWordsWhile = strings.SkipWhile(w => w[0] > c).ToList(); return afterWordsWhile; }
public Product ExpensiveProductElementAt() { List<Product> products = GetProductList(); Product expensiveProduct = products.Where(p=>p.UnitPrice>100).ElementAt(2); return expensiveProduct; }
public int UniqueOddFactorOf300Count() { int[] factorsOf300 = { 2, 2, 3, 5, 5 }; int uniqueFactorsCount = factorsOf300.Distinct().Count(n => n % 2 == 1); return uniqueFactorsCount; }
public List<string> StringOrderbyDescendingLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderByDescending(w => w.Length, new CustomNumberComparer()).ToList(); return sortedWords; }
public void ShortStringLengthDeferred() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Where(w => w.Length < 7).Select(w => w.Length).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public List<double> BigDoubleOrderbyFractionThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public Dictionary<bool, List<int>> IntGroupByBoolDict() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; Dictionary<bool, List<int>> numberGroups = numbers.GroupBy(n => n > 4) .ToDictionary(g => g.Key, g => g.ToList()); return numberGroups; }
public Dictionary<string, bool> ExpensiveProductEachGroupAnyMatch() { List<Product> products = GetProductList(); Dictionary<string, bool> anyMatch = products.Where(p => p.UnitPrice > 100).GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Any(p => p.UnitsInStock > 0)); return anyMatch; }
public List<string> StringOrderbyDescendingLength() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderByDescending(w => w.Length).ToList(); return sortedWords; }
public bool StringAnyMatch(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Any(w => w[0] > c); return anyMatch; }
public Dictionary<string, double> CustomerExpensiveOrdersTotalAverageDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalAverage = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Average(o => o.Total)); return ordersTotalAverage; }
public List<string> ProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Select(p => p.ProductName).ToList(); return productNames; }
public Dictionary<string, List<double>> ProductGroupUnitPriceDict() { List<Product> products = GetProductList(); Dictionary<string, List<double>> productNames = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.UnitPrice).ToList()); return productNames; }
public List<int> OddIntTake() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Where(i => i % 2 == 1).Take(3).ToList(); return first3Numbers; }
public List<Order> WaCustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.Where(c => c.Region == "WA").SelectMany(c=> c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1))).ToList(); return customerProperties; }
public int CustomerInRegionCount(string region) { List<Customer> customers = GetCustomerList(); int count = customers.Count(c => c.Region.Equals(region)); return count; }
public int[] OddIntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select(n => n + 1).ToArray(); return numSelected; }
public List<double> OutOfStockProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Where(p => p.UnitsInStock == 0).Select(p => p.UnitPrice).ToList(); return productNames; }
public List<int> OddIntTakeWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.Where(i => i % 2 == 1).TakeWhile(i => i > 3).ToList(); return firstNumbersWhile; }
public List<int> IntSquareSkip() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Select(i => i * i).Skip(3).ToList(); return after3Numbers; }
public int[] IntIntersect() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] sharedNumbers = numbersA.Intersect(numbersB).ToArray(); return sharedNumbers; }
public List<Tuple<int, Customer>> CustomerCrossGroupJoinRegionsWithCode() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, Customer>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c)).SelectMany(t=> t.Item2,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public Dictionary<string, List<string>>  CustomerGroupJoinRegionsName() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); Dictionary<string, List<string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c.Select(c1=>c1.CompanyName).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public List<Tuple<string, int>> ExpensiveProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice > 100) .Max(p => p.UnitsInStock))).ToList(); return categories; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyNameCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category) .ThenBy(p=>p.ProductName,new CaseInsensitiveComparer()).ToList(); return sortedProducts; }
public List<int> IntTakeWhileCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.TakeWhile(i => i > n).ToList(); return firstNumbersWhile; }
public List<Tuple<string, List<Product>>> ProductEachCategoryMinUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.Min(p => p.UnitPrice)) .ToList())).ToList(); return categories; }
public int IntAddMultiply() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int product = numbersA.Zip(numbersB, (a, b) => a + b).Aggregate((a, b) => a * b); return product; }
public int OddNumbersElementAt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numAt = numbers.Where(n => n % 2 == 1).ElementAt(3); return numAt; }
public List<int> IntSquareIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Select(i => i * i).Where((n,i)=>n<i).ToList(); return q; }
public List<Tuple<string, List<Order>>> CustomerEachRegionOrdersTotalMaxCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Order>>> customerOrdersTotalMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c=>c.Orders).Where( o=>o.Total == g.SelectMany(c=>c.Orders).Max(o => o.Total)).ToList())).ToList(); return customerOrdersTotalMax; }
public List<Product> ProductOrderbyCategoryThenbyDescendingNameCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category) .ThenByDescending(p=>p.ProductName,new CaseInsensitiveComparer()).ToList(); return sortedProducts; }
public Dictionary<string, List<Product>> ProductGroupSkipWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> afterGroupsWhile = products.GroupBy(p => p.Category) .SkipWhile(g => g.Key.Length > 6).ToDictionary(g => g.Key, g => g.ToList()); return afterGroupsWhile; }
public List<double> BigDoubleFractionOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).Select(n => n-(int)n).OrderBy(n=>n).ToList(); return sortedNumbers; }
public double[] ProjectionDoubleUnion() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n-(int)n); var second = numbersB.Select(n => n-(int)n); double[] numbers = first.Union(second).ToArray(); return numbers; }
public List<Tuple<Tuple<string, int>, string>> CustomerLeftOuterJoinRegionsWithCodeNameRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<Tuple<string, int>, string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName).DefaultIfEmpty("No Customer"),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public bool IntAllMatch() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool allMatch = numbers.All(n => n > 3); return allMatch; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerBigOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public Dictionary<string, double> CustomerEachRegionOrdersTotalAverageDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalAverage = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(c => c.Orders).Average(o => o.Total)); return ordersTotalAverage; }
public Dictionary<string, double> CustomerEachRegionOrdersTotalMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMin = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(c => c.Orders).Min(o => o.Total)); return ordersTotalMin; }
public List<int> IntSquareSkipWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.Select(i => i * i).SkipWhile(i => i > 3).ToList(); return afterNumbersWhile; }
public List<Tuple<string, double>> CustomerOrdersTotalMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMax = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Max(o => o.Total))).ToList(); return ordersTotalMax; }
public List<double> IntSqrtSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<double> afterNumbers = numbers.Select(i => Math.Sqrt(i)).SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public Dictionary<string, List<Customer>> CustomerEachCountryOrdersMaxCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersMax = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Where(c => c.Orders.Count ==g.Max(c => c.Orders.Count)).ToList()); return customerOrdersMax; }
public List<Tuple<string, Product>> ProductLeftOuterJoinCategories() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, Product>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2.DefaultIfEmpty(null), (t, p) => Tuple.Create(t.Item1, p)).ToList(); return q; }
public List<Tuple<string, int>> ProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Max(p => p.UnitsInStock))).ToList(); return categories; }
public List<Tuple<bool, List<string>>> StringGroupByLengthOrderbyLength() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w.Length).ToList())).ToList(); return wordsGroups; }
public List<Tuple<string, List<Customer>>> CustomerEachCountryOrdersFirstCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> customerOrdersFirst = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Where(c => c.Orders.Count ==g.First().Orders.Count).ToList())).ToList(); return customerOrdersFirst; }
public double NumbersAggregateFindMaxWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 5; double aggregateSum = numbers.Aggregate(seed, (a, b) => Math.Max(a,b)); return aggregateSum; }
public List<char> UnionOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> uniqueFirstChars = productFirstChars.Union(customerFirstChars).ToList(); return uniqueFirstChars; }
public double ProductUnitPriceMax() { List<Product> products = GetProductList(); double maxUnitPrice = products.Max(p => p.UnitPrice); return maxUnitPrice; }
public void OddNumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public int StringMinLength() { string[] words = { "cherry", "apple", "blueberry" }; int minLength = words.Min(w => w.Length); return minLength; }
public bool ProjectionEqualInts() { int[] numbersA = { 0, 2, 4, 5, 9 }; int[] numbersB = { 1, 3, 5, 6, 10 }; bool equal = numbersA.Select(n => n + 1).SequenceEqual(numbersB); return equal; }
public string StringFirstStartWith(char c) { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithChar = strings.First(s => s[0] == c); return startWithChar; }
public List<Product> ProductsConvertToList() { List<Product> products = GetProductList(); List<Product> productsList = products.OrderBy(p => p.UnitPrice).ToList(); return productsList; }
public int[] TransformIndexHashToInt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] textNums = numbers.Select(n => numbers[n * 97 % 10]).ToArray(); return textNums; }
public List<string> ShortStringOrderby() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w).ToList(); return sortedWords; }
public double[] DoubleUnion() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] uniqueNumbers = numbersA.Union(numbersB).ToArray(); return uniqueNumbers; }
public double[] ProjectionDoubleConcat() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n - (int)n); var second = numbersB.Select(n => n - (int)n); double[] numbers = first.Concat(second).ToArray(); return numbers; }
public int[] IntZipSub() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int[] subNumbers = numbersA.Zip(numbersB, (a, b) => a - b).ToArray(); return subNumbers; }
public List<Order> CustomerOrdersTakeWhile() { List<Customer> customers = GetCustomerList(); List<Order> firstOrdersWhile = customers.SelectMany(c => c.Orders) .TakeWhile(o => o.OrderDate > new DateTime(2000, 1, 1)).ToList(); return firstOrdersWhile; }
public Dictionary<bool, List<int>> ProductGroupByInStockWithIdDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<int>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); productGroup[true].ForEach(p => Console.Write(p)); Console.WriteLine(); productGroup[false].ForEach(p => Console.Write(p)); return productGroup; }
public List<string> ConcatOfCategory() { string[] categories = { "Furnitures", "Seagoods" }; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> allCategories = productCategories.Concat(categories).ToList(); return allCategories; }
public List<Tuple<string,string>> CustomerCityAndAddress() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.City,c.Address)).ToList(); return customerProperties; }
public List<int> StringLengthSkip() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> after3Words = words.Select(w => w.Length).Skip(3).ToList(); return after3Words; }
public List<Tuple<string, List<int>>> ProductGroupByCategoryWithId() { List<Product> products = GetProductList(); List<Tuple<string, List<int>>> category = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductId).ToList())).ToList(); return category; }
public List<Tuple<bool, List<double>>> DoubleGroupByBool() { double[] numbers = { 5.8, 4.3, 1.5, 3.7, 9.3 }; List<Tuple<bool, List<double>>> numberGroups = numbers.GroupBy(n => n > 3) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return numberGroups; }
public List<Tuple<string, Order>> CustomerEachRegionFirstOrDefaultOrder() { List<Customer> customers = GetCustomerList(); List<Tuple<string, Order>> ordersMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(p => p.Orders).FirstOrDefault(Order.Default))).ToList(); return ordersMax; }
public List<bool> WaCustomerOrdersEachNestedAllMatch() { List<Customer> customers = GetCustomerList(); List<bool> allMatch = customers.Where(c=>c.Region=="WA").Select(c => c.Orders.All(o => o.OrderDate > new DateTime(2000, 1, 1))).ToList(); return allMatch; }
public List<Tuple<string, string>> ProductCrossJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, string>> q = categories.Join(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p.ProductName)).ToList(); return q; }
public bool IntAllMatchInput(int[] numbers, int i) { bool allMatch = numbers.All(n => n > i); return allMatch; }
public List<Tuple<bool, List<string>>> StringGroupByLengthOrderbyDescendingLength() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(w=>w.Length).ToList())).ToList(); return wordsGroups; }
public int OddNumbersMax() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Where(n => n % 2 == 1).Max(); return maxNum; }
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyDescending() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => w[0]) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w).ToList()); return wordsGroups; }
public int NumbersMinTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Min(n => n * 2); return minNum; }
public void BigNumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3EachWAOrders = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.Skip(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return after3EachWAOrders; }
public List<Tuple<string, double>> CustomerInRegionOrdersTotalSum(string region) { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.Where(c => c.Region.Equals(region)) .Select(c => Tuple.Create(c.CustomerId, c.Orders.Sum(o => o.Total))).ToList(); return ordersTotalSum; }
public List<Order> CustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1))).ToList(); return customerProperties; }
public bool LongStringAnyMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Where(w => w.Length > 5).Any(n => string.CompareOrdinal(n, "b") > 0); return anyMatch; }
