public List<Tuple<string, double>> CustomerExpensiveOrdersTotalMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMax = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Where(o => o.Total > 100).Max(o => o.Total))).ToList(); return ordersTotalMax; }
public int ProjectedStringElementAt() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int firstStringLength = strings.Select(s => s.Length) .Where(i => i % 2 == 0).ElementAt(2); return firstStringLength; }
public List<Tuple<string, int>> CustomerEachCountryOrdersMin() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersMin = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Min(c => c.Orders.Count))).ToList(); return ordersMin; }
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3EachOrders = customers .SelectMany(c => c.Orders.Skip(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return after3EachOrders; }
public int OddNumbersFirstOrDefault() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.FirstOrDefault(n => n % 2 == 1,-2); return firstNum; }
public List<Tuple<string, int>> CustomerExpensiveOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> orderCounts = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Count(o => o.Total > 100))).ToList(); return orderCounts; }
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w,new CaseInsensitiveComparer()).ToList()); return wordsGroups; }
public List<int> IntWithSquareIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Where((n,i)=>n<i*i).ToList(); return q; }
public int[] ProjectionIntConcat() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; var first = numbersA.Select(n => n + 1); var second = numbersB.Select(n => n - 1); int[] numbers = first.Concat(second).ToArray(); return numbers; }
public List<int> RangeOfEvenIntsStartFrom(int start,int count) { List<int> numbers = Enumerable.Range(start, count).Where(n=>n%2==0).ToList(); return numbers; }
public List<Tuple<string, string>> ProductLeftOuterJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, string>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2.Select(p=>p.ProductName).DefaultIfEmpty("No Product"), (t, n) => Tuple.Create(t.Item1, n)).ToList(); return q; }
public List<Tuple<string,int,double>> CustomerSelectManyCustomerNewOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public Dictionary<string, List<Product>> ProductEachCategoryMaxUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Max(p => p.UnitPrice)) .ToList()); return categories; }
public Product ProductFirstOrDefault() { List<Product> products = GetProductList(); Product product12 = products.FirstOrDefault(p => p.ProductId == 12,Product.Default); return product12; }
public int OddFactorOf300Count() { int[] factorsOf300 = { 2, 2, 3, 5, 5 }; int factorsCount = factorsOf300.Count(n => n % 2 == 1); return factorsCount; }
public List<double> DoubleOrderbyModThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public double DoubleFirstOrDefault() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.FirstOrDefault(3.14); return firstNum; }
public List<int> RangeOfEvenIntsStartFrom() { List<int> numbers = Enumerable.Range(100, 100).Where(n=>n%2==0).ToList(); return numbers; }
public Dictionary<string, List<Product>> ProductEachCategoryMinUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Min(p => p.UnitPrice)) .ToList()); return categories; }
public Dictionary<string, double> CustomerOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Sum(o => o.Total)); return ordersTotalSum; }
public List<Tuple<string,List<Order>>> CustomerIdAndOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,List<Order>>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders)).ToList(); return customerProperties; }
public List<double> BigDoubleOrderbyModThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<Tuple<string,Order>> CustomerSelectManyCustomerOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public Dictionary<string, Dictionary<string, Customer>> CustomerNestedGroupByRegionAndName() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<string, Customer>> customerGroups = customers.GroupBy( c => c.Region).ToDictionary(g => g.Key, g => g.ToDictionary( c => c.CompanyName, c => c)); return customerGroups; }
public List<Order> CustomerOrdersTakeWhile() { List<Customer> customers = GetCustomerList(); List<Order> firstOrdersWhile = customers.SelectMany(c => c.Orders) .TakeWhile(o => o.OrderDate > new DateTime(2000, 1, 1)).ToList(); return firstOrdersWhile; }
public Dictionary<double, double> ConvertArrayToDictionaryWithDistinctAndPrint() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 1.7, 2.9 }; Dictionary<double, double> doublesDict = doubles.Distinct().ToDictionary(sr => sr, sr => sr * 2); foreach (var pair in doublesDict) Console.WriteLine(pair.Key + " " + pair.Value); return doublesDict; }
public double[] ProjectionDoubleIntersect() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n-(int)n); var second = numbersB.Select(n => n-(int)n); double[] numbers = first.Intersect(second).ToArray(); return numbers; }
public List<Tuple<string, string>> CustomerCrossGroupJoinRegionsPhone() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.Phone) ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public List<double> BigDoubleOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).OrderByDescending(n => n).ToList(); return sortedNumbers; }
public List<int> IntTakeWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbers = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
public List<int> IntSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbers = numbers.SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public double BigNumbersAverageTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; double averageNum = numbers.Where(n => n > 5).Average(n => n * 2); return averageNum; }
public Dictionary<string, double> CustomerExpensiveOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Sum(o => o.Total)); return ordersTotalSum; }
public Dictionary<string, List<Product>> ProductEachGroupTake() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> first3EachGroups = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Take(3).ToList()); return first3EachGroups; }
public double BigDoubleNumbersFirst() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.First(d => d > 5); return firstNum; }
public double ProductUnitPriceMin() { List<Product> products = GetProductList(); double minUnitPrice = products.Min(p => p.UnitPrice); return minUnitPrice; }
public List<Tuple<string, string>> CustomerLeftOuterJoinRegionsName() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName).DefaultIfEmpty("No Customer") ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public int ProjectedBigNumbersFirst() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.Select(i => (int)Math.Pow(2, i)).First(n => n > 100); return firstNum; }
public Dictionary<int, Dictionary<int, List<Order>>> CustomerNestedGroupByOrderYearAndMonth() { List<Customer> customers = GetCustomerList(); Dictionary<int, Dictionary<int, List<Order>>> customerOrderGroups = customers.SelectMany(c => c.Orders) .GroupBy(o => o.OrderDate.Year).ToDictionary( yg => yg.Key, yg => yg.GroupBy(o => o.OrderDate.Month).ToDictionary( mg => mg.Key, mg => mg.ToList()) ); return customerOrderGroups; }
public List<Tuple<string, List<Product>>> ProductEachCategoryFirstOrDefaultUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.FirstOrDefault(Product.Default).UnitPrice) .ToList())).ToList(); return categories; }
public bool StringAnyMatch(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Any(w => w[0] > c); return anyMatch; }
public Dictionary<string, double> CustomerEachRegionOrdersTotalMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(c => c.Orders).Max(o => o.Total)); return ordersTotalMax; }
public List<Tuple<double, List<double>>> DoubleGroupByMod() { double[] numbers = { 5.8, 4.3, 1.5, 3.7, 9.3 }; List<Tuple<double, List<double>>> numberGroups = numbers.GroupBy(n => n % 1.5) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return numberGroups; }
public Dictionary<string, int> CustomerEachRegionOrdersMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersMin = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.Min(c => c.Orders.Count)); return ordersMin; }
public int BigNumbersSumTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n > 5).Sum(n => n * 2); return numbersSum; }
public List<int> IntSquareSkipWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.Select(i => i * i).SkipWhile(i => i > 3).ToList(); return afterNumbersWhile; }
public Dictionary<string, bool> ProductEachGroupAllMatch() { List<Product> products = GetProductList(); Dictionary<string, bool> allMatch = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.All(p => p.UnitsInStock > 0)); return allMatch; }
public bool LongStringAnyMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Where(w => w.Length > 5).Any(n => string.CompareOrdinal(n, "b") > 0); return anyMatch; }
public List<Product> ProductOrderbyDescendingName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderByDescending(p => p.ProductName).ToList(); return sortedProducts; }
public bool[] BigIntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Where(n => n > 5).Select((n, i) => n == i).ToArray(); return numSelected; }
public double ProductUnitPriceTotalSum() { List<Product> products = GetProductList(); double totalSum = products.Sum(p => p.UnitPrice); return totalSum; }
public List<Tuple<string, Customer>> CustomerLeftOuterJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, Customer>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=>t.Item2.DefaultIfEmpty(null) ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public Dictionary<string, int> CustomerNewOrdersCountDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> orderCounts = customers.ToDictionary( c => c.CustomerId, c => c.Orders.Count( o => o.OrderDate > new DateTime(2000, 1, 1))); return orderCounts; }
public List<string> StringOrderbyLength() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderBy(w => w.Length).ToList(); return sortedWords; }
public string[] SelectByCaseConcat() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; string[] upperLowerWords = words.Select(w => w.ToUpper() + w.ToLower()).ToArray(); return upperLowerWords; }
public List<Product> ProductOrderbyDescendingId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderByDescending(p => p.ProductId).ToList(); return sortedProducts; }
public Dictionary<string, List<Product>> ProductsConvertGroupingToDictionaryAndPrint() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> catagory = products.GroupBy(p => p.Category).ToDictionary( g => g.Key, g => g.ToList()); foreach (var pair in catagory) { Console.WriteLine(pair.Key + ":"); foreach (var product in pair.Value) Console.WriteLine("\t" + product); } return catagory; }
public List<Tuple<string, double>> CustomerOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Sum(o => o.Total))).ToList(); return ordersTotalSum; }
public List<Tuple<int, string>> CustomerCrossJoinRegionsWithCodeName() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, string>> q = regions.Join(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c.CompanyName)).ToList(); return q; }
public double BigNumbersAggregateMultiplyWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 1.6; double product = numbers.Where(n => n > 2).Aggregate(seed, (a, b) => a * b); return product; }
public int ProjectedStringFirst() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int firstStringLength = strings.Select(s => s.Length).First(i => i % 2 == 0); return firstStringLength; }
public bool ProductAnyMatch() { List<Product> products = GetProductList(); bool anyMatch = products.Any(p => p.UnitsInStock > 0); return anyMatch; }
public List<Tuple<string,int,double>> CustomerSelectManyCustomerOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public int NumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Sum(); return numbersSum; }
public char[] ShortStringFirstChar() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; char[] selected = strings.Where(w => w.Length < 4).Select(w => w[0]).ToArray(); return selected; }
public int[] OddFactorOf300And900Count() { int[][] factorsOf300And900 = { new[] { 2, 2, 3, 5, 5 }, new[] { 2, 2, 3, 3, 5, 5 } }; int[] factorsCount = factorsOf300And900.Select( a => a.Count(n => n % 2 == 1)).ToArray(); return factorsCount; }
public List<Tuple<string, double>> CustomerEachRegionOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.GroupBy(c => c.Region) .Select(g=>Tuple.Create(g.Key, g.SelectMany(c=>c.Orders).Sum(o => o.Total))).ToList(); return ordersTotalSum; }
public int[] IntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select(n => n + 1).ToArray(); return numSelected; }
public List<Tuple<string, Customer>> CustomerCrossGroupJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, Customer>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=>t.Item2 ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public bool WaCustomerOrdersNestedAnyMatch() { List<Customer> customers = GetCustomerList(); bool anyMatch = customers.Where(c=>c.Region=="WA").SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Any(t => t.Item2 > new DateTime(2000, 1, 1)); return anyMatch; }
public Dictionary<Tuple<string,int>, List<string>> CustomerGroupJoinRegionsWithCodeNameRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); Dictionary<Tuple<string,int>, List<string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c.Select(c=>c.CompanyName).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public List<Tuple<string, DateTime>> CustomerOrdersNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersWhile = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).TakeWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return firstOrdersWhile; }
public Tuple<int, int>[] SelectManyJoinSumEven() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => (a + b) % 2 == 0), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public int[] StringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Select(w => w.Length).ToArray(); return selected; }
public int ShortStringMaxLength() { string[] words = { "cherry", "apple", "blueberry" }; int maxLength = words.Where(w => w.Length < 7).Max(w => w.Length); return maxLength; }
public bool[] IntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => n == i).ToArray(); return numSelected; }
public List<int> RangeOfSquareInts() { List<int> numbers = Enumerable.Range(0, 20).Select(n=>n*n).ToList(); return numbers; }
public Dictionary<bool, List<double>> DoubleGroupByBoolDictOrderbyFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; Dictionary<bool, List<double>>  numbersGroups = numbers.GroupBy(n => n>5) .ToDictionary(g => g.Key, g => g.OrderBy(n=>n-(int)n).ToList()); return numbersGroups; }
public List<string> ShortStringOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderByDescending(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public Dictionary<string, Order> CustomerEachRegionFirstOrderDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, Order> ordersMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(c => c.Orders).First()); return ordersMax; }
public List<Tuple<bool, List<int>>> ProductGroupByPriceWithId() { List<Product> products = GetProductList(); List<Tuple<bool, List<int>>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductId).ToList())).ToList(); return productGroup; }
public List<Tuple<string, int>> CustomerDistinctOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> orderCounts = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Distinct().Count())).ToList(); return orderCounts; }
public int OddNumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n % 2 == 1).Sum(); return numbersSum; }
public List<int> IntTakeCount(int[] numbers, int n) { List<int> firstNNumbers = numbers.Take(n).ToList(); return firstNNumbers; }
public List<Order> WaCustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.Where(c => c.Region == "WA").SelectMany(c=> c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1))).ToList(); return customerProperties; }
public List<double> DoubleFractionOrderbyReverse() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Select(n => n-(int)n).OrderBy(n=>n).Reverse().ToList(); return sortedNumbers; }
public Dictionary<string, double> CustomerExpensiveOrdersTotalMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMin = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Min(o => o.Total)); return ordersTotalMin; }
public Dictionary<bool, List<int>> ProductGroupByInStockWithIdDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<int>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); productGroup[true].ForEach(p => Console.Write(p)); Console.WriteLine(); productGroup[false].ForEach(p => Console.Write(p)); return productGroup; }
public List<Tuple<string, double>> ProductCrossJoinCategoriesUnitPrice() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, double>> q = categories.Join(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p.UnitPrice)).ToList(); return q; }
public Dictionary<string, double> CustomerOrdersTotalMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMax = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Max(o => o.Total)); return ordersTotalMax; }
public List<string> StringTakeCount(string[] strings, int n) { List<string> firstNWords = strings.Take(n).ToList(); return firstNWords; }
public void NumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public double[] DoublesConvertToDescendingArrayAndPrintForeach() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double[] doublesArray = doubles.OrderByDescending(d => d).ToArray(); foreach (double d in doublesArray) Console.WriteLine(d); return doublesArray; }
public double ExpensiveProductUnitPriceTotalSum() { List<Product> products = GetProductList(); double totalSum = products.Where(p => p.UnitPrice > 100).Sum(p => p.UnitPrice); return totalSum; }
public List<double> BigDoubleOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).OrderBy(n => n).ToList(); return sortedNumbers; }
public Dictionary<string, int> ConvertTuplesToDictionaryAndPrint() { List<Tuple<string, int>> scoreRecords =new List<Tuple<string, int>> { Tuple.Create("Alice", 50), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; Dictionary<string, int> scoreRecordsDict = scoreRecords.ToDictionary(sr => sr.Item1, sr => sr.Item2); foreach (var pair in scoreRecordsDict) Console.WriteLine(pair.Key + " " + pair.Value); return scoreRecordsDict; }
public List<Product> RepeatedProductsWithCount(int count) { List<Product> products = Enumerable.Repeat(Product.Default, count).ToList(); return products; }
public List<string> StringSkipWhileCount(string[] strings, char c) { List<string> afterWordsWhile = strings.SkipWhile(w => w[0] > c).ToList(); return afterWordsWhile; }
public List<int> IntTakeWhileIndexedCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbers = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
public double InputNumbersAggregate(double[] numbers) { double product = numbers.Aggregate((runningProduct, nextFactor) => runningProduct * nextFactor); return product; }
