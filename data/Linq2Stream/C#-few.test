public List<Product> ProductOrderbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.ProductId).ToList(); return sortedProducts; }
public List<Product> ProductOrderbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.ProductName).ToList(); return sortedProducts; }
public List<string> ProductNameOrderby() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Select(p => p.ProductName).OrderBy(n=>n).ToList(); return sortedProducts; }
public List<Product> ExpensiveProductOrderbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.ProductId).ToList(); return sortedProducts; }
public List<Product> ExpensiveProductOrderbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.ProductName).ToList(); return sortedProducts; }
public List<string> ExpensiveProductNameOrderby() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Where(p=>p.UnitPrice>100).Select(p => p.ProductName).OrderBy(n=>n).ToList(); return sortedProducts; }
public List<Tuple<string,List<Product>>> ProductGroupByCategoryOrderbyId() { List<Product> products = GetProductList(); List<Tuple<string,List<Product>>> productsGroups = products.GroupBy(p=>p.Category) .Select(g => Tuple.Create(g.Key,g.OrderBy(p=>p.ProductId).ToList())).ToList(); return productsGroups; }
public Dictionary<string,List<Product>> ProductGroupByCategoryDictOrderbyId() { List<Product> products = GetProductList(); Dictionary<string,List<Product>>  productsGroups = products.GroupBy(p=>p.Category) .ToDictionary(g => g.Key,g=>g.OrderBy(p=>p.ProductId).ToList()); return productsGroups; }
public List<Tuple<string,List<Product>>> ProductGroupByCategoryOrderbyName() { List<Product> products = GetProductList(); List<Tuple<string,List<Product>>> productsGroups = products.GroupBy(p=>p.Category) .Select(g => Tuple.Create(g.Key,g.OrderBy(p=>p.ProductName).ToList())).ToList(); return productsGroups; }
public Dictionary<string,List<Product>> ProductGroupByCategoryDictOrderbyName() { List<Product> products = GetProductList(); Dictionary<string,List<Product>>  productsGroups = products.GroupBy(p=>p.Category) .ToDictionary(g => g.Key,g=>g.OrderBy(p=>p.ProductName).ToList()); return productsGroups; }
public List<string> StringOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<int> StringLengthOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Select(w => w.Length).OrderBy(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<string> ShortStringOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<string> ShortStringOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w.Length, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<int> ShortStringLengthOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Where(w => w.Length < 6).Select(w => w.Length).OrderBy(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<Tuple<char, List<string>>> StringGroupByFirstCharOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w,new CaseInsensitiveComparer()).ToList())).ToList(); return wordsGroups; }
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w,new CaseInsensitiveComparer()).ToList()); return wordsGroups; }
public List<Tuple<bool, List<string>>> StringGroupByLengthOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w.Length,new CustomNumberComparer()).ToList())).ToList(); return wordsGroups; }
public Dictionary<bool, List<string>> StringGroupByLengthDictOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<bool, List<string>> wordsGroups = words.GroupBy(w => w.Length > 8) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w.Length,new CustomNumberComparer()).ToList()); return wordsGroups; }
public void NumbersDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void BigNumbersDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void OddNumbersDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void DoubleDeferred() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Select(n => d += n); foreach (var v in q) Console.Write(v + " " + d); }
public void BigDoubleNumbersDeferred() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Where(d => d > 5).Select(n => d += n); foreach (var v in q) Console.Write(v + " " + d); }
public void NumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void BigNumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void OddNumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void StringLengthDeferred() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Select(w => w.Length).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void ShortStringLengthDeferred() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Where(w => w.Length < 7).Select(w => w.Length).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void NumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void BigNumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void OddNumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void DoubleEager() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Select(n => d += n).ToList(); foreach (var v in q) Console.Write(v + " " + d); }
public void BigDoubleNumbersEager() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Where(d => d > 5).Select(n => d += n).ToList(); foreach (var v in q) Console.Write(v + " " + d); }
public void NumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void BigNumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void OddNumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void StringLengthEager() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Select(w => w.Length).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void ShortStringLengthEager() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Where(w => w.Length < 7).Select(w => w.Length).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public Tuple<int, int>[] SelectManyJoin() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB, (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public Tuple<int, int>[] SelectManyJoinOdd() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => b % 2 == 1), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public Tuple<int, int>[] SelectManyJoinBig() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => b > 5), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public Tuple<int, int>[] SelectManyJoinSmaller() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => a < b), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public Tuple<int, int>[] SelectManyJoinSumEven() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => (a + b) % 2 == 0), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public List<Order> CustomerSelectManyOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders).ToList(); return customerProperties; }
public List<Tuple<string,Order>> CustomerSelectManyCustomerOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public List<Tuple<string,DateTime>> CustomerSelectManyCustomerOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public List<Tuple<string,int,double>> CustomerSelectManyCustomerOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Order> CustomerSelectManyBigOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders.Where(o=>o.Total>100)).ToList(); return customerProperties; }
public List<Tuple<string,Order>> CustomerSelectManyCustomerBigOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public List<Tuple<string,DateTime>> CustomerSelectManyCustomerBigOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public List<Tuple<string,int,double>> CustomerSelectManyCustomerBigOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerBigOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Order> CustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1))).ToList(); return customerProperties; }
public List<Tuple<string,Order>> CustomerSelectManyCustomerNewOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public List<Tuple<string,DateTime>> CustomerSelectManyCustomerNewOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public List<Tuple<string,int,double>> CustomerSelectManyCustomerNewOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerNewOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Order> WaCustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.Where(c => c.Region == "WA").SelectMany(c=> c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1))).ToList(); return customerProperties; }
public List<Tuple<string,Order>> WaCustomerSelectManyCustomerNewOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public List<Tuple<string,DateTime>> WaCustomerSelectManyCustomerNewOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public List<Tuple<string,int,double>> WaCustomerSelectManyCustomerNewOrderIdAndDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<Tuple<string,int,int>> WaCustomerSelectManyCustomerNewOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public int[] IndexedSelectMany() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] pairs = numbersA.SelectMany((a,i) => numbersB.Select( b=>i%2==0?a:b)).ToArray(); return pairs; }
public int[] IndexedSelectManyBig() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] pairs = numbersA.SelectMany((a,i) => numbersB.Where(b=>b<a+i)).ToArray(); return pairs; }
public List<Order> CustomerIndexedSelectManyOrdersTake() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany((c,i)=> c.Orders.Take(i<10?5:1).ToList()).ToList(); return customerProperties; }
public List<Order> WaCustomerIndexedSelectManyOrdersTake() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.Where(c=>c.Region=="WA").SelectMany((c,i)=> c.Orders.Take(i<10?5:1).ToList()).ToList(); return customerProperties; }
public List<string> IndexedSelectManyString() { List<Customer> customers = GetCustomerList(); List<string> customerOrders = customers.SelectMany((c, i) => c.Orders.Select(o => "Customer #" + (i + 1) + " has an order with OrderID " + o.OrderId)).ToList(); return customerOrders; }
public int[] IntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select(n => n + 1).ToArray(); return numSelected; }
public int[] OddIntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select(n => n + 1).ToArray(); return numSelected; }
public int[] BigIntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n > 5).Select(n => n + 1).ToArray(); return numSelected; }
public int[] IntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select(n => n * 2).ToArray(); return numSelected; }
public int[] OddIntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select(n => n * 2).ToArray(); return numSelected; }
public int[] BigIntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n > 5).Select(n => n * 2).ToArray(); return numSelected; }
public char[] StringFirstChar() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; char[] selected = strings.Select(w => w[0]).ToArray(); return selected; }
public char[] ShortStringFirstChar() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; char[] selected = strings.Where(w => w.Length < 4).Select(w => w[0]).ToArray(); return selected; }
public int[] StringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Select(w => w.Length).ToArray(); return selected; }
public int[] ShortStringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Where(w => w.Length < 4).Select(w => w.Length).ToArray(); return selected; }
public List<string> ProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Select(p => p.ProductName).ToList(); return productNames; }
public List<double> ProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Select(p => p.UnitPrice).ToList(); return productNames; }
public List<string> ExpensiveProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Where(p => p.UnitPrice > 100).Select(p => p.ProductName).ToList(); return productNames; }
public List<double> ExpensiveProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Where(p => p.UnitPrice > 100).Select(p => p.UnitPrice).ToList(); return productNames; }
public List<string> OutOfStockProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Where(p => p.UnitsInStock == 0).Select(p => p.ProductName).ToList(); return productNames; }
public List<double> OutOfStockProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Where(p => p.UnitsInStock == 0).Select(p => p.UnitPrice).ToList(); return productNames; }
public List<Tuple<string, List<string>>> ProductGroupName() { List<Product> products = GetProductList(); List<Tuple<string, List<string>>> productNames = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductName).ToList())) .ToList(); return productNames; }
public Dictionary<string, List<string>> ProductGroupNameDict() { List<Product> products = GetProductList(); Dictionary<string, List<string>> productNames = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductName).ToList()); return productNames; }
public List<Tuple<string, List<double>>> ProductGroupUnitPrice() { List<Product> products = GetProductList(); List<Tuple<string, List<double>>> productNames = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Select(p => p.UnitPrice).ToList())) .ToList(); return productNames; }
public Dictionary<string, List<double>> ProductGroupUnitPriceDict() { List<Product> products = GetProductList(); Dictionary<string, List<double>> productNames = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.UnitPrice).ToList()); return productNames; }
public int[] TransformIndexToInt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] textNums = numbers.Select(n => numbers[n]).ToArray(); return textNums; }
public string[] TransformIndexToString() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string[] textNums = numbers.Select(n => strings[n]).ToArray(); return textNums; }
public int[] TransformIndexHashToInt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] textNums = numbers.Select(n => numbers[n * 97 % 10]).ToArray(); return textNums; }
public string[] TransformIndexHashToString() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string[] textNums = numbers.Select(n => strings[n * 97 % 10]).ToArray(); return textNums; }
public Tuple<string, string>[] SelectByCase() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; Tuple<string, string>[] upperLowerWords = words.Select(w => Tuple.Create(w.ToUpper(), w.ToLower())).ToArray(); return upperLowerWords; }
public string[] SelectByCaseConcat() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; string[] upperLowerWords = words.Select(w => w.ToUpper() + w.ToLower()).ToArray(); return upperLowerWords; }
public Tuple<string, int>[] SelectByStringAndLength() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; Tuple<string, int>[] upperLowerWords = words.Select(w => Tuple.Create(w, w.Length)).ToArray(); return upperLowerWords; }
public string[] SelectByStringAndLengthConcat() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; string[] upperLowerWords = words.Select(w => w + w.Length).ToArray(); return upperLowerWords; }
public Tuple<string, bool>[] SelectByEvenOdd() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; Tuple<string, bool>[] evenOddWords = numbers.Select(n => Tuple.Create(strings[n], n % 2 == 0)).ToArray(); return evenOddWords; }
public string[] SelectByEvenOddConcat() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string[] evenOddWords = numbers.Select(n => strings[n] + (n % 2 == 0 ? " even" : " odd")).ToArray(); return evenOddWords; }
