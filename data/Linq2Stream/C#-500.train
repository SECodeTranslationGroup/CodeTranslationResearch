public List<Tuple<string, double>> CustomerInRegionOrdersTotalAverage(string region) { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalAverage = customers.Where(c => c.Region.Equals(region)) .Select(c => Tuple.Create(c.CustomerId, c.Orders.Average(o => o.Total))).ToList(); return ordersTotalAverage; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Tuple<string, Product>> ProductLeftOuterJoinCategories() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, Product>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2.DefaultIfEmpty(null), (t, p) => Tuple.Create(t.Item1, p)).ToList(); return q; }
public List<Tuple<bool, List<double>>> DoubleGroupByBoolOrderbyFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<Tuple<bool, List<double>>> numbersGroups = numbers.GroupBy(n => n>5) .Select(g => Tuple.Create(g.Key, g.OrderBy(n=>n-(int)n).ToList())).ToList(); return numbersGroups; }
public List<Tuple<string, List<Customer>>> CustomerEachCountryOrdersMinCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> customerOrdersMin = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Where(c => c.Orders.Count ==g.Min(c => c.Orders.Count)).ToList())).ToList(); return customerOrdersMin; }
public Dictionary<string, List<Product>> ProductEachGroupTakeWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> firstEachGroupsWhile = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.TakeWhile(p => p.ProductId > 100).ToList()); return firstEachGroupsWhile; }
public Dictionary<bool, List<double>> DoubleGroupByBoolDictOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; Dictionary<bool, List<double>>  numbersGroups = numbers.GroupBy(n => n>5) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w).ToList()); return numbersGroups; }
public List<double> BigDoubleOrderbyFractionDescendingThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderByDescending(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }
public double[] DoublesConvertToDescendingArray() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double[] doublesArray = doubles.OrderByDescending(d => d).ToArray(); return doublesArray; }
public double[] ConvertSelectedDoubleItemToArrayAndPrint() { object[] numbers = { null, 1.0, "two", 3, "four", 5, "six", 7.0 }; double[] doubles = numbers.OfType<double>().ToArray(); for (int i = 0; i < doubles.Length; i++) Console.WriteLine(doubles[i]); return doubles; }
public Dictionary<string, int> CustomerDistinctOrdersCountDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> orderCounts = customers.ToDictionary( c => c.CustomerId, c => c.Orders.Distinct().Count()); return orderCounts; }
public List<Customer> RepeatedCustomers() { List<Customer> customers = Enumerable.Repeat(Customer.Default, 5).ToList(); return customers; }
public int[] BigIntAddIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n > 5).Select((n, i) => n + i).ToArray(); return numSelected; }
public List<Product> ExpensiveProductSkipWhile() { List<Product> products = GetProductList(); List<Product> afterProductsWhile = products.Where(p => p.UnitPrice > 100).SkipWhile(p => p.ProductId > 100).ToList(); return afterProductsWhile; }
public int NumbersSumTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Sum(n => n * 2); return numbersSum; }
public int IntDotProduct() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int dotProduct = numbersA.Zip(numbersB, (a, b) => a * b).Sum(); return dotProduct; }
public bool CustomerOrdersNestedAnyMatch() { List<Customer> customers = GetCustomerList(); bool anyMatch = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Any(t => t.Item2 > new DateTime(2000, 1, 1)); return anyMatch; }
public List<string> IndexedSelectManyString() { List<Customer> customers = GetCustomerList(); List<string> customerOrders = customers.SelectMany((c, i) => c.Orders.Select(o => "Customer #" + (i + 1) + " has an order with OrderID " + o.OrderId)).ToList(); return customerOrders; }
public double[] DoubleUnion() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] uniqueNumbers = numbersA.Union(numbersB).ToArray(); return uniqueNumbers; }
public Dictionary<Tuple<string,int>, List<Customer>> CustomerGroupJoinRegionsWithCodeRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); Dictionary<Tuple<string,int>, List<Customer>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c.ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public List<int> IntTake() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Take(3).ToList(); return first3Numbers; }
public List<Tuple<string,Order>> CustomerIdAndFirstOrDefaultOrder() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders.FirstOrDefault(Order.Default))).ToList(); return customerProperties; }
public int[] IntUnion() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] uniqueNumbers = numbersA.Union(numbersB).ToArray(); return uniqueNumbers; }
public List<Tuple<string, List<Product>>> ProductEachCategoryMaxUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.Max(p => p.UnitPrice)) .ToList())).ToList(); return categories; }
public List<int> ShortStringLengthOrderby() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<int> sortedWords = words.Where(w => w.Length < 6).Select(w => w.Length).OrderBy(w => w).ToList(); return sortedWords; }
public List<string> StringTakeCount(int n) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstNWords = words.Take(n).ToList(); return firstNWords; }
public bool OddIntAnyMatch() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool anyMatch = numbers.Where(i => i % 2 == 1).Any(n => n > 3); return anyMatch; }
public bool UnequalInts() { int[] numbersA = { 0, 2, 4, 5, 9 }; int[] numbersB = { 1, 3, 5, 6, 10 }; bool equal = numbersA.SequenceEqual(numbersB); return equal; }
public List<string> StringOrderbyCustomThenbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w,new CaseInsensitiveComparer()) .ThenBy(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyDescendingLength() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderByDescending(w => w.Length).ToList(); return sortedWords; }
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderby() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => w[0]) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w).ToList()); return wordsGroups; }
public List<Tuple<string, List<Product>>> ExpensiveProductEachCategoryMaxUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.Where(p=>p.UnitPrice>100).GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.Max(p => p.UnitPrice)) .ToList())).ToList(); return categories; }
public List<double> BigDoubleOrderbyModDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderByDescending(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<int> RepeatedIntsWithValue(int value) { List<int> numbers = Enumerable.Range(value, 10).ToList(); return numbers; }
public List<Tuple<bool, List<double>>> DoubleGroupByBoolOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<Tuple<bool, List<double>>> numbersGroups = numbers.GroupBy(n => n>5) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(w=>w).ToList())).ToList(); return numbersGroups; }
public List<string> StringOrderbyDescending() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderByDescending(w => w).ToList(); return sortedWords; }
public List<Product> ProductSkipWhile() { List<Product> products = GetProductList(); List<Product> afterProductsWhile = products.SkipWhile(p => p.ProductId > 100).ToList(); return afterProductsWhile; }
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersEachWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.SkipWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return afterOrdersEachWhile; }
public Dictionary<string, Dictionary<string, Dictionary<string, Customer>>> CustomerNestedGroupByRegionAndCountryAndName() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<string, Dictionary<string, Customer>>> customerGroups = customers.GroupBy( c => c.Region).ToDictionary(g => g.Key, g => g.GroupBy(c => c.Country).ToDictionary( g => g.Key, g => g.ToDictionary( c => c.CompanyName, c => c))); return customerGroups; }
public List<string> IntersectOfName() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productNames = products.Select(p => p.ProductName); var customerNames = customers.Select(c => c.CompanyName); List<string> sharedNames = productNames.Intersect(customerNames).ToList(); return sharedNames; }
public void ShortStringLengthEager() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Where(w => w.Length < 7).Select(w => w.Length).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public bool ProductAllMatch() { List<Product> products = GetProductList(); bool allMatch = products.All(p => p.UnitsInStock > 0); return allMatch; }
public double NumbersAggregateFindMax() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double aggregateSum = numbers.Aggregate((a, b) => Math.Max(a,b)); return aggregateSum; }
public int BigNumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n > 5).Sum(); return numbersSum; }
public Dictionary<bool, List<string>> StringGroupByLengthDictOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<bool, List<string>> wordsGroups = words.GroupBy(w => w.Length > 8) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w.Length,new CustomNumberComparer()).ToList()); return wordsGroups; }
public double BigDoubleNumbersMax() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double maxNum = numbers.Where(d => d > 5).Max(); return maxNum; }
public Dictionary<bool,int> CountExpensiveProductByInStockDict() { List<Product> products = GetProductList(); Dictionary<bool,int> inStockCounts = products.GroupBy(p => p.UnitsInStock==0) .ToDictionary(g=>g.Key,g => g.Count(p=>p.UnitPrice>100)); return inStockCounts; }
public List<int> RepeatedInts() { List<int> numbers = Enumerable.Repeat(0, 50).ToList(); return numbers; }
public Dictionary<string, Dictionary<string, Dictionary<string, Customer>>> CustomerNestedGroupByRegionAndCountryAndNamePrint() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<string, Dictionary<string, Customer>>> customerGroups = customers.GroupBy( c => c.Region).ToDictionary(g => g.Key, g => g.GroupBy(c => c.Country).ToDictionary( g => g.Key, g => g.ToDictionary( c => c.CompanyName, c => c))); foreach (var e1 in customerGroups) { Console.WriteLine(e1.Key + ":"); foreach (var e2 in e1.Value) { Console.WriteLine("\t" + e2.Key + ":"); foreach (var e3 in e2.Value) Console.WriteLine("\t\t" + e3.Key + ":" + e3.Value); } } return customerGroups; }
public List<Tuple<string, DateTime>> WaCustomerOrdersNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).SkipWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return afterOrdersWhile; }
public double BigDoubleNumbersElementAt() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double numAt = numbers.Where(d => d > 5).ElementAt(1); return numAt; }
public Dictionary<string, int> ProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Min(p => p.UnitsInStock)); return categories; }
public void BigDoubleNumbersEager() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Where(d => d > 5).Select(n => d += n).ToList(); foreach (var v in q) Console.Write(v + " " + d); }
public Dictionary<string,List<Product>> ProductGroupByCategoryDictOrderbyDescendingName() { List<Product> products = GetProductList(); Dictionary<string,List<Product>>  productsGroups = products.GroupBy(p=>p.Category) .ToDictionary(g => g.Key,g=>g.OrderByDescending(p=>p.ProductName).ToList()); return productsGroups; }
public Dictionary<string, double> CustomerExpensiveOrdersTotalMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMax = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Max(o => o.Total)); return ordersTotalMax; }
public List<string> ShortStringReverse() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).Reverse().ToList(); return sortedWords; }
public int CustomerInRegionCount(string region) { List<Customer> customers = GetCustomerList(); int count = customers.Count(c => c.Region.Equals(region)); return count; }
public List<char> UnionOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> uniqueFirstChars = productFirstChars.Union(customerFirstChars).ToList(); return uniqueFirstChars; }
public List<Tuple<string, Product>> ProductCrossGroupJoinCategories() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, Product>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2, (t, p) => Tuple.Create(t.Item1, p)).ToList(); return q; }
public List<Tuple<string, DateTime>> WaCustomerOrdersNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).TakeWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return firstOrdersWhile; }
public List<string> StringSkipWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterWordsWhile = words.SkipWhile(w => w[0] > 'b').ToList(); return afterWordsWhile; }
public Dictionary<string, int> CustomerEachCountryOrdersMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersMin = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Min(c => c.Orders.Count)); return ordersMin; }
public double StringAverageLength() { string[] words = { "cherry", "apple", "blueberry" }; double averageLength = words.Average(w => w.Length); return averageLength; }
public List<Tuple<string, int>> ProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Max(p => p.UnitsInStock))).ToList(); return categories; }
public Dictionary<int, List<Customer>>  CustomerGroupJoinRegionsWithCode() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); Dictionary<int, List<Customer>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c.ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public List<Tuple<bool, List<int>>> ProductGroupByInStockWithId() { List<Product> products = GetProductList(); List<Tuple<bool, List<int>>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductId).ToList())).ToList(); return productGroup; }
public int ProductLongNameLengthSum() { List<Product> products = GetProductList(); int totalSum = products.Select(p => p.ProductName) .Where(name => name.Length > 7).Sum(name => name.Length); return totalSum; }
public void BigNumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public List<Tuple<char, List<string>>> StringGroupByFirstCharOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(w=>w,new CaseInsensitiveComparer()).ToList())).ToList(); return wordsGroups; }
public List<string> StringOrderbyLengthThenbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length) .ThenByDescending(w=>w,new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<string> OutOfStockProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Where(p => p.UnitsInStock == 0).Select(p => p.ProductName).ToList(); return productNames; }
public int StringSumLength() { string[] words = { "cherry", "apple", "blueberry" }; int totalChars = words.Sum(w => w.Length); return totalChars; }
public bool ExpensiveProductAnyMatch() { List<Product> products = GetProductList(); bool anyMatch = products.Where(p => p.UnitPrice > 100).Any(p => p.UnitsInStock > 0); return anyMatch; }
public List<string> LongStringOrginalIndexedWhere() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> q = words.Where((w,i)=>w.Length<i*3&&w.Length>5).ToList(); return q; }
public Dictionary<string, List<string>>  CustomerGroupJoinRegionsPhone() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); Dictionary<string, List<string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c.Select(c1=>c1.Phone).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public List<Tuple<string, double>> CustomerExpensiveOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Where(o => o.Total > 100).Sum(o => o.Total))).ToList(); return ordersTotalSum; }
public int NumbersMax() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Max(); return maxNum; }
public int[] IntAddIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select((n, i) => n + i).ToArray(); return numSelected; }
public bool StringAnyMatchCount(string[] strings, char c) { bool anyMatch = strings.Any(w => w[0] > c); return anyMatch; }
public List<Tuple<string, double>> CustomerEachRegionOrdersTotalMin() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMin = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c => c.Orders).Min(o => o.Total))).ToList(); return ordersTotalMin; }
public double NumbersDoubledAggregateMultiply() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double product = numbers.Select(n => n * 2).Aggregate((a, b) => a * b); return product; }
public string[] TransformIndexHashToString() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string[] textNums = numbers.Select(n => strings[n * 97 % 10]).ToArray(); return textNums; }
public Dictionary<string, List<Product>> ExpensiveProductEachCategoryMinUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.Where(p=>p.UnitPrice>100).GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Min(p => p.UnitPrice)) .ToList()); return categories; }
public List<Tuple<bool,int>> CountExpensiveProductByInStock() { List<Product> products = GetProductList(); List<Tuple<bool,int>> inStockCounts = products.GroupBy(p => p.UnitsInStock==0) .Select(g => Tuple.Create(g.Key, g.Count(p=>p.UnitPrice>100))).ToList(); return inStockCounts; }
public int DistinctOrdersCount(string region) { List<Customer> customers = GetCustomerList(); int count = customers.SelectMany(c => c.Orders).Distinct().Count(); return count; }
public bool CustomerOrdersAnyMatch() { List<Customer> customers = GetCustomerList(); bool anyMatch = customers.SelectMany(c => c.Orders) .Any(o => o.OrderDate > new DateTime(2000, 1, 1)); return anyMatch; }
public List<int> IntSkipWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.SkipWhile(i => i > 3).ToList(); return afterNumbersWhile; }
public List<Tuple<string, string>> CustomerCrossGroupJoinRegionsName() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName) ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public List<string> StringOrderbyReverse() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderBy(w => w).Reverse().ToList(); return sortedWords; }
public List<Tuple<string,string>> CustomerRegionAndCountry() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.Region,c.Country)).ToList(); return customerProperties; }
public bool CategoryProductAllMatch() { List<Product> products = GetProductList(); bool allMatch = products.Where(p => p.Category == "Beverages").All(p => p.UnitsInStock > 0); return allMatch; }
public List<int> StringLengthSkip() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> after3Words = words.Select(w => w.Length).Skip(3).ToList(); return after3Words; }
public List<Tuple<bool, List<string>>> StringGroupByLengthOrderbyDescendingLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(w=>w.Length,new CustomNumberComparer()).ToList())).ToList(); return wordsGroups; }
public double NumbersAverage() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; double averageNum = numbers.Average(); return averageNum; }
public List<Order> CustomerOrdersSkipWhile() { List<Customer> customers = GetCustomerList(); List<Order> afterOrdersWhile = customers.SelectMany(c => c.Orders) .SkipWhile(o => o.OrderDate > new DateTime(2000, 1, 1)).ToList(); return afterOrdersWhile; }
public List<Tuple<string, List<Customer>>> CustomerEachRegionOrdersMinCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> customerOrdersMin = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.Where(c => c.Orders.Count ==g.Min(c => c.Orders.Count)).ToList())).ToList(); return customerOrdersMin; }
public List<Tuple<string, List<Product>>> ProductEachCategoryMinUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.Min(p => p.UnitPrice)) .ToList())).ToList(); return categories; }
public double ExpensiveProductStockAverage() { List<Product> products = GetProductList(); double averageUnitPrice = products.Where(p => p.UnitPrice > 100).Average(p => p.UnitsInStock); return averageUnitPrice; }
public double OddNumbersAverageTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; double averageNum = numbers.Where(n => n % 2 == 1).Average(n => n * 2); return averageNum; }
public List<string> ProductNameOrderbyDescending() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Select(p => p.ProductName).OrderByDescending(n=>n).ToList(); return sortedProducts; }
public int[] OddIntAddOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select((n, i) => n % 2 == 1 ? n + i : -1) .Where(n=>n!=-1).ToArray(); return numSelected; }
public List<int> OddIntIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Where(i => i % 2 == 1).Where((n,i)=>n<i).ToList(); return q; }
public List<int> OddIntSkip() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Where(i => i % 2 == 1).Skip(3).ToList(); return after3Numbers; }
public List<Order> WaCustomerIndexedSelectManyOrdersTake() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.Where(c=>c.Region=="WA").SelectMany((c,i)=> c.Orders.Take(i<10?5:1).ToList()).ToList(); return customerProperties; }
public List<double> DoubleFractionOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Select(n => n-(int)n).OrderByDescending(n=>n).ToList(); return sortedNumbers; }
public void NumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerNewOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Product> ProductsConvertToDescendingListAndPrintForeach() { List<Product> products = GetProductList(); List<Product> productsList = products.OrderByDescending(p => p.UnitPrice).ToList(); foreach (Product p in productsList) Console.WriteLine(p); return productsList; }
public List<int> OddIntTake() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Where(i => i % 2 == 1).Take(3).ToList(); return first3Numbers; }
public List<Tuple<string,Order>> CustomerSelectManyCustomerNewOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public List<int> StringLengthOrderbyDescending() { string[] words = { "cherry", "apple", "blueberry" }; List<int> sortedWords = words.Select(w => w.Length).OrderByDescending(w => w).ToList(); return sortedWords; }
public List<Tuple<string, List<Customer>>> CustomerEachCountryOrdersFirstOrDefaultCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> customerOrdersFirst = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Where(c => c.Orders.Count ==g.FirstOrDefault(Customer.Default).Orders.Count).ToList())).ToList(); return customerOrdersFirst; }
public List<int> IntSkipWhileIndexedCount(int[] numbers, int n) { List<int> afterNumbers = numbers.SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public List<int> StringLengthOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Select(w => w.Length).OrderByDescending(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<Tuple<string, double>> CustomerExpensiveOrdersTotalMin() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMin = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Where(o => o.Total > 100).Min(o => o.Total))).ToList(); return ordersTotalMin; }
public double ProductUnitPriceMax() { List<Product> products = GetProductList(); double maxUnitPrice = products.Max(p => p.UnitPrice); return maxUnitPrice; }
public string[] StringZipAdd() { string[] wordsA = { "Alpha", "Beta", "Gamma" }; string[] wordsB = { "red", "green", "blue" }; string[] results = wordsA.Zip(wordsB, (a, b) => a + b).ToArray(); return results; }
public List<Product> ProductOrderbyCategoryThenbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenBy(p=>p.ProductId).ToList(); return sortedProducts; }
public int NewOrdersCount(string region) { List<Customer> customers = GetCustomerList(); int count = customers.SelectMany(c => c.Orders).Count(o => o.OrderDate > new DateTime(2000, 1, 1)); return count; }
public int BigNumbersFirstOrDefault() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.FirstOrDefault(n => n > 5,0); return firstNum; }
public List<Tuple<string, double>> CustomerExpensiveOrdersTotalAverage() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalAverage = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Where(o => o.Total > 100).Average(o => o.Total))).ToList(); return ordersTotalAverage; }
public Dictionary<string, List<Order>> CustomerEachRegionOrdersTotalMinCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Order>> customerOrdersTotalMin = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g=>g.SelectMany(c => c.Orders).Where( o => o.Total == g.SelectMany(c => c.Orders).Min(o => o.Total)).ToList()); return customerOrdersTotalMin; }
public List<Tuple<char, List<string>>> StringGroupByFirstCharOrderby() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => w[0]) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w).ToList())).ToList(); return wordsGroups; }
public Dictionary<string, double> CustomerEachRegionOrdersAverageDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersAverage = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.Average(c => c.Orders.Count)); return ordersAverage; }
public Dictionary<bool, List<int>> IntGroupByBoolDict() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; Dictionary<bool, List<int>> numberGroups = numbers.GroupBy(n => n > 4) .ToDictionary(g => g.Key, g => g.ToList()); return numberGroups; }
public Dictionary<string, Dictionary<int, Dictionary<int, List<Order>>>> CustomerNestedGroupByNameAndOrderYearAndMonthPrint() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<int, Dictionary<int, List<Order>>>> customerOrderGroups = customers.ToDictionary( c => c.CompanyName, c => c.Orders.GroupBy(o => o.OrderDate.Year).ToDictionary( yg => yg.Key, yg => yg.GroupBy(o => o.OrderDate.Month).ToDictionary( mg => mg.Key, mg => mg.ToList() ) )); foreach (var e1 in customerOrderGroups) { Console.WriteLine(e1.Key + ":"); foreach (var e2 in e1.Value) { Console.WriteLine("\t" + e2.Key + ":"); foreach (var e3 in e2.Value) { Console.WriteLine("\t\t" + e3.Key + ":"); e3.Value.ForEach(o => Console.WriteLine("\t\t\t" + o)); } } } return customerOrderGroups; }
public List<Tuple<bool, List<double>>> DoubleGroupByBool() { double[] numbers = { 5.8, 4.3, 1.5, 3.7, 9.3 }; List<Tuple<bool, List<double>>> numberGroups = numbers.GroupBy(n => n > 3) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return numberGroups; }
public List<Tuple<string,int,int>> WaCustomerSelectManyCustomerNewOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Tuple<int, string>> CustomerLeftOuterJoinRegionsWithCodeName() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName).DefaultIfEmpty("No Customer"),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public bool WaCustomerOrdersNestedAllMatch() { List<Customer> customers = GetCustomerList(); bool allMatch = customers.Where(c=>c.Region=="WA").SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).All(t => t.Item2 > new DateTime(2000, 1, 1)); return allMatch; }
public List<Tuple<bool, List<double>>> DoubleGroupByBoolOrderbyDescendingFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<Tuple<bool, List<double>>> numbersGroups = numbers.GroupBy(n => n>5) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(n=>n-(int)n).ToList())).ToList(); return numbersGroups; }
public Dictionary<string, double> CustomerInRegionOrdersTotalMaxDict(string region) { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMax = customers.Where(c => c.Region.Equals(region)) .ToDictionary(c => c.CustomerId, c => c.Orders.Max(o => o.Total)); return ordersTotalMax; }
public int OddNumbersMin() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Where(n => n % 2 == 1).Min(); return minNum; }
public List<string> StringOrderbyLengthCustomThenbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()).ThenBy(w=>w,new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public Dictionary<string,int> ConvertSelectedTupleToDictionary() { object[] numbers = { Tuple.Create("Alice", "50"), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; Dictionary<string,int> strings = numbers.OfType<Tuple<string,int>>().ToDictionary( t=>t.Item1,t=>t.Item2); return strings; }
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedTake() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> first3EachOrders = customers .SelectMany(c => c.Orders.Take(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return first3EachOrders; }
public List<string> ConcatOfCategory() { string[] categories = { "Furnitures", "Seagoods" }; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> allCategories = productCategories.Concat(categories).ToList(); return allCategories; }
public Dictionary<string,List<Product>> ProductGroupByCategoryDictOrderbyName() { List<Product> products = GetProductList(); Dictionary<string,List<Product>>  productsGroups = products.GroupBy(p=>p.Category) .ToDictionary(g => g.Key,g=>g.OrderBy(p=>p.ProductName).ToList()); return productsGroups; }
public List<int> RangeOfSquareIntsStartFrom(int start,int count) { List<int> numbers = Enumerable.Range(start, count).Select(n=>n*n).ToList(); return numbers; }
public List<Tuple<string,string,string>> CustomerCityAndAddressAndPostal() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.City,c.Address,c.PostalCode)).ToList(); return customerProperties; }
public Dictionary<string, Dictionary<string, List<Customer>>> CustomerNestedGroupByRegionAndCountry() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<string, List<Customer>>> customerGroups = customers.GroupBy( c => c.Region).ToDictionary(g => g.Key, g => g.GroupBy(c => c.Country).ToDictionary( g => g.Key, g => g.ToList())); return customerGroups; }
public Dictionary<string, List<Product>> ProductGroupByCategoryDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> category = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.ToList()); return category; }
public List<Tuple<string, double>> CustomerOrdersTotalMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMax = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Max(o => o.Total))).ToList(); return ordersTotalMax; }
public void DoubleDeferred() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Select(n => d += n); foreach (var v in q) Console.Write(v + " " + d); }
public Dictionary<string, int> ExpensiveProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Where(p => p.UnitPrice > 100).Min(p => p.UnitsInStock)); return categories; }
public Dictionary<string, double> CustomerEachRegionOrdersTotalAverageDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalAverage = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(c => c.Orders).Average(o => o.Total)); return ordersTotalAverage; }
public List<Product> InStockProductTake() { List<Product> products = GetProductList(); List<Product> first3Products = products.Where(p => p.UnitsInStock > 0).Take(3).ToList(); return first3Products; }
public List<Tuple<string, int>> CustomerEachCountryOrdersMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersMax = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Max(c => c.Orders.Count))).ToList(); return ordersMax; }
public List<int> RepeatedIntsWithValueAndCount(int value,int count) { List<int> numbers = Enumerable.Range(value, count).ToList(); return numbers; }
public List<int> IntsConvertToListAndPrintForeach() { int[] ints = { 2, 3, 1, 5, 4 }; List<int> intsList = ints.OrderBy(d => d).ToList(); foreach (int i in intsList) Console.WriteLine(i); return intsList; }
public int ProjectedBigNumbersFirstOrDefault() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.Select(i => (int)Math.Pow(2, i)) .FirstOrDefault(n => n > 100,100); return firstNum; }
public List<int> StringLengthOrderby() { string[] words = { "cherry", "apple", "blueberry" }; List<int> sortedWords = words.Select(w => w.Length).OrderBy(w => w).ToList(); return sortedWords; }
public List<Product> ProductOrderbyCategoryThenbyIdCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category) .ThenBy(p=>p.ProductId,new CustomNumberComparer()).ToList(); return sortedProducts; }
public double BigDoubleNumbersAverage() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double averageNum = numbers.Where(d => d > 5).Average(); return averageNum; }
public void BigNumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public List<int> IntSquareIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Select(i => i * i).Where((n,i)=>n<i).ToList(); return q; }
public int NumbersFirst() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.First(); return firstNum; }
public int StringMaxLength() { string[] words = { "cherry", "apple", "blueberry" }; int maxLength = words.Max(w => w.Length); return maxLength; }
public List<string> ConcatOfName() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productNames = products.Select(p => p.ProductName); var customerNames = customers.Select(c => c.CompanyName); List<string> allNames = productNames.Concat(customerNames).ToList(); return allNames; }
public Dictionary<bool, List<string>> StringGroupByLengthDictOrderbyLength() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<bool, List<string>> wordsGroups = words.GroupBy(w => w.Length > 8) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w.Length).ToList()); return wordsGroups; }
public List<Tuple<string, DateTime>> CustomerOrdersNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersWhile = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).SkipWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return afterOrdersWhile; }
public int[] OddIntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select(n => n * 2).ToArray(); return numSelected; }
public List<string> ConvertSelectedStringItemToList() { object[] numbers = { null, 1.0, "two", 3, "four", 5, "six", 7.0 }; List<string> strings = numbers.OfType<string>().ToList(); return strings; }
public Dictionary<string, List<Customer>> CustomerGroupByRegionDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> catagory = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.ToList()); return catagory; }
public List<Product> ExpensiveProductTake() { List<Product> products = GetProductList(); List<Product> first3Products = products.Where(p => p.UnitPrice > 100).Take(3).ToList(); return first3Products; }
public Dictionary<double, List<double>> DoubleGroupByModDict() { double[] numbers = { 5.8, 4.3, 1.5, 3.7, 9.3 }; Dictionary<double, List<double>> numberGroups = numbers.GroupBy(n => n % 1.5) .ToDictionary(g => g.Key, g => g.ToList()); return numberGroups; }
public List<Tuple<string, DateTime>> WaCustomerOrdersNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3WAOrders = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Skip(3).ToList(); return after3WAOrders; }
public bool StringAllMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool allMatch = words.All(n => string.CompareOrdinal(n, "b") > 0); return allMatch; }
public List<double> DoubleOrderbyFractionThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public Dictionary<bool, List<string>> StringGroupByLengthDictOrderbyDescendingLength() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<bool, List<string>> wordsGroups = words.GroupBy(w => w.Length > 8) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w.Length).ToList()); return wordsGroups; }
public Dictionary<string, double> CustomerEachRegionOrdersTotalMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMin = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(c => c.Orders).Min(o => o.Total)); return ordersTotalMin; }
public Dictionary<int, List<int>> IntGroupByModDict() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; Dictionary<int, List<int>> numberGroups = numbers.GroupBy(n => n % 5) .ToDictionary(g => g.Key, g => g.ToList()); return numberGroups; }
public List<Tuple<string, List<Order>>> CustomerEachRegionOrdersTotalMinCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Order>>> customerOrdersTotalMin = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c=>c.Orders).Where( o=>o.Total == g.SelectMany(c=>c.Orders).Min(o => o.Total)).ToList())).ToList(); return customerOrdersTotalMin; }
public Dictionary<string, List<Product>> ProductGroupTakeWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> firstGroupsWhile = products.GroupBy(p => p.Category) .TakeWhile(g => g.Key.Length > 6).ToDictionary(g => g.Key, g => g.ToList()); return firstGroupsWhile; }
public List<Product> ProductOrderbyCategoryThenbyDescendingIdCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category) .ThenByDescending(p=>p.ProductId,new CustomNumberComparer()).ToList(); return sortedProducts; }
public List<string> StringOrderbyDescendingLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderByDescending(w => w.Length, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<int> IntSquareTakeWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.Select(i => i * i).TakeWhile(i => i > 3).ToList(); return firstNumbersWhile; }
public List<string> StringSkipCount(int n) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterNWords = words.Skip(n).ToList(); return afterNWords; }
public List<Tuple<string, DateTime>> WaCustomerOrdersNestedTake() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> first3WAOrders = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Take(3).ToList(); return first3WAOrders; }
public List<string> LongStringTake() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> first3Words = words.Where(w => w.Length > 5).Take(3).ToList(); return first3Words; }
public List<Tuple<string, int>> CustomerNewOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> orderCounts = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Count( o => o.OrderDate > new DateTime(2000, 1, 1)))).ToList(); return orderCounts; }
public double DoubleAverage() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double averageNum = numbers.Average(); return averageNum; }
public List<string> StringOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<double> BigDoubleOrderbyFractionDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderByDescending(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<Product> ExpensiveProductOrderbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.ProductName).ToList(); return sortedProducts; }
public List<char> ExceptOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> differentFirstChars = productFirstChars.Except(customerFirstChars).ToList(); return differentFirstChars; }
public List<double> DoubleReverse() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Reverse().ToList(); return sortedNumbers; }
public List<Tuple<string,Order>> CustomerIdAndFirstOrder() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders.First())).ToList(); return customerProperties; }
public List<Tuple<string, List<Customer>>> CustomerEachCountryOrdersMaxCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> customerOrdersMax = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Where(c => c.Orders.Count ==g.Max(c => c.Orders.Count)).ToList())).ToList(); return customerOrdersMax; }
public List<char> IntersectOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> sharedFirstChars = productFirstChars.Intersect(customerFirstChars).ToList(); return sharedFirstChars; }
public double DoubleMax() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double maxNum = numbers.Max(); return maxNum; }
public List<Tuple<string,int>> CustomerIdAndOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders.Count)).ToList(); return customerProperties; }
public List<Order> RepeatedOrders() { List<Order> orders = Enumerable.Repeat(Order.Default, 10).ToList(); return orders; }
public bool IntAnyMatch() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool anyMatch = numbers.Any(n => n > 3); return anyMatch; }
public Product ExpensiveProductElementAt() { List<Product> products = GetProductList(); Product expensiveProduct = products.Where(p=>p.UnitPrice>100).ElementAt(2); return expensiveProduct; }
public List<Tuple<String,int>> CountDistinctProductByCategory() { List<Product> products = GetProductList(); List<Tuple<String,int>> categoryCounts = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Distinct().Count())).ToList(); return categoryCounts; }
public List<Tuple<string, int>> ExpensiveProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice > 100) .Max(p => p.UnitsInStock))).ToList(); return categories; }
public List<int> RangeOfIntsWithStartAndCount(int start,int count) { List<int> numbers = Enumerable.Range(start, count).ToList(); return numbers; }
public List<string> ShortStringOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w.Length, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<double> DoublesConvertToDescendingList() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; List<double> doublesList = doubles.OrderByDescending(d => d).ToList(); return doublesList; }
public List<Tuple<char, List<string>>> StringGroupByFirstChar() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => w[0]) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return wordsGroups; }
public double NumbersAggregateMultiplyWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 1.6; double product = numbers.Aggregate(seed, (a, b) => a * b); return product; }
public List<int> StringLengthTakeWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> firstWordsWhile = words.Select(w => w.Length).TakeWhile(n => n > 5).ToList(); return firstWordsWhile; }
public string StringFirstStartWith(char c) { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithChar = strings.First(s => s[0] == c); return startWithChar; }
public List<Tuple<string, List<Order>>> CustomerEachRegionOrdersTotalMaxCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Order>>> customerOrdersTotalMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c=>c.Orders).Where( o=>o.Total == g.SelectMany(c=>c.Orders).Max(o => o.Total)).ToList())).ToList(); return customerOrdersTotalMax; }
public Dictionary<string, int> CustomerEachRegionOrdersMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.Max(c => c.Orders.Count)); return ordersMax; }
public int[] StringProjectionZipAddInt() { string[] wordsA = { "Alpha", "Beta", "Gamma" }; string[] wordsB = { "red", "green", "blue" }; int[] results = wordsA.Select(w => w.Length) .Zip(wordsB.Select(w => w.Length), (a, b) => a + b).ToArray(); return results; }
public double BigDoubleNumbersMin() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double minNum = numbers.Where(d => d > 5).Min(); return minNum; }
public void DoubleEager() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Select(n => d += n).ToList(); foreach (var v in q) Console.Write(v + " " + d); }
public List<double> IntSqrtSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<double> afterNumbers = numbers.Select(i => Math.Sqrt(i)).SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public List<Tuple<string, string>> CustomerCrossJoinRegionsName() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.Join(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c.CompanyName)).ToList(); return q; }
public bool IntAllMatchInput(int i) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool allMatch = numbers.All(n => n > i); return allMatch; }
public List<string> ConvertSelectedStringItemToListAndPrintForeach() { object[] numbers = { null, 1.0, "two", 3, "four", 5, "six", 7.0 }; List<string> strings = numbers.OfType<string>().ToList(); foreach (string s in strings) Console.WriteLine(s); return strings; }
public List<string> ExpensiveProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Where(p => p.UnitPrice > 100).Select(p => p.ProductName).ToList(); return productNames; }
public List<Tuple<string, double>> CustomerEachRegionOrdersAverage() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersAverage = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.Average(c => c.Orders.Count))).ToList(); return ordersAverage; }
public List<Tuple<int,int>> UniqueFactorOf300CountByOddEven() { int[] factorsOf300= {2, 2, 3, 5, 5 }; List<Tuple<int,int>>  uniqueFactorsCount = factorsOf300.GroupBy(n=>n%2).Select( g=>Tuple.Create(g.Key,g.Distinct().Count())).ToList(); return uniqueFactorsCount; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyIdCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category) .ThenBy(p=>p.ProductId,new CustomNumberComparer()).ToList(); return sortedProducts; }
public List<Order> CustomerOrdersSkip() { List<Customer> customers = GetCustomerList(); List<Order> after3Orders = customers.SelectMany(c => c.Orders) .Skip(3).ToList(); return after3Orders; }
public bool IntAllMatch() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool allMatch = numbers.All(n => n > 3); return allMatch; }
public List<string> StringOrderbyThenbyLength() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w).ThenBy(w=>w.Length).ToList(); return sortedWords; }
public List<Order> CustomerIndexedSelectManyOrdersTake() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany((c,i)=> c.Orders.Take(i<10?5:1).ToList()).ToList(); return customerProperties; }
public int[] OddNumbersCount(int[][] numbers) { int[] oddNumbersCount = numbers.Select( a => a.Count(n => n % 2 == 1)).ToArray(); return oddNumbersCount; }
public int ProductNameWithFirstLetterCount() { List<Product> products = GetProductList(); int count = products.Select(p => p.ProductName).Count(c => c.StartsWith('c')); return count; }
public List<string> ShortStringOrderbyDescending() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderByDescending(w => w).ToList(); return sortedWords; }
public List<string> StringOrderbyLengthThenby() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w.Length).ThenBy(w=>w).ToList(); return sortedWords; }
public double[] ProductsConvertToUnitPriceArray() { List<Product> products = GetProductList(); double[] pricesArray = products.Select(p => p.UnitPrice).OrderBy(d => d).ToArray(); return pricesArray; }
public bool IntSquareAnyMatch() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool anyMatch = numbers.Select(i => i * i).Any(n => n > 3); return anyMatch; }
public Tuple<int, int>[] SelectManyJoin() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB, (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public bool EqualStringLengths() { List<string> wordsA = new List<string> { "Alpha", "Beta", "Gamma" }; List<string> wordsB = new List<string> { "Gamma", "Beta", "Alpha" }; bool equal = wordsA.Select(w => w.Length).SequenceEqual(wordsB.Select(w => w.Length)); return equal; }
public string[] StringZipAddInt() { string[] words = { "Alpha", "Beta", "Gamma" }; int[] numbers = { 1, 2, 3 }; string[] results = words.Zip(numbers, (a, b) => a + b).ToArray(); return results; }
public List<Tuple<string, int>> CustomerEachRegionOrdersSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersTotalSum = customers.GroupBy(c => c.Region) .Select(g=>Tuple.Create(g.Key, g.Sum(c=>c.Orders.Count))).ToList(); return ordersTotalSum; }
public Dictionary<string, double> CustomerOrdersTotalAverageDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalAverage = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Average(o => o.Total)); return ordersTotalAverage; }
public List<Tuple<bool, List<string>>> StringGroupByLengthOrderbyLength() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w.Length).ToList())).ToList(); return wordsGroups; }
public int ProductLongCategoryCount() { List<Product> products = GetProductList(); int count = products.Select(p => p.Category).Count(c => c.Length > 8); return count; }
public double ProductUnitPriceAverage() { List<Product> products = GetProductList(); double averageUnitPrice = products.Average(p => p.UnitPrice); return averageUnitPrice; }
public int ExpensiveProductStockTotalSum() { List<Product> products = GetProductList(); int totalSum = products.Where(p => p.UnitPrice > 100).Sum(p => p.UnitsInStock); return totalSum; }
public int[] IntIntersect() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] sharedNumbers = numbersA.Intersect(numbersB).ToArray(); return sharedNumbers; }
public List<string> StringSkipWhileCount(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterWordsWhile = words.SkipWhile(w => w[0] > c).ToList(); return afterWordsWhile; }
public bool StringAllMatchCount(string[] strings, char c) { bool allMatch = strings.All(w => w[0] > c); return allMatch; }
public Tuple<int, int>[] SelectManyJoinOdd() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => b % 2 == 1), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public List<double> DoubleOrderbyModDescendingThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<int> IntSkipCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Skip(n).ToList(); return after3Numbers; }
public Dictionary<string, List<Customer>>  CustomerGroupJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c.ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public List<Tuple<string, List<double>>> ProductGroupUnitPrice() { List<Product> products = GetProductList(); List<Tuple<string, List<double>>> productNames = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Select(p => p.UnitPrice).ToList())) .ToList(); return productNames; }
public Dictionary<string,List<Product>> ProductGroupByCategoryDictOrderbyId() { List<Product> products = GetProductList(); Dictionary<string,List<Product>>  productsGroups = products.GroupBy(p=>p.Category) .ToDictionary(g => g.Key,g=>g.OrderBy(p=>p.ProductId).ToList()); return productsGroups; }
public Dictionary<string, Order> CustomerEachRegionFirstOrDefaultOrderDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, Order> ordersMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(p => p.Orders).FirstOrDefault(Order.Default)); return ordersMax; }
public List<double> BigDoubleOrderbyFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).OrderBy(n => n-(int)n).ToList(); return sortedNumbers; }
public void BigNumbersDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public List<Tuple<string, double>> ProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, double>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Average(p => p.UnitsInStock))).ToList(); return categories; }
public Dictionary<string, int> ProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Max(p => p.UnitsInStock)); return categories; }
public List<int> IntTakeWhileCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.TakeWhile(i => i > n).ToList(); return firstNumbersWhile; }
public List<Tuple<bool, List<string>>> StringGroupByLengthOrderbyDescendingLength() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(w=>w.Length).ToList())).ToList(); return wordsGroups; }
public List<Tuple<string,List<Product>>> ProductGroupByCategoryOrderbyName() { List<Product> products = GetProductList(); List<Tuple<string,List<Product>>> productsGroups = products.GroupBy(p=>p.Category) .Select(g => Tuple.Create(g.Key,g.OrderBy(p=>p.ProductName).ToList())).ToList(); return productsGroups; }
public List<Tuple<string, List<Customer>>> CustomerEachRegionOrdersMaxCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> customerOrdersMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.Where(c => c.Orders.Count ==g.Max(c => c.Orders.Count)).ToList())).ToList(); return customerOrdersMax; }
public List<Product> ProductOrderbyCategoryThenbyNameCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category) .ThenBy(p=>p.ProductName,new CaseInsensitiveComparer()).ToList(); return sortedProducts; }
public List<Tuple<string, double>> CustomerEachRegionOrdersTotalAverage() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalAverage = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c => c.Orders).Average(o => o.Total))).ToList(); return ordersTotalAverage; }
public List<Tuple<string, List<Product>>> ProductGroupByCategory() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> category = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return category; }
public List<int> ShortStringLengthOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Where(w => w.Length < 6).Select(w => w.Length).OrderBy(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<string> ShortStringOrderbyLengthReverse() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w.Length).Reverse().ToList(); return sortedWords; }
public double ProductLongNameLengthAverage() { List<Product> products = GetProductList(); double averageUnitPrice = products.Select(p => p.ProductName) .Where(name => name.Length > 7).Average(name => name.Length); return averageUnitPrice; }
public List<double> DoubleOrderbyReverse() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n=>n).Reverse().ToList(); return sortedNumbers; }
public List<Tuple<bool, List<Product>>> ProductGroupByPrice() { List<Product> products = GetProductList(); List<Tuple<bool, List<Product>>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return productGroup; }
public int DistinctProductLongCategoryCount() { List<Product> products = GetProductList(); int count = products.Select(p => p.Category).Distinct().Count(c => c.Length > 8); return count; }
public List<int> RangeOfSquareIntsStartFrom() { List<int> numbers = Enumerable.Range(100, 20).Select(n=>n*n).ToList(); return numbers; }
public List<bool> WaCustomerOrdersEachNestedAnyMatch() { List<Customer> customers = GetCustomerList(); List<bool> anyMatch = customers.Where(c=>c.Region=="WA").Select(c => c.Orders.Any(o => o.OrderDate > new DateTime(2000, 1, 1))).ToList(); return anyMatch; }
public Dictionary<string,int> CountRegionExpensiveOrdersDict() { List<Customer> customers = GetCustomerList(); Dictionary<string,int> regionCounts = customers.GroupBy(c=>c.Region) .ToDictionary(g => g.Key, g=> g.SelectMany(c=>c.Orders).Count(o=>o.Total>100)); return regionCounts; }
public int ExpensiveProductCount() { List<Product> products = GetProductList(); int count = products.Count(p => p.UnitPrice > 100); return count; }
public int ExpensiveProductStockMax() { List<Product> products = GetProductList(); int maxUnitPrice = products.Where(p => p.UnitPrice > 100).Max(p => p.UnitsInStock); return maxUnitPrice; }
public List<string> ShortStringOrderbyDescendingLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderByDescending(w => w.Length, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<Tuple<string,List<Product>>> ProductGroupByCategoryOrderbyDescendingId() { List<Product> products = GetProductList(); List<Tuple<string,List<Product>>> productsGroups = products.GroupBy(p=>p.Category) .Select(g => Tuple.Create(g.Key,g.OrderByDescending(p=>p.ProductId).ToList())).ToList(); return productsGroups; }
public Dictionary<bool, List<double>> DoubleGroupByBoolDict() { double[] numbers = { 5.8, 4.3, 1.5, 3.7, 9.3 }; Dictionary<bool, List<double>> numberGroups = numbers.GroupBy(n => n > 3) .ToDictionary(g => g.Key, g => g.ToList()); return numberGroups; }
public List<Tuple<string, string>> CustomerLeftOuterJoinRegionsPhone() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.Phone).DefaultIfEmpty("No phone") ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public void ShortStringLengthDeferred() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Where(w => w.Length < 7).Select(w => w.Length).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public List<string> UnionOfRegion() { string[] regions = {"WA", "AF","RO"}; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> uniqueRegions = customerRegions.Union(regions).ToList(); return uniqueRegions; }
public int[] IntConcat() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] allNumbers = numbersA.Concat(numbersB).ToArray(); return allNumbers; }
public List<Tuple<string, int>> ExpensiveProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p=>p.UnitPrice>100) .Sum(p => p.UnitsInStock))).ToList(); return categories; }
public Dictionary<string, double> ProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, double> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Average(p => p.UnitsInStock)); return categories; }
public List<Tuple<int, List<int>>> IntGroupByMod() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<Tuple<int, List<int>>> numberGroups = numbers.GroupBy(n => n % 5) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return numberGroups; }
public Dictionary<string, double> CustomerInRegionOrdersTotalMinDict(string region) { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMin = customers.Where(c => c.Region.Equals(region)) .ToDictionary(c => c.CustomerId, c => c.Orders.Min(o => o.Total)); return ordersTotalMin; }
public double ProductUnitPriceAggregateAverage() { List<Product> products = GetProductList(); double aggregateSum = products.Select(p => p.UnitPrice).Aggregate((a, b) => (a + b) / 2); return aggregateSum; }
public List<string> ExceptOfRegion() { string[] regions = {"WA", "AF","RO"}; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> differentRegions = customerRegions.Except(regions).ToList(); return differentRegions; }
public List<string> ExceptOfName() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productNames = products.Select(p => p.ProductName); var customerNames = customers.Select(c => c.CompanyName); List<string> differentNames = productNames.Except(customerNames).ToList(); return differentNames; }
public List<string> StringTakeWhileCount(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstWordsWhile = words.TakeWhile(w => w[0] > c).ToList(); return firstWordsWhile; }
public double[] ProjectionDoubleUnion() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n-(int)n); var second = numbersB.Select(n => n-(int)n); double[] numbers = first.Union(second).ToArray(); return numbers; }
public Dictionary<double, double> ConvertArrayToDictionaryAndPrint() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; Dictionary<double, double> doublesDict = doubles.ToDictionary(sr => sr, sr => sr * 2); foreach (var pair in doublesDict) Console.WriteLine(pair.Key + " " + pair.Value); return doublesDict; }
public List<string> StringSkip() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterNNumbers = words.Skip(3).ToList(); return afterNNumbers; }
public double NumbersAggregateSqrt() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double aggregateSum = numbers.Aggregate((a, b) => Math.Sqrt(a * b)); return aggregateSum; }
public int ProductLongNameLengthMin() { List<Product> products = GetProductList(); int minUnitPrice = products.Select(p => p.ProductName) .Where(name => name.Length > 7).Min(name => name.Length); return minUnitPrice; }
public void OddNumbersDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public List<string> StringOrderbyLengthCustomThenbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()). ThenByDescending(w=>w,new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public int IntAddMultiply() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int product = numbersA.Zip(numbersB, (a, b) => a + b).Aggregate((a, b) => a * b); return product; }
public double OddNumbersAverage() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; double averageNum = numbers.Where(n => n % 2 == 1).Average(); return averageNum; }
public List<int> OddIntSkipWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.Where(i => i % 2 == 1).SkipWhile(i => i > 3).ToList(); return afterNumbersWhile; }
public List<Tuple<string, double>>  ProductLeftOuterJoinCategoriesUnitPrice() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, double>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2.Select(p=>p.UnitPrice).DefaultIfEmpty(0), (t, n) => Tuple.Create(t.Item1, n)).ToList(); return q; }
public List<string> StringOrderbyCustomThenbyLength() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w,new CaseInsensitiveComparer()) .ThenBy(w=>w.Length).ToList(); return sortedWords; }
public List<Product> ProductOrderbyCategoryThenbyDescendingNameCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category) .ThenByDescending(p=>p.ProductName,new CaseInsensitiveComparer()).ToList(); return sortedProducts; }
public List<Tuple<string,string,string>> CustomerRegionAndCountryAndCity() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.Region,c.Country,c.City)).ToList(); return customerProperties; }
public char[] ProjectionStringIntersect() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; var first = wordsA.Select(n => n[0]); var second = wordsB.Select(n => n[0]); char[] words = first.Intersect(second).ToArray(); return words; }
public int[] IndexedSelectManyBig() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] pairs = numbersA.SelectMany((a,i) => numbersB.Where(b=>b<a+i)).ToArray(); return pairs; }
public Dictionary<bool, List<string>> StringGroupByLengthDictOrderbyDescendingLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<bool, List<string>> wordsGroups = words.GroupBy(w => w.Length > 8) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w.Length,new CustomNumberComparer()).ToList()); return wordsGroups; }
public Dictionary<int,int> UniqueFactorOf300CountByOddEvenDict() { int[] factorsOf300= {2, 2, 3, 5, 5 }; Dictionary<int,int> uniqueFactorsCount = factorsOf300.GroupBy(n => n % 2).ToDictionary( g => g.Key, g => g.Distinct().Count()); return uniqueFactorsCount; }
public List<double> DoubleOrderbyFractionReverse() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n-(int)n).Reverse().ToList(); return sortedNumbers; }
public List<Tuple<string,int,double>> WaCustomerSelectManyCustomerNewOrderIdAndDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<Product> ProductTake() { List<Product> products = GetProductList(); List<Product> first3Products = products.Take(3).ToList(); return first3Products; }
public Dictionary<string, double> ProductsConvertFieldsToDictionary() { List<Product> products = GetProductList(); Dictionary<string, double> productsUnitPrice = products.ToDictionary( p => p.ProductName, p => p.UnitPrice); return productsUnitPrice; }
public void NumbersDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void NumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public List<int> OddIntTakeWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.Where(i => i % 2 == 1).TakeWhile(i => i > 3).ToList(); return firstNumbersWhile; }
public int[] ProjectionIntExcept() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; var first = numbersA.Select(n => n+1); var second = numbersB.Select(n => n-1); int[] numbers = first.Except(second).ToArray(); return numbers; }
public List<double> DoubleOrderbyModDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<Product> ProductsConvertToDescendingListAndPrint() { List<Product> products = GetProductList(); List<Product> productsList = products.OrderByDescending(p => p.UnitPrice).ToList(); for (int i = 0; i < productsList.Count; i++) Console.WriteLine(productsList[i]); return productsList; }
public int BigNumbersFirst() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.First(n => n > 5); return firstNum; }
public List<int> RangeOfInts() { List<int> numbers = Enumerable.Range(0, 50).ToList(); return numbers; }
public List<Tuple<bool, List<string>>> StringGroupByLength() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return wordsGroups; }
public string StringFirstLong() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startsWithO = strings.First(s => s.Length > 4); return startsWithO; }
public int NumbersElementAt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numAt = numbers.ElementAt(1); return numAt; }
public int[] ProjectionIntIntersect() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; var first = numbersA.Select(n => n+1); var second = numbersB.Select(n => n-1); int[] numbers = first.Intersect(second).ToArray(); return numbers; }
public List<Product> InStockProductSkip() { List<Product> products = GetProductList(); List<Product> after3Products = products.Where(p => p.UnitsInStock > 0).Skip(3).ToList(); return after3Products; }
public Tuple<string, string>[] SelectByCase() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; Tuple<string, string>[] upperLowerWords = words.Select(w => Tuple.Create(w.ToUpper(), w.ToLower())).ToArray(); return upperLowerWords; }
public Dictionary<bool, List<int>> ProductGroupByPriceWithIdDict() { List<Product> products = GetProductList(); Dictionary<bool, List<int>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); return productGroup; }
public List<Tuple<string, DateTime>> CustomerOrdersNestedTake() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> first3Orders = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Take(3).ToList(); return first3Orders; }
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedTake() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> first3EachWAOrders = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.Take(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return first3EachWAOrders; }
public List<int> RangeOfIntsStartFrom() { List<int> numbers = Enumerable.Range(100, 50).ToList(); return numbers; }
public List<double> DoublesConvertToListAndPrint() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; List<double> doublesList = doubles.OrderBy(d => d).ToList(); for (int i = 0; i < doublesList.Count; i++) Console.WriteLine(doublesList[i]); return doublesList; }
public bool[] OddIntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Where(n => n % 2 == 1).Select((n, i) => n == i).ToArray(); return numSelected; }
public List<int> IntSkipWhileCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.SkipWhile(i => i > n).ToList(); return afterNumbersWhile; }
public List<int> StringLengthSkipWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> afterWordsWhile = words.Select(w => w.Length).SkipWhile(n => n > 5).ToList(); return afterWordsWhile; }
public double NumbersAggregateFindMinWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 3; double aggregateSum = numbers.Aggregate(seed, (a, b) => Math.Min(a,b)); return aggregateSum; }
public bool OddIntAllMatch() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool allMatch = numbers.Where(i => i % 2 == 1).All(n => n > 3); return allMatch; }
public int[] IndexedSelectMany() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] pairs = numbersA.SelectMany((a,i) => numbersB.Select( b=>i%2==0?a:b)).ToArray(); return pairs; }
public List<string> IntersectOfRegion() { string[] regions = {"WA", "AF","RO"}; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> sharedRegions = customerRegions.Intersect(regions).ToList(); return sharedRegions; }
public string[] SelectByEvenOddConcat() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string[] evenOddWords = numbers.Select(n => strings[n] + (n % 2 == 0 ? " even" : " odd")).ToArray(); return evenOddWords; }
public Dictionary<double, double> ConvertArrayToDictionaryWithDistinct() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 1.7, 2.9 }; Dictionary<double, double> doublesDict = doubles.Distinct().ToDictionary(sr => sr, sr => sr * 2); return doublesDict; }
public Dictionary<double, double> ConvertArrayToDictionary() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; Dictionary<double, double> doublesDict = doubles.ToDictionary(sr => sr, sr => sr * 2); return doublesDict; }
public List<double> BigDoubleOrderbyFractionThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }
public Dictionary<string, double> ExpensiveProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, double> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Where(p => p.UnitPrice > 100).Average(p => p.UnitsInStock)); return categories; }
public List<int> IntTakeWhileCount(int[] numbers, int n) { List<int> firstNumbersWhile = numbers.TakeWhile(i => i > n).ToList(); return firstNumbersWhile; }
public char[] ProjectionStringUnion() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; var first = wordsA.Select(n => n[0]); var second = wordsB.Select(n => n[0]); char[] words = first.Union(second).ToArray(); return words; }
public List<Tuple<string,DateTime>> WaCustomerSelectManyCustomerNewOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public double[] DoublesConvertToArrayAndPrint() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double[] doublesArray = doubles.OrderBy(d => d).ToArray(); for (int i = 0; i < doublesArray.Length; i++) Console.WriteLine(doublesArray[i]); return doublesArray; }
public List<int> IntSquareTakeWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbers = numbers.Select(i => i * i).TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
public string[] StringUnion() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; string[] uniqueWords = wordsA.Union(wordsB).ToArray(); return uniqueWords; }
public Tuple<int, int>[] SelectManyJoinBig() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => b > 5), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public List<Tuple<string, List<Product>>> ProductEachCategoryFirstUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.First().UnitPrice) .ToList())).ToList(); return categories; }
public List<double> DoublesConvertToDescendingListAndPrintForeach() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; List<double> doublesList = doubles.OrderByDescending(d => d).ToList(); foreach (double d in doublesList) Console.WriteLine(d); return doublesList; }
public bool IntAllMatchInput(int[] numbers, int i) { bool allMatch = numbers.All(n => n > i); return allMatch; }
public Dictionary<string, List<Product>> ProductGroupJoinCategories() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); Dictionary<string, List<Product>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p.ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public int CustomerDistinctRegionsCount() { List<Customer> customers = GetCustomerList(); int count = customers.Select(c => c.Region).Distinct().Count(); return count; }
public List<Tuple<string, int>> CustomerEachCountryOrdersSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersTotalSum = customers.GroupBy(c => c.Country) .Select(g=>Tuple.Create(g.Key, g.Sum(c=>c.Orders.Count))).ToList(); return ordersTotalSum; }
public List<bool> CustomerOrdersEachNestedAllMatch() { List<Customer> customers = GetCustomerList(); List<bool> allMatch = customers.Select(c => c.Orders.All(o => o.OrderDate > new DateTime(2000, 1, 1))).ToList(); return allMatch; }
public  Dictionary<int, List<string>> CustomerGroupJoinRegionsWithCodeName() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); Dictionary<int, List<string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c.Select(c=>c.CompanyName).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
public List<string> ProductNameOrderby() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Select(p => p.ProductName).OrderBy(n=>n).ToList(); return sortedProducts; }
public List<int> RepeatedIntsWithCount(int count) { List<int> numbers = Enumerable.Repeat(0, count).ToList(); return numbers; }
public bool CustomerOrdersAllMatch() { List<Customer> customers = GetCustomerList(); bool allMatch = customers.SelectMany(c => c.Orders) .All(o => o.OrderDate > new DateTime(2000, 1, 1)); return allMatch; }
public double[] ConvertSelectedDoubleItemToArray() { object[] numbers = { null, 1.0, "two", 3, "four", 5, "six", 7.0 }; double[] doubles = numbers.OfType<double>().ToArray(); return doubles; }
public Dictionary<string, List<int>> ProductGroupByCategoryWithIdDict() { List<Product> products = GetProductList(); Dictionary<string, List<int>> category = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); return category; }
public List<Tuple<string,string>> CustomerCityAndAddress() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.City,c.Address)).ToList(); return customerProperties; }
public List<double> DoubleFractionReverse() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Select(n => n-(int)n).Reverse().ToList(); return sortedNumbers; }
public List<int> IntSkipCount(int[] numbers, int n) { List<int> afterNNumbers = numbers.Skip(n).ToList(); return afterNNumbers; }
public Dictionary<string, double> CustomerEachRegionOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.GroupBy(c => c.Region) .ToDictionary(g=>g.Key, g=>g.SelectMany(c=>c.Orders).Sum(o => o.Total)); return ordersTotalSum; }
public double NumbersAggregateFindMaxWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 5; double aggregateSum = numbers.Aggregate(seed, (a, b) => Math.Max(a,b)); return aggregateSum; }
public List<double> DoubleFractionOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Select(n => n-(int)n).OrderBy(n=>n).ToList(); return sortedNumbers; }
public List<string> ProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Select(p => p.ProductName).ToList(); return productNames; }
public Product ProductFirst() { List<Product> products = GetProductList(); Product product12 = products.First(p => p.ProductId == 12); return product12; }
public bool IntAnyMatchInput(int[] numbers, int i) { bool anyMatch = numbers.Any(n => n > i); return anyMatch; }
public List<Order> CustomerOrdersTake() { List<Customer> customers = GetCustomerList(); List<Order> first3Orders = customers.SelectMany(c => c.Orders) .Take(3).ToList(); return first3Orders; }
public int StringMinLength() { string[] words = { "cherry", "apple", "blueberry" }; int minLength = words.Min(w => w.Length); return minLength; }
public int OddNumbersElementAt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numAt = numbers.Where(n => n % 2 == 1).ElementAt(3); return numAt; }
public List<double> ProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Select(p => p.UnitPrice).ToList(); return productNames; }
public int UniqueOddFactorOf300Count() { int[] factorsOf300 = { 2, 2, 3, 5, 5 }; int uniqueFactorsCount = factorsOf300.Distinct().Count(n => n % 2 == 1); return uniqueFactorsCount; }
public List<int> IntTakeCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Take(n).ToList(); return first3Numbers; }
public bool UnequalDoubles() { double[] numbersA = { 0.5, 2.3, 4.7, 5.4, 9.8 }; double[] numbersB = { 6.5, 1.3, 8.7, 2.4, 4.8 }; bool equal = numbersA.SequenceEqual(numbersB); return equal; }
public List<Product> ExpensiveProductIndexedWhere() { List<Product> products = GetProductList(); List<Product> q = products.Where((w,i)=>w.UnitPrice>100&&i%2==1).ToList(); return q; }
public List<Tuple<string, Order>> CustomerEachRegionFirstOrDefaultOrder() { List<Customer> customers = GetCustomerList(); List<Tuple<string, Order>> ordersMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(p => p.Orders).FirstOrDefault(Order.Default))).ToList(); return ordersMax; }
public string StringFirstOrDefaultStartWithO() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithO = strings.FirstOrDefault(s => s[0] == 'o',"none"); return startWithO; }
public List<double> ProductsConvertToUnitPriceList() { List<Product> products = GetProductList(); List<double> pricesList = products.Select(p => p.UnitPrice).OrderBy(d => d).ToList(); return pricesList; }
public List<Tuple<Tuple<string, int>, Customer>>  CustomerCrossGroupJoinRegionsWithCodeRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<Tuple<string, int>, Customer>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public bool StringLengthAllMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool allMatch = words.Select(w => w.Length).All(n => n > 5); return allMatch; }
public List<Tuple<string,List<Product>>> ProductGroupByCategoryOrderbyDescendingName() { List<Product> products = GetProductList(); List<Tuple<string,List<Product>>> productsGroups = products.GroupBy(p=>p.Category) .Select(g => Tuple.Create(g.Key,g.OrderByDescending(p=>p.ProductName).ToList())).ToList(); return productsGroups; }
public List<Tuple<string, Product>> ProductEachCategoryFirstOrDefault() { List<Product> products = GetProductList(); List<Tuple<string, Product>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.FirstOrDefault(Product.Default))).ToList(); return categories; }
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3EachWAOrders = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.Skip(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return after3EachWAOrders; }
public Dictionary<string, List<Product>> ProductGroupTake() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> first3Groups = products.GroupBy(p => p.Category) .Take(3).ToDictionary(g => g.Key, g => g.ToList()); return first3Groups; }
public Dictionary<string, Product> ProductEachCategoryFirstOrDefaultDict() { List<Product> products = GetProductList(); Dictionary<string, Product> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.FirstOrDefault(Product.Default)); return categories; }
public List<double> BigDoubleOrderbyFractionThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerBigOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<string> ConvertSelectedStringItemToListAndPrint() { object[] numbers = { null, 1.0, "two", 3, "four", 5, "six", 7.0 }; List<string> strings = numbers.OfType<string>().ToList(); for (int i = 0; i < strings.Count; i++) Console.WriteLine(strings[i]); return strings; }
public Dictionary<string, double> CustomerInRegionOrdersTotalAverageDict(string region) { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalAverage = customers.Where(c => c.Region.Equals(region)) .ToDictionary(c => c.CustomerId, c => c.Orders.Average(o => o.Total)); return ordersTotalAverage; }
public int NumbersMaxTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Max(n => n * 2); return maxNum; }
public Dictionary<bool, List<double>> DoubleGroupByBoolDictOrderbyDescendingFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; Dictionary<bool, List<double>>  numbersGroups = numbers.GroupBy(n => n>5) .ToDictionary(g => g.Key, g => g.OrderByDescending(n=>n-(int)n).ToList()); return numbersGroups; }
public Dictionary<string, List<Product>> ProductEachGroupSkipWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> afterEachGroupsWhile = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.SkipWhile(p => p.ProductId > 100).ToList()); return afterEachGroupsWhile; }
public int ProductLongNameLengthMax() { List<Product> products = GetProductList(); int maxUnitPrice = products.Select(p => p.ProductName) .Where(name => name.Length > 7).Max(name => name.Length); return maxUnitPrice; }
public string[] StringIntersect() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; string[] sharedWords = wordsA.Intersect(wordsB).ToArray(); return sharedWords; }
public Tuple<string, int>[] SelectByStringAndLength() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; Tuple<string, int>[] upperLowerWords = words.Select(w => Tuple.Create(w, w.Length)).ToArray(); return upperLowerWords; }
public List<Tuple<string,int>> CountRegionExpensiveOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int>> regionCounts = customers.GroupBy(c=>c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c=>c.Orders).Count(o=>o.Total>100))).ToList(); return regionCounts; }
public string[] TransformIndexToString() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string[] textNums = numbers.Select(n => strings[n]).ToArray(); return textNums; }
public int[] OddIntAddIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select((n, i) => n + i).ToArray(); return numSelected; }
public List<string> StringTakeWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstWordsWhile = words.TakeWhile(w => w[0] > 'b').ToList(); return firstWordsWhile; }
public double NumbersAverageTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; double averageNum = numbers.Average(n => n * 2); return averageNum; }
public List<Tuple<string, int>> CustomerEachRegionOrdersMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.Max(c => c.Orders.Count))).ToList(); return ordersMax; }
public List<bool> CustomerOrdersEachNestedAnyMatch() { List<Customer> customers = GetCustomerList(); List<bool> anyMatch = customers.Select(c => c.Orders.Any(o => o.OrderDate > new DateTime(2000, 1, 1))).ToList(); return anyMatch; }
public List<int> IntSquareTake() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Select(i => i * i).Take(3).ToList(); return first3Numbers; }
public int[] UniqueFactorOf300And900Count() { int[][] factorsOf300And900 = { new[] { 2, 2, 3, 5, 5 }, new[] { 2, 2, 3, 3, 5, 5 } }; int[] uniqueFactorsCount = factorsOf300And900.Select( a => a.Distinct().Count()).ToArray(); return uniqueFactorsCount; }
public string StringFirstStartWithO() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithO = strings.First(s => s[0] == 'o'); return startWithO; }
public int ShortStringSumLength() { string[] words = { "cherry", "apple", "blueberry" }; int totalChars = words.Where(w => w.Length < 7).Sum(w => w.Length); return totalChars; }
public List<double> BigDoubleOrderbyDescendingFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).OrderByDescending(n => n-(int)n).ToList(); return sortedNumbers; }
public int BigNumbersMax() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Where(n => n > 5).Max(); return maxNum; }
public double NumbersAggregateMultiply() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double product = numbers.Aggregate((a, b) => a * b); return product; }
public int ProductOutOfStock() { List<Product> products = GetProductList(); int count = products.Count(c => c.UnitsInStock == 0); return count; }
public Dictionary<string, Dictionary<int, Dictionary<int, List<Order>>>> CustomerNestedGroupByNameAndOrderYearAndMonth() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<int, Dictionary<int, List<Order>>>> customerOrderGroups = customers.ToDictionary( c => c.CompanyName, c => c.Orders.GroupBy(o => o.OrderDate.Year).ToDictionary( yg => yg.Key, yg => yg.GroupBy(o => o.OrderDate.Month).ToDictionary( mg => mg.Key, mg => mg.ToList() ) )); return customerOrderGroups; }
public bool EqualStrings() { List<string> wordsA = new List<string> { "Alpha", "Beta", "Gamma" }; List<string> wordsB = new List<string> { "Alpha", "Beta", "Gamma" }; bool equal = wordsA.SequenceEqual(wordsB); return equal; }
public double InputNumbersAggregateWithSeed(double[] numbers, double seed) { double product = numbers.Aggregate(seed, (runningProduct, nextFactor) => runningProduct * nextFactor); return product; }
public List<Tuple<string, int>> ProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Min(p => p.UnitsInStock))).ToList(); return categories; }
public List<int> RangeOfEvenInts() { List<int> numbers = Enumerable.Range(0, 100).Where(n=>n%2==0).ToList(); return numbers; }
public Dictionary<string, bool> ProductEachGroupAnyMatch() { List<Product> products = GetProductList(); Dictionary<string, bool> anyMatch = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Any(p => p.UnitsInStock > 0)); return anyMatch; }
public List<int> ShortStringLengthOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Where(w => w.Length < 6).Select(w => w.Length).OrderByDescending(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public int[] IntZipMultiply() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int[] multiplyNumbers = numbersA.Zip(numbersB, (a, b) => a * b).ToArray(); return multiplyNumbers; }
public Dictionary<string, int> CustomerExpensiveOrdersCountDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> orderCounts = customers.ToDictionary( c => c.CustomerId, c => c.Orders.Count(o => o.Total > 100)); return orderCounts; }
public Dictionary<string, Product> ProductEachCategoryFirstDict() { List<Product> products = GetProductList(); Dictionary<string, Product> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.First()); return categories; }
public bool StringAllMatch(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool allMatch = words.All(w => w[0] > c); return allMatch; }
public List<Tuple<int, Customer>> CustomerLeftOuterJoinRegionsWithCode() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, Customer>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c)).SelectMany(t=> t.Item2.DefaultIfEmpty(null),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public int OddNumbersCount(int[] numbers) { int oddNumbersCount = numbers.Count(n => n % 2 == 1); return oddNumbersCount; }
public List<Tuple<string, DateTime>> CustomerOrdersNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3Orders = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Skip(3).ToList(); return after3Orders; }
public int CustomerWithManyOrdersCount() { List<Customer> customers = GetCustomerList(); int count = customers.Count(c => c.Orders.Count > 5); return count; }
public Dictionary<string, double> CustomerEachCountryOrdersAverageDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersAverage = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Average(c => c.Orders.Count)); return ordersAverage; }
public List<Tuple<Tuple<string, int>, string>> CustomerCrossGroupJoinRegionsWithCodeNameRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<Tuple<string, int>, string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public Dictionary<string, List<Product>> ExpensiveProductEachCategoryMaxUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.Where(p=>p.UnitPrice>100).GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Max(p => p.UnitPrice)) .ToList()); return categories; }
public Dictionary<int, Dictionary<int, List<Order>>> CustomerNestedGroupByOrderYearAndMonthPrint() { List<Customer> customers = GetCustomerList(); Dictionary<int, Dictionary<int, List<Order>>> customerOrderGroups = customers.SelectMany(c => c.Orders) .GroupBy(o => o.OrderDate.Year).ToDictionary( yg => yg.Key, yg => yg.GroupBy(o => o.OrderDate.Month).ToDictionary( mg => mg.Key, mg => mg.ToList()) ); foreach (var e1 in customerOrderGroups) { Console.WriteLine(e1.Key + ":"); foreach (var e2 in e1.Value) { Console.WriteLine("\t" + e2.Key + ":"); e2.Value.ForEach(o => Console.WriteLine("\t\t" + o)); } } return customerOrderGroups; }
public double ExpensiveProductUnitPriceMax() { List<Product> products = GetProductList(); double maxUnitPrice = products.Where(p => p.UnitPrice > 100).Max(p => p.UnitPrice); return maxUnitPrice; }
public double DoubleMin() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double minNum = numbers.Min(); return minNum; }
public bool[] OddIntWithOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => Tuple.Create(n % 2 == 1,n == i)) .Where(t=>t.Item1).Select(t=>t.Item2).ToArray(); return numSelected; }
public List<Tuple<string, double>> CustomerOrdersTotalMin() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMin = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Min(o => o.Total))).ToList(); return ordersTotalMin; }
public List<Tuple<string, string>> ProductCrossJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, string>> q = categories.Join(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p.ProductName)).ToList(); return q; }
public List<string> ShortStringOrderbyLength() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w.Length).ToList(); return sortedWords; }
public List<Tuple<string,DateTime>> CustomerSelectManyCustomerBigOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public void StringLengthDeferred() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Select(w => w.Length).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public bool EqualDoubles() { double[] numbersA = { 0.5, 2.3, 4.7, 5.4, 9.8 }; double[] numbersB = { 0.5, 2.3, 4.7, 5.4, 9.8 }; bool equal = numbersA.SequenceEqual(numbersB); return equal; }
public List<string> StringTake() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstNNumbers = words.Take(3).ToList(); return firstNNumbers; }
public int[] UniqueFactorsCount(int[][] factors) { int[] factorsCount = factors.Select( a => a.Distinct().Count()).ToArray(); return factorsCount; }
public List<Tuple<int, Customer>> CustomerCrossGroupJoinRegionsWithCode() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, Customer>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c)).SelectMany(t=> t.Item2,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
public Tuple<int, int>[] SelectManyJoinSmaller() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => a < b), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public Dictionary<string, double> ProductsConvertFieldsToDictionaryAndPrint() { List<Product> products = GetProductList(); Dictionary<string, double> productsUnitPrice = products.ToDictionary( p => p.ProductName, p => p.UnitPrice); foreach (var pair in productsUnitPrice) Console.WriteLine(pair.Key + ":" + pair.Value); return productsUnitPrice; }
public List<Tuple<string,Order>> CustomerSelectManyCustomerBigOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public Dictionary<string, Dictionary<int, List<Order>>> CustomerNestedGroupByNameAndOrderYear() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<int, List<Order>>> customerOrderGroups = customers.ToDictionary( c => c.CompanyName, c => c.Orders.GroupBy(o => o.OrderDate.Year).ToDictionary( yg => yg.Key, yg => yg.ToList() ) ); return customerOrderGroups; }
public int OddNumbersSumTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n % 2 == 1).Sum(n => n * 2); return numbersSum; }
public List<Tuple<string, double>> CustomerInRegionOrdersTotalMax(string region) { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMax = customers.Where(c => c.Region.Equals(region)) .Select(c => Tuple.Create(c.CustomerId, c.Orders.Max(o => o.Total))).ToList(); return ordersTotalMax; }
public List<int> IntSkip() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Skip(3).ToList(); return after3Numbers; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyNameCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category) .ThenBy(p=>p.ProductName,new CaseInsensitiveComparer()).ToList(); return sortedProducts; }
public List<Tuple<string,int,double>> CustomerSelectManyCustomerBigOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<string> StringOrderbyLengthThenbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length).ThenBy(w=>w,new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public Dictionary<bool, List<double>> DoubleGroupByBoolDictOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; Dictionary<bool, List<double>>  numbersGroups = numbers.GroupBy(n => n>5) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w).ToList()); return numbersGroups; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category).ThenBy(p=>p.ProductName).ToList(); return sortedProducts; }
public int[] IntsConvertToArray() { int[] ints = { 2, 3, 1, 5, 4 }; int[] intsArray = ints.OrderBy(d => d).ToArray(); return intsArray; }
public int NumbersMinTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Min(n => n * 2); return minNum; }
public int AggregateWithdrawMoneyWithSeed() { int startBalance = 100; int[] attemptedWithdrawals = { 20, 10, 40, 50, 10, 70, 30 }; int endBalance = attemptedWithdrawals.Aggregate(startBalance, (balance, nextWithdrawal) => nextWithdrawal <= balance ? balance - nextWithdrawal : balance); return 0; }
public int[] IntZipAddReverse() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int[] addNumbers = numbersA.Zip(numbersB.Reverse(), (a, b) => a + b).ToArray(); return addNumbers; }
public List<string> StringOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<Tuple<int, Customer>> CustomerCrossJoinRegionsWithCode() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, Customer>> q = regions.Join(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c)).ToList(); return q; }
public Dictionary<String,int> CountRegionDistinctCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<String,int> regionCounts = customers.GroupBy(c=>c.Region) .ToDictionary(g=>g.Key, g=>g.Distinct().Count()); return regionCounts; }
public Dictionary<string, List<Customer>> CustomerEachCountryOrdersMinCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersMin = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Where(c => c.Orders.Count ==g.Min(c => c.Orders.Count)).ToList()); return customerOrdersMin; }
public Dictionary<string, double> CustomerExpensiveOrdersTotalAverageDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalAverage = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Average(o => o.Total)); return ordersTotalAverage; }
public List<int> IntSkipWhileCount(int[] numbers, int n) { List<int> afterNumbersWhile = numbers.SkipWhile(i => i > n).ToList(); return afterNumbersWhile; }
public int[] IntExcept() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] differentNumbers = numbersA.Except(numbersB).ToArray(); return differentNumbers; }
public List<string> ExceptOfCategory() { string[] categories = {"Furnitures", "Seagoods"}; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> differentCategories = productCategories.Except(categories).ToList(); return differentCategories; }
public List<Tuple<string, Order>> CustomerEachRegionFirstOrder() { List<Customer> customers = GetCustomerList(); List<Tuple<string, Order>> ordersMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c => c.Orders).First())).ToList(); return ordersMax; }
public Dictionary<string, List<Customer>> CustomerEachRegionOrdersMinCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersMin = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.Where(c => c.Orders.Count ==g.Min(c => c.Orders.Count)).ToList()); return customerOrdersMin; }
public List<Tuple<string, int>> ExpensiveProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice > 100) .Min(p => p.UnitsInStock))).ToList(); return categories; }
public int[] IntsConvertToDescendingArrayAndPrint() { int[] ints = { 2, 3, 1, 5, 4 }; int[] intsArray = ints.OrderByDescending(d => d).ToArray(); for (int i = 0; i < intsArray.Length; i++) Console.WriteLine(intsArray[i]); return intsArray; }
public Dictionary<string, Product> ProductEachCategoryElementAtDict() { List<Product> products = GetProductList(); Dictionary<string, Product> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.ElementAt(1)); return categories; }
public Dictionary<string, List<Product>> ProductEachCategoryFirstOrDefaultUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.FirstOrDefault(Product.Default).UnitPrice) .ToList()); return categories; }
public List<string> UnionOfName() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productNames = products.Select(p => p.ProductName); var customerNames = customers.Select(c => c.CompanyName); List<string> uniqueNames = productNames.Union(customerNames).ToList(); return uniqueNames; }
public Dictionary<string, List<Customer>> CustomerEachCountryOrdersFirstOrDefaultCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersFirst = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Where(c => c.Orders.Count ==g.FirstOrDefault(Customer.Default).Orders.Count).ToList()); return customerOrdersFirst; }
public List<Tuple<string,double>> CustomerIdAndBiggestTotal() { List<Customer> customers = GetCustomerList(); List<Tuple<string,double>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders.Select(o=>o.Total).Max())).ToList(); return customerProperties; }
public Dictionary<string, bool> ExpensiveProductEachGroupAnyMatch() { List<Product> products = GetProductList(); Dictionary<string, bool> anyMatch = products.Where(p => p.UnitPrice > 100).GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Any(p => p.UnitsInStock > 0)); return anyMatch; }
public List<Tuple<string, List<int>>> ProductGroupByCategoryWithId() { List<Product> products = GetProductList(); List<Tuple<string, List<int>>> category = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductId).ToList())).ToList(); return category; }
public List<int> StringLengthOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Select(w => w.Length).OrderBy(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<double> BigDoubleOrderbyModDescendingThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderByDescending(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<Tuple<bool, List<double>>> DoubleGroupByBoolOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<Tuple<bool, List<double>>> numbersGroups = numbers.GroupBy(n => n>5) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w).ToList())).ToList(); return numbersGroups; }
public char[] StringFirstChar() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; char[] selected = strings.Select(w => w[0]).ToArray(); return selected; }
public List<Product> ExpensiveProductOrderbyDescendingId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderByDescending(p => p.ProductId).ToList(); return sortedProducts; }
public List<Tuple<string, double>> CustomerInRegionOrdersTotalSum(string region) { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.Where(c => c.Region.Equals(region)) .Select(c => Tuple.Create(c.CustomerId, c.Orders.Sum(o => o.Total))).ToList(); return ordersTotalSum; }
public int[] BigIntAddOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select((n, i) => n > 5 ? n + i : -1) .Where(n=>n!=-1).ToArray(); return numSelected; }
public bool CustomerOrdersNestedAllMatch() { List<Customer> customers = GetCustomerList(); bool allMatch = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).All(t => t.Item2 > new DateTime(2000, 1, 1)); return allMatch; }
public Dictionary<string, int> ProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Sum(p => p.UnitsInStock)); return categories; }
public void BigNumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public Dictionary<bool, List<int>> ProductGroupByInStockWithIdDict() { List<Product> products = GetProductList(); Dictionary<bool, List<int>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); return productGroup; }
public int DistinctOddNumbersCount(int[] numbers) { int oddNumbersCount = numbers.Distinct().Count(n => n % 2 == 1); return oddNumbersCount; }
public double[] DoubleExcept() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] differentNumbers = numbersA.Except(numbersB).ToArray(); return differentNumbers; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category).ThenBy(p=>p.ProductId).ToList(); return sortedProducts; }
public List<Order> CustomerSelectManyOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders).ToList(); return customerProperties; }
public double ExpensiveProductUnitPriceAggregateAverage() { List<Product> products = GetProductList(); double aggregateSum = products.Select(p => p.UnitPrice).Where(d => d > 100) .Aggregate((a, b) => (a + b) / 2); return aggregateSum; }
public int CheapProductCount() { List<Product> products = GetProductList(); int count = products.Count(p => p.UnitPrice < 100); return count; }
public int[] BigIntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n > 5).Select(n => n + 1).ToArray(); return numSelected; }
public List<Product> ExpensiveProductSkip() { List<Product> products = GetProductList(); List<Product> after3Products = products.Where(p => p.UnitPrice > 100).Skip(3).ToList(); return after3Products; }
public double[] ConvertSelectedDoubleItemToArrayAndPrintForeach() { object[] numbers = { null, 1.0, "two", 3, "four", 5, "six", 7.0 }; double[] doubles = numbers.OfType<double>().ToArray(); foreach (double d in doubles) Console.WriteLine(d); return doubles; }
public List<int> OddIntOriginalIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Where((n,i)=>n<i&&n % 2 == 1).ToList(); return q; }
public double ProjectedDoubleElementAt() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double numAt = numbers.Select(i => Math.Log(i)).Where(n => n > 3).ElementAt(2); return numAt; }
public List<int> IntSquareSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbers = numbers.Select(i => i * i).SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public List<Tuple<string, int>> ProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Sum(p => p.UnitsInStock))).ToList(); return categories; }
public int ExpensiveProductStockMin() { List<Product> products = GetProductList(); int minUnitPrice = products.Where(p => p.UnitPrice > 100).Min(p => p.UnitsInStock); return minUnitPrice; }
public Dictionary<string, List<double>>  ProductGroupJoinCategoriesUnitPrice() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); Dictionary<string, List<double>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p.Select(p1=>p1.UnitPrice).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
