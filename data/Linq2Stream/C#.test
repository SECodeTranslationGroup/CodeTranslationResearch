public List<Product> ProductOrderbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.ProductId).ToList(); return sortedProducts; }
public List<Product> ProductOrderbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.ProductName).ToList(); return sortedProducts; }
public List<string> ProductNameOrderby() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Select(p => p.ProductName).OrderBy(n=>n).ToList(); return sortedProducts; }
public List<Product> ExpensiveProductOrderbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.ProductId).ToList(); return sortedProducts; }
public List<Product> ExpensiveProductOrderbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.ProductName).ToList(); return sortedProducts; }
public List<string> ExpensiveProductNameOrderby() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Where(p=>p.UnitPrice>100).Select(p => p.ProductName).OrderBy(n=>n).ToList(); return sortedProducts; }
public List<Tuple<string,List<Product>>> ProductGroupByCategoryOrderbyId() { List<Product> products = GetProductList(); List<Tuple<string,List<Product>>> productsGroups = products.GroupBy(p=>p.Category) .Select(g => Tuple.Create(g.Key,g.OrderBy(p=>p.ProductId).ToList())).ToList(); return productsGroups; }
public Dictionary<string,List<Product>> ProductGroupByCategoryDictOrderbyId() { List<Product> products = GetProductList(); Dictionary<string,List<Product>>  productsGroups = products.GroupBy(p=>p.Category) .ToDictionary(g => g.Key,g=>g.OrderBy(p=>p.ProductId).ToList()); return productsGroups; }
public List<Tuple<string,List<Product>>> ProductGroupByCategoryOrderbyName() { List<Product> products = GetProductList(); List<Tuple<string,List<Product>>> productsGroups = products.GroupBy(p=>p.Category) .Select(g => Tuple.Create(g.Key,g.OrderBy(p=>p.ProductName).ToList())).ToList(); return productsGroups; }
public Dictionary<string,List<Product>> ProductGroupByCategoryDictOrderbyName() { List<Product> products = GetProductList(); Dictionary<string,List<Product>>  productsGroups = products.GroupBy(p=>p.Category) .ToDictionary(g => g.Key,g=>g.OrderBy(p=>p.ProductName).ToList()); return productsGroups; }
public List<string> StringOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<int> StringLengthOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Select(w => w.Length).OrderBy(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<string> ShortStringOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<string> ShortStringOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w.Length, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<int> ShortStringLengthOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<int> sortedWords = words.Where(w => w.Length < 6).Select(w => w.Length).OrderBy(w => w, new CustomNumberComparer()).ToList(); return sortedWords; }
public List<Tuple<char, List<string>>> StringGroupByFirstCharOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w,new CaseInsensitiveComparer()).ToList())).ToList(); return wordsGroups; }
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w,new CaseInsensitiveComparer()).ToList()); return wordsGroups; }
public List<Tuple<bool, List<string>>> StringGroupByLengthOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w.Length,new CustomNumberComparer()).ToList())).ToList(); return wordsGroups; }
public Dictionary<bool, List<string>> StringGroupByLengthDictOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<bool, List<string>> wordsGroups = words.GroupBy(w => w.Length > 8) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w.Length,new CustomNumberComparer()).ToList()); return wordsGroups; }
public void NumbersDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void BigNumbersDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void OddNumbersDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void DoubleDeferred() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Select(n => d += n); foreach (var v in q) Console.Write(v + " " + d); }
public void BigDoubleNumbersDeferred() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Where(d => d > 5).Select(n => d += n); foreach (var v in q) Console.Write(v + " " + d); }
public void NumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void BigNumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void OddNumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void StringLengthDeferred() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Select(w => w.Length).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void ShortStringLengthDeferred() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Where(w => w.Length < 7).Select(w => w.Length).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
public void NumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void BigNumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void OddNumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void DoubleEager() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Select(n => d += n).ToList(); foreach (var v in q) Console.Write(v + " " + d); }
public void BigDoubleNumbersEager() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Where(d => d > 5).Select(n => d += n).ToList(); foreach (var v in q) Console.Write(v + " " + d); }
public void NumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void BigNumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n > 5).Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void OddNumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void StringLengthEager() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Select(w => w.Length).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public void ShortStringLengthEager() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Where(w => w.Length < 7).Select(w => w.Length).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
public Tuple<int, int>[] SelectManyJoin() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB, (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public Tuple<int, int>[] SelectManyJoinOdd() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => b % 2 == 1), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public Tuple<int, int>[] SelectManyJoinBig() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => b > 5), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public Tuple<int, int>[] SelectManyJoinSmaller() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => a < b), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public Tuple<int, int>[] SelectManyJoinSumEven() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => (a + b) % 2 == 0), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
public List<Order> CustomerSelectManyOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders).ToList(); return customerProperties; }
public List<Tuple<string,Order>> CustomerSelectManyCustomerOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public List<Tuple<string,DateTime>> CustomerSelectManyCustomerOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public List<Tuple<string,int,double>> CustomerSelectManyCustomerOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Order> CustomerSelectManyBigOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders.Where(o=>o.Total>100)).ToList(); return customerProperties; }
public List<Tuple<string,Order>> CustomerSelectManyCustomerBigOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public List<Tuple<string,DateTime>> CustomerSelectManyCustomerBigOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public List<Tuple<string,int,double>> CustomerSelectManyCustomerBigOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerBigOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Order> CustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1))).ToList(); return customerProperties; }
public List<Tuple<string,Order>> CustomerSelectManyCustomerNewOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public List<Tuple<string,DateTime>> CustomerSelectManyCustomerNewOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public List<Tuple<string,int,double>> CustomerSelectManyCustomerNewOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<Tuple<string,int,int>> CustomerSelectManyCustomerNewOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public List<Order> WaCustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.Where(c => c.Region == "WA").SelectMany(c=> c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1))).ToList(); return customerProperties; }
public List<Tuple<string,Order>> WaCustomerSelectManyCustomerNewOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
public List<Tuple<string,DateTime>> WaCustomerSelectManyCustomerNewOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
public List<Tuple<string,int,double>> WaCustomerSelectManyCustomerNewOrderIdAndDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
public List<Tuple<string,int,int>> WaCustomerSelectManyCustomerNewOrderDateYearAndMonth() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,int>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate.Year,o.OrderDate.Month)).ToList(); return customerProperties; }
public int[] IndexedSelectMany() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] pairs = numbersA.SelectMany((a,i) => numbersB.Select( b=>i%2==0?a:b)).ToArray(); return pairs; }
public int[] IndexedSelectManyBig() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] pairs = numbersA.SelectMany((a,i) => numbersB.Where(b=>b<a+i)).ToArray(); return pairs; }
public List<Order> CustomerIndexedSelectManyOrdersTake() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany((c,i)=> c.Orders.Take(i<10?5:1).ToList()).ToList(); return customerProperties; }
public List<Order> WaCustomerIndexedSelectManyOrdersTake() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.Where(c=>c.Region=="WA").SelectMany((c,i)=> c.Orders.Take(i<10?5:1).ToList()).ToList(); return customerProperties; }
public List<string> IndexedSelectManyString() { List<Customer> customers = GetCustomerList(); List<string> customerOrders = customers.SelectMany((c, i) => c.Orders.Select(o => "Customer #" + (i + 1) + " has an order with OrderID " + o.OrderId)).ToList(); return customerOrders; }
public int[] IntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select(n => n + 1).ToArray(); return numSelected; }
public int[] OddIntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select(n => n + 1).ToArray(); return numSelected; }
public int[] BigIntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n > 5).Select(n => n + 1).ToArray(); return numSelected; }
public int[] IntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select(n => n * 2).ToArray(); return numSelected; }
public int[] OddIntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select(n => n * 2).ToArray(); return numSelected; }
public int[] BigIntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n > 5).Select(n => n * 2).ToArray(); return numSelected; }
public char[] StringFirstChar() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; char[] selected = strings.Select(w => w[0]).ToArray(); return selected; }
public char[] ShortStringFirstChar() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; char[] selected = strings.Where(w => w.Length < 4).Select(w => w[0]).ToArray(); return selected; }
public int[] StringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Select(w => w.Length).ToArray(); return selected; }
public int[] ShortStringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Where(w => w.Length < 4).Select(w => w.Length).ToArray(); return selected; }
public List<string> ProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Select(p => p.ProductName).ToList(); return productNames; }
public List<double> ProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Select(p => p.UnitPrice).ToList(); return productNames; }
public List<string> ExpensiveProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Where(p => p.UnitPrice > 100).Select(p => p.ProductName).ToList(); return productNames; }
public List<double> ExpensiveProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Where(p => p.UnitPrice > 100).Select(p => p.UnitPrice).ToList(); return productNames; }
public List<string> OutOfStockProductName() { List<Product> products = GetProductList(); List<string> productNames = products.Where(p => p.UnitsInStock == 0).Select(p => p.ProductName).ToList(); return productNames; }
public List<double> OutOfStockProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Where(p => p.UnitsInStock == 0).Select(p => p.UnitPrice).ToList(); return productNames; }
public List<Tuple<string, List<string>>> ProductGroupName() { List<Product> products = GetProductList(); List<Tuple<string, List<string>>> productNames = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductName).ToList())) .ToList(); return productNames; }
public Dictionary<string, List<string>> ProductGroupNameDict() { List<Product> products = GetProductList(); Dictionary<string, List<string>> productNames = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductName).ToList()); return productNames; }
public List<Tuple<string, List<double>>> ProductGroupUnitPrice() { List<Product> products = GetProductList(); List<Tuple<string, List<double>>> productNames = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Select(p => p.UnitPrice).ToList())) .ToList(); return productNames; }
public Dictionary<string, List<double>> ProductGroupUnitPriceDict() { List<Product> products = GetProductList(); Dictionary<string, List<double>> productNames = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.UnitPrice).ToList()); return productNames; }
public int[] TransformIndexToInt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] textNums = numbers.Select(n => numbers[n]).ToArray(); return textNums; }
public string[] TransformIndexToString() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string[] textNums = numbers.Select(n => strings[n]).ToArray(); return textNums; }
public int[] TransformIndexHashToInt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] textNums = numbers.Select(n => numbers[n * 97 % 10]).ToArray(); return textNums; }
public string[] TransformIndexHashToString() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string[] textNums = numbers.Select(n => strings[n * 97 % 10]).ToArray(); return textNums; }
public Tuple<string, string>[] SelectByCase() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; Tuple<string, string>[] upperLowerWords = words.Select(w => Tuple.Create(w.ToUpper(), w.ToLower())).ToArray(); return upperLowerWords; }
public string[] SelectByCaseConcat() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; string[] upperLowerWords = words.Select(w => w.ToUpper() + w.ToLower()).ToArray(); return upperLowerWords; }
public Tuple<string, int>[] SelectByStringAndLength() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; Tuple<string, int>[] upperLowerWords = words.Select(w => Tuple.Create(w, w.Length)).ToArray(); return upperLowerWords; }
public string[] SelectByStringAndLengthConcat() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; string[] upperLowerWords = words.Select(w => w + w.Length).ToArray(); return upperLowerWords; }
public Tuple<string, bool>[] SelectByEvenOdd() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; Tuple<string, bool>[] evenOddWords = numbers.Select(n => Tuple.Create(strings[n], n % 2 == 0)).ToArray(); return evenOddWords; }
public string[] SelectByEvenOddConcat() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string[] evenOddWords = numbers.Select(n => strings[n] + (n % 2 == 0 ? " even" : " odd")).ToArray(); return evenOddWords; }
public List<Tuple<string,string>> CustomerIdAndName() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId,c.CompanyName)).ToList(); return customerProperties; }
public List<Tuple<string,string>> CustomerRegionAndCountry() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.Region,c.Country)).ToList(); return customerProperties; }
public List<Tuple<string,string>> CustomerCityAndAddress() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.City,c.Address)).ToList(); return customerProperties; }
public List<Tuple<string,string,string>> CustomerRegionAndCountryAndCity() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.Region,c.Country,c.City)).ToList(); return customerProperties; }
public List<Tuple<string,string,string>> CustomerCityAndAddressAndPostal() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.City,c.Address,c.PostalCode)).ToList(); return customerProperties; }
public List<Tuple<string,List<Order>>> CustomerIdAndOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,List<Order>>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders)).ToList(); return customerProperties; }
public List<Tuple<string,int>> CustomerIdAndOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders.Count)).ToList(); return customerProperties; }
public List<Tuple<string,Order>> CustomerIdAndFirstOrder() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders.First())).ToList(); return customerProperties; }
public List<Tuple<string,Order>> CustomerIdAndFirstOrDefaultOrder() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders.FirstOrDefault(Order.Default))).ToList(); return customerProperties; }
public List<Tuple<string,double>> CustomerIdAndBiggestTotal() { List<Customer> customers = GetCustomerList(); List<Tuple<string,double>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders.Select(o=>o.Total).Max())).ToList(); return customerProperties; }
public bool[] IntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => n == i).ToArray(); return numSelected; }
public int[] IntAddIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select((n, i) => n + i).ToArray(); return numSelected; }
public bool[] OddIntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Where(n => n % 2 == 1).Select((n, i) => n == i).ToArray(); return numSelected; }
public int[] OddIntAddIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select((n, i) => n + i).ToArray(); return numSelected; }
public bool[] OddIntWithOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => Tuple.Create(n % 2 == 1,n == i)) .Where(t=>t.Item1).Select(t=>t.Item2).ToArray(); return numSelected; }
public int[] OddIntAddOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select((n, i) => n % 2 == 1 ? n + i : -1) .Where(n=>n!=-1).ToArray(); return numSelected; }
public bool[] BigIntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Where(n => n > 5).Select((n, i) => n == i).ToArray(); return numSelected; }
public int[] BigIntAddIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n > 5).Select((n, i) => n + i).ToArray(); return numSelected; }
public bool[] BigIntWithOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => Tuple.Create(n > 5,n == i)) .Where(t=>t.Item1).Select(t=>t.Item2).ToArray(); return numSelected; }
public int[] BigIntAddOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select((n, i) => n > 5 ? n + i : -1) .Where(n=>n!=-1).ToArray(); return numSelected; }
public int[] IntUnion() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] uniqueNumbers = numbersA.Union(numbersB).ToArray(); return uniqueNumbers; }
public double[] DoubleUnion() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] uniqueNumbers = numbersA.Union(numbersB).ToArray(); return uniqueNumbers; }
public string[] StringUnion() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; string[] uniqueWords = wordsA.Union(wordsB).ToArray(); return uniqueWords; }
public int[] ProjectionIntUnion() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; var first = numbersA.Select(n => n+1); var second = numbersB.Select(n => n-1); int[] numbers = first.Union(second).ToArray(); return numbers; }
public double[] ProjectionDoubleUnion() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n-(int)n); var second = numbersB.Select(n => n-(int)n); double[] numbers = first.Union(second).ToArray(); return numbers; }
public char[] ProjectionStringUnion() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; var first = wordsA.Select(n => n[0]); var second = wordsB.Select(n => n[0]); char[] words = first.Union(second).ToArray(); return words; }
public List<string> UnionOfCategory() { string[] categories = {"Furnitures", "Seagoods"}; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> uniqueCategories = productCategories.Union(categories).ToList(); return uniqueCategories; }
public List<string> UnionOfRegion() { string[] regions = {"WA", "AF","RO"}; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> uniqueRegions = customerRegions.Union(regions).ToList(); return uniqueRegions; }
public List<string> UnionOfName() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productNames = products.Select(p => p.ProductName); var customerNames = customers.Select(c => c.CompanyName); List<string> uniqueNames = productNames.Union(customerNames).ToList(); return uniqueNames; }
public List<char> UnionOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> uniqueFirstChars = productFirstChars.Union(customerFirstChars).ToList(); return uniqueFirstChars; }
public int[] IntIntersect() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] sharedNumbers = numbersA.Intersect(numbersB).ToArray(); return sharedNumbers; }
public double[] DoubleIntersect() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] sharedNumbers = numbersA.Intersect(numbersB).ToArray(); return sharedNumbers; }
public string[] StringIntersect() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; string[] sharedWords = wordsA.Intersect(wordsB).ToArray(); return sharedWords; }
public int[] ProjectionIntIntersect() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; var first = numbersA.Select(n => n+1); var second = numbersB.Select(n => n-1); int[] numbers = first.Intersect(second).ToArray(); return numbers; }
public double[] ProjectionDoubleIntersect() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n-(int)n); var second = numbersB.Select(n => n-(int)n); double[] numbers = first.Intersect(second).ToArray(); return numbers; }
public char[] ProjectionStringIntersect() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; var first = wordsA.Select(n => n[0]); var second = wordsB.Select(n => n[0]); char[] words = first.Intersect(second).ToArray(); return words; }
public List<string> IntersectOfCategory() { string[] categories = {"Furnitures", "Seagoods"}; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> sharedCategories = productCategories.Intersect(categories).ToList(); return sharedCategories; }
public List<string> IntersectOfRegion() { string[] regions = {"WA", "AF","RO"}; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> sharedRegions = customerRegions.Intersect(regions).ToList(); return sharedRegions; }
public List<string> IntersectOfName() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productNames = products.Select(p => p.ProductName); var customerNames = customers.Select(c => c.CompanyName); List<string> sharedNames = productNames.Intersect(customerNames).ToList(); return sharedNames; }
public List<char> IntersectOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> sharedFirstChars = productFirstChars.Intersect(customerFirstChars).ToList(); return sharedFirstChars; }
public int[] IntExcept() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] differentNumbers = numbersA.Except(numbersB).ToArray(); return differentNumbers; }
public double[] DoubleExcept() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] differentNumbers = numbersA.Except(numbersB).ToArray(); return differentNumbers; }
public string[] StringExcept() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; string[] differentWords = wordsA.Except(wordsB).ToArray(); return differentWords; }
public int[] ProjectionIntExcept() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; var first = numbersA.Select(n => n+1); var second = numbersB.Select(n => n-1); int[] numbers = first.Except(second).ToArray(); return numbers; }
public double[] ProjectionDoubleExcept() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n-(int)n); var second = numbersB.Select(n => n-(int)n); double[] numbers = first.Except(second).ToArray(); return numbers; }
public char[] ProjectionStringExcept() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; var first = wordsA.Select(n => n[0]); var second = wordsB.Select(n => n[0]); char[] words = first.Except(second).ToArray(); return words; }
public List<string> ExceptOfCategory() { string[] categories = {"Furnitures", "Seagoods"}; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> differentCategories = productCategories.Except(categories).ToList(); return differentCategories; }
public List<string> ExceptOfRegion() { string[] regions = {"WA", "AF","RO"}; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> differentRegions = customerRegions.Except(regions).ToList(); return differentRegions; }
public List<string> ExceptOfName() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productNames = products.Select(p => p.ProductName); var customerNames = customers.Select(c => c.CompanyName); List<string> differentNames = productNames.Except(customerNames).ToList(); return differentNames; }
public List<char> ExceptOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> differentFirstChars = productFirstChars.Except(customerFirstChars).ToList(); return differentFirstChars; }
public List<int> IntSkip() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Skip(3).ToList(); return after3Numbers; }
public List<int> OddIntSkip() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Where(i => i % 2 == 1).Skip(3).ToList(); return after3Numbers; }
public List<int> IntSquareSkip() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Select(i => i * i).Skip(3).ToList(); return after3Numbers; }
public List<int> IntSkipCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Skip(n).ToList(); return after3Numbers; }
public List<int> IntSkipCount(int[] numbers, int n) { List<int> afterNNumbers = numbers.Skip(n).ToList(); return afterNNumbers; }
public List<string> StringSkip() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterNNumbers = words.Skip(3).ToList(); return afterNNumbers; }
public List<string> LongStringSkip() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> after3Words = words.Where(w => w.Length > 5).Skip(3).ToList(); return after3Words; }
public List<int> StringLengthSkip() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> after3Words = words.Select(w => w.Length).Skip(3).ToList(); return after3Words; }
public List<string> StringSkipCount(int n) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterNWords = words.Skip(n).ToList(); return afterNWords; }
public List<string> StringSkipCount(string[] strings, int n) { List<string> afterNWords = strings.Skip(n).ToList(); return afterNWords; }
public List<Product> ProductSkip() { List<Product> products = GetProductList(); List<Product> after3Products = products.Skip(3).ToList(); return after3Products; }
public List<Product> ExpensiveProductSkip() { List<Product> products = GetProductList(); List<Product> after3Products = products.Where(p => p.UnitPrice > 100).Skip(3).ToList(); return after3Products; }
public List<Product> InStockProductSkip() { List<Product> products = GetProductList(); List<Product> after3Products = products.Where(p => p.UnitsInStock > 0).Skip(3).ToList(); return after3Products; }
public Dictionary<string, List<Product>> ProductGroupSkip() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> after3Groups = products.GroupBy(p => p.Category) .Skip(3).ToDictionary(g => g.Key, g => g.ToList()); return after3Groups; }
public Dictionary<string, List<Product>> ProductEachGroupSkip() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> after3EachGroups = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Skip(3).ToList()); return after3EachGroups; }
public List<Order> CustomerOrdersSkip() { List<Customer> customers = GetCustomerList(); List<Order> after3Orders = customers.SelectMany(c => c.Orders) .Skip(3).ToList(); return after3Orders; }
public List<Tuple<string, DateTime>> CustomerOrdersNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3Orders = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Skip(3).ToList(); return after3Orders; }
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3EachOrders = customers .SelectMany(c => c.Orders.Skip(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return after3EachOrders; }
public List<Tuple<string, DateTime>> WaCustomerOrdersNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3WAOrders = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Skip(3).ToList(); return after3WAOrders; }
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3EachWAOrders = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.Skip(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return after3EachWAOrders; }
public List<int> IntSkipWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.SkipWhile(i => i > 3).ToList(); return afterNumbersWhile; }
public List<int> OddIntSkipWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.Where(i => i % 2 == 1).SkipWhile(i => i > 3).ToList(); return afterNumbersWhile; }
public List<int> IntSquareSkipWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.Select(i => i * i).SkipWhile(i => i > 3).ToList(); return afterNumbersWhile; }
public List<int> IntSkipWhileCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.SkipWhile(i => i > n).ToList(); return afterNumbersWhile; }
public List<int> IntSkipWhileCount(int[] numbers, int n) { List<int> afterNumbersWhile = numbers.SkipWhile(i => i > n).ToList(); return afterNumbersWhile; }
public List<string> StringSkipWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterWordsWhile = words.SkipWhile(w => w[0] > 'b').ToList(); return afterWordsWhile; }
public List<string> LongStringSkipWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterWordsWhile = words.Where(w => w.Length > 5).SkipWhile(w => w[0] > 'b').ToList(); return afterWordsWhile; }
public List<int> StringLengthSkipWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> afterWordsWhile = words.Select(w => w.Length).SkipWhile(n => n > 5).ToList(); return afterWordsWhile; }
public List<string> StringSkipWhileCount(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterWordsWhile = words.SkipWhile(w => w[0] > c).ToList(); return afterWordsWhile; }
public List<string> StringSkipWhileCount(string[] strings, char c) { List<string> afterWordsWhile = strings.SkipWhile(w => w[0] > c).ToList(); return afterWordsWhile; }
public List<Product> ProductSkipWhile() { List<Product> products = GetProductList(); List<Product> afterProductsWhile = products.SkipWhile(p => p.ProductId > 100).ToList(); return afterProductsWhile; }
public List<Product> ExpensiveProductSkipWhile() { List<Product> products = GetProductList(); List<Product> afterProductsWhile = products.Where(p => p.UnitPrice > 100).SkipWhile(p => p.ProductId > 100).ToList(); return afterProductsWhile; }
public List<Product> InStockProductSkipWhile() { List<Product> products = GetProductList(); List<Product> afterProductsWhile = products.Where(p => p.UnitsInStock > 0).SkipWhile(p => p.ProductId > 100).ToList(); return afterProductsWhile; }
public Dictionary<string, List<Product>> ProductGroupSkipWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> afterGroupsWhile = products.GroupBy(p => p.Category) .SkipWhile(g => g.Key.Length > 6).ToDictionary(g => g.Key, g => g.ToList()); return afterGroupsWhile; }
public Dictionary<string, List<Product>> ProductEachGroupSkipWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> afterEachGroupsWhile = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.SkipWhile(p => p.ProductId > 100).ToList()); return afterEachGroupsWhile; }
public List<Order> CustomerOrdersSkipWhile() { List<Customer> customers = GetCustomerList(); List<Order> afterOrdersWhile = customers.SelectMany(c => c.Orders) .SkipWhile(o => o.OrderDate > new DateTime(2000, 1, 1)).ToList(); return afterOrdersWhile; }
public List<Tuple<string, DateTime>> CustomerOrdersNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersWhile = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).SkipWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return afterOrdersWhile; }
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersEachWhile = customers .SelectMany(c => c.Orders.SkipWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return afterOrdersEachWhile; }
public List<Tuple<string, DateTime>> WaCustomerOrdersNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).SkipWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return afterOrdersWhile; }
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersEachWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.SkipWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return afterOrdersEachWhile; }
public List<int> IntSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbers = numbers.SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public List<int> IntSquareSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbers = numbers.Select(i => i * i).SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public List<double> IntSqrtSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<double> afterNumbers = numbers.Select(i => Math.Sqrt(i)).SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public List<int> IntSkipWhileIndexedCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbers = numbers.SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public List<int> IntSkipWhileIndexedCount(int[] numbers, int n) { List<int> afterNumbers = numbers.SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
public int NumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Sum(); return numbersSum; }
public int BigNumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n > 5).Sum(); return numbersSum; }
public int OddNumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n % 2 == 1).Sum(); return numbersSum; }
public double DoubleSum() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double numbersSum = numbers.Sum(); return numbersSum; }
public double BigDoubleNumbersSum() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double numbersSum = numbers.Where(d => d > 5).Sum(); return numbersSum; }
public int NumbersSumTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Sum(n => n * 2); return numbersSum; }
public int BigNumbersSumTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n > 5).Sum(n => n * 2); return numbersSum; }
public int OddNumbersSumTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n % 2 == 1).Sum(n => n * 2); return numbersSum; }
public int StringSumLength() { string[] words = { "cherry", "apple", "blueberry" }; int totalChars = words.Sum(w => w.Length); return totalChars; }
public int ShortStringSumLength() { string[] words = { "cherry", "apple", "blueberry" }; int totalChars = words.Where(w => w.Length < 7).Sum(w => w.Length); return totalChars; }
public double ProductUnitPriceTotalSum() { List<Product> products = GetProductList(); double totalSum = products.Sum(p => p.UnitPrice); return totalSum; }
public double ExpensiveProductUnitPriceTotalSum() { List<Product> products = GetProductList(); double totalSum = products.Where(p => p.UnitPrice > 100).Sum(p => p.UnitPrice); return totalSum; }
public int ExpensiveProductStockTotalSum() { List<Product> products = GetProductList(); int totalSum = products.Where(p => p.UnitPrice > 100).Sum(p => p.UnitsInStock); return totalSum; }
public int ProductLongNameLengthSum() { List<Product> products = GetProductList(); int totalSum = products.Select(p => p.ProductName) .Where(name => name.Length > 7).Sum(name => name.Length); return totalSum; }
public List<Tuple<string, double>> CustomerOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Sum(o => o.Total))).ToList(); return ordersTotalSum; }
public Dictionary<string, double> CustomerOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Sum(o => o.Total)); return ordersTotalSum; }
public List<Tuple<string, double>> CustomerInRegionOrdersTotalSum(string region) { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.Where(c => c.Region.Equals(region)) .Select(c => Tuple.Create(c.CustomerId, c.Orders.Sum(o => o.Total))).ToList(); return ordersTotalSum; }
public Dictionary<string, double> CustomerInRegionOrdersTotalSumDict(string region) { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.Where(c => c.Region.Equals(region)) .ToDictionary(c => c.CustomerId, c => c.Orders.Sum(o => o.Total)); return ordersTotalSum; }
public List<Tuple<string, double>> CustomerExpensiveOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Where(o => o.Total > 100).Sum(o => o.Total))).ToList(); return ordersTotalSum; }
public Dictionary<string, double> CustomerExpensiveOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Sum(o => o.Total)); return ordersTotalSum; }
public List<Tuple<string, int>> ProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Sum(p => p.UnitsInStock))).ToList(); return categories; }
public Dictionary<string, int> ProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Sum(p => p.UnitsInStock)); return categories; }
public List<Tuple<string, int>> ExpensiveProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, int>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p=>p.UnitPrice>100) .Sum(p => p.UnitsInStock))).ToList(); return categories; }
public Dictionary<string, int> ExpensiveProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Where(p=>p.UnitPrice>100).Sum(p => p.UnitsInStock)); return categories; }
public List<Tuple<string, int>> CustomerEachRegionOrdersSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersTotalSum = customers.GroupBy(c => c.Region) .Select(g=>Tuple.Create(g.Key, g.Sum(c=>c.Orders.Count))).ToList(); return ordersTotalSum; }
public Dictionary<string, int> CustomerEachRegionOrdersSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersTotalSum = customers.GroupBy(c => c.Region) .ToDictionary(g=>g.Key, g=>g.Sum(c=>c.Orders.Count)); return ordersTotalSum; }
public List<Tuple<string, int>> CustomerEachCountryOrdersSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersTotalSum = customers.GroupBy(c => c.Country) .Select(g=>Tuple.Create(g.Key, g.Sum(c=>c.Orders.Count))).ToList(); return ordersTotalSum; }
public Dictionary<string, int> CustomerEachCountryOrdersSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersTotalSum = customers.GroupBy(c => c.Country) .ToDictionary(g=>g.Key, g=>g.Sum(c=>c.Orders.Count)); return ordersTotalSum; }
public List<Tuple<string, double>> CustomerEachRegionOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.GroupBy(c => c.Region) .Select(g=>Tuple.Create(g.Key, g.SelectMany(c=>c.Orders).Sum(o => o.Total))).ToList(); return ordersTotalSum; }
public Dictionary<string, double> CustomerEachRegionOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.GroupBy(c => c.Region) .ToDictionary(g=>g.Key, g=>g.SelectMany(c=>c.Orders).Sum(o => o.Total)); return ordersTotalSum; }
public List<int> IntTake() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Take(3).ToList(); return first3Numbers; }
public List<int> OddIntTake() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Where(i => i % 2 == 1).Take(3).ToList(); return first3Numbers; }
public List<int> IntSquareTake() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Select(i => i * i).Take(3).ToList(); return first3Numbers; }
public List<int> IntTakeCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> first3Numbers = numbers.Take(n).ToList(); return first3Numbers; }
public List<int> IntTakeCount(int[] numbers, int n) { List<int> firstNNumbers = numbers.Take(n).ToList(); return firstNNumbers; }
public List<string> StringTake() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstNNumbers = words.Take(3).ToList(); return firstNNumbers; }
public List<string> LongStringTake() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> first3Words = words.Where(w => w.Length > 5).Take(3).ToList(); return first3Words; }
public List<int> StringLengthTake() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> first3Words = words.Select(w => w.Length).Take(3).ToList(); return first3Words; }
public List<string> StringTakeCount(int n) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstNWords = words.Take(n).ToList(); return firstNWords; }
public List<string> StringTakeCount(string[] strings, int n) { List<string> firstNWords = strings.Take(n).ToList(); return firstNWords; }
public List<Product> ProductTake() { List<Product> products = GetProductList(); List<Product> first3Products = products.Take(3).ToList(); return first3Products; }
public List<Product> ExpensiveProductTake() { List<Product> products = GetProductList(); List<Product> first3Products = products.Where(p => p.UnitPrice > 100).Take(3).ToList(); return first3Products; }
public List<Product> InStockProductTake() { List<Product> products = GetProductList(); List<Product> first3Products = products.Where(p => p.UnitsInStock > 0).Take(3).ToList(); return first3Products; }
public Dictionary<string, List<Product>> ProductGroupTake() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> first3Groups = products.GroupBy(p => p.Category) .Take(3).ToDictionary(g => g.Key, g => g.ToList()); return first3Groups; }
public Dictionary<string, List<Product>> ProductEachGroupTake() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> first3EachGroups = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Take(3).ToList()); return first3EachGroups; }
public List<Order> CustomerOrdersTake() { List<Customer> customers = GetCustomerList(); List<Order> first3Orders = customers.SelectMany(c => c.Orders) .Take(3).ToList(); return first3Orders; }
public List<Tuple<string, DateTime>> CustomerOrdersNestedTake() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> first3Orders = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Take(3).ToList(); return first3Orders; }
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedTake() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> first3EachOrders = customers .SelectMany(c => c.Orders.Take(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return first3EachOrders; }
public List<Tuple<string, DateTime>> WaCustomerOrdersNestedTake() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> first3WAOrders = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Take(3).ToList(); return first3WAOrders; }
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedTake() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> first3EachWAOrders = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.Take(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return first3EachWAOrders; }
public List<int> IntTakeWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.TakeWhile(i => i > 3).ToList(); return firstNumbersWhile; }
public List<int> OddIntTakeWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.Where(i => i % 2 == 1).TakeWhile(i => i > 3).ToList(); return firstNumbersWhile; }
public List<int> IntSquareTakeWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.Select(i => i * i).TakeWhile(i => i > 3).ToList(); return firstNumbersWhile; }
public List<int> IntTakeWhileCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.TakeWhile(i => i > n).ToList(); return firstNumbersWhile; }
public List<int> IntTakeWhileCount(int[] numbers, int n) { List<int> firstNumbersWhile = numbers.TakeWhile(i => i > n).ToList(); return firstNumbersWhile; }
public List<string> StringTakeWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstWordsWhile = words.TakeWhile(w => w[0] > 'b').ToList(); return firstWordsWhile; }
public List<string> LongStringTakeWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstWordsWhile = words.Where(w => w.Length > 5).TakeWhile(w => w[0] > 'b').ToList(); return firstWordsWhile; }
public List<int> StringLengthTakeWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> firstWordsWhile = words.Select(w => w.Length).TakeWhile(n => n > 5).ToList(); return firstWordsWhile; }
public List<string> StringTakeWhileCount(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstWordsWhile = words.TakeWhile(w => w[0] > c).ToList(); return firstWordsWhile; }
public List<string> StringTakeWhileCount(string[] strings, char c) { List<string> firstWordsWhile = strings.TakeWhile(w => w[0] > c).ToList(); return firstWordsWhile; }
public List<Product> ProductTakeWhile() { List<Product> products = GetProductList(); List<Product> firstProductsWhile = products.TakeWhile(p => p.ProductId > 100).ToList(); return firstProductsWhile; }
public List<Product> ExpensiveProductTakeWhile() { List<Product> products = GetProductList(); List<Product> firstProductsWhile = products.Where(p => p.UnitPrice > 100).TakeWhile(p => p.ProductId > 100).ToList(); return firstProductsWhile; }
public List<Product> InStockProductTakeWhile() { List<Product> products = GetProductList(); List<Product> firstProductsWhile = products.Where(p => p.UnitsInStock > 0).TakeWhile(p => p.ProductId > 100).ToList(); return firstProductsWhile; }
public Dictionary<string, List<Product>> ProductGroupTakeWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> firstGroupsWhile = products.GroupBy(p => p.Category) .TakeWhile(g => g.Key.Length > 6).ToDictionary(g => g.Key, g => g.ToList()); return firstGroupsWhile; }
public Dictionary<string, List<Product>> ProductEachGroupTakeWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> firstEachGroupsWhile = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.TakeWhile(p => p.ProductId > 100).ToList()); return firstEachGroupsWhile; }
public List<Order> CustomerOrdersTakeWhile() { List<Customer> customers = GetCustomerList(); List<Order> firstOrdersWhile = customers.SelectMany(c => c.Orders) .TakeWhile(o => o.OrderDate > new DateTime(2000, 1, 1)).ToList(); return firstOrdersWhile; }
public List<Tuple<string, DateTime>> CustomerOrdersNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersWhile = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).TakeWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return firstOrdersWhile; }
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersEachWhile = customers .SelectMany(c => c.Orders.TakeWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return firstOrdersEachWhile; }
public List<Tuple<string, DateTime>> WaCustomerOrdersNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).TakeWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return firstOrdersWhile; }
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersEachWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.TakeWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return firstOrdersEachWhile; }
public List<int> IntTakeWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbers = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
public List<int> IntSquareTakeWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbers = numbers.Select(i => i * i).TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
public List<double> IntSqrtSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<double> afterNumbers = numbers.Select(i => Math.Sqrt(i)).TakeWhile((n, i) => n > i).ToList(); return afterNumbers; }
public List<int> IntTakeWhileIndexedCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbers = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
public List<int> IntTakeWhileIndexedCount(int[] numbers, int n) { List<int> firstNumbers = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
public List<double> DoubleOrderbyFractionThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<double> DoubleOrderbyModThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<double> DoubleOrderbyFractionDescendingThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<double> DoubleOrderbyModDescendingThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<double> DoubleOrderbyFractionThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<double> DoubleOrderbyModThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<double> DoubleOrderbyFractionDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<double> DoubleOrderbyModDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<double> BigDoubleOrderbyFractionThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<double> BigDoubleOrderbyModThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<double> BigDoubleOrderbyFractionDescendingThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderByDescending(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<double> BigDoubleOrderbyModDescendingThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderByDescending(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }
public List<double> BigDoubleOrderbyFractionThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<double> BigDoubleOrderbyModThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<double> BigDoubleOrderbyFractionDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderByDescending(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<double> BigDoubleOrderbyModDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderByDescending(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
public List<string> StringOrderbyLengthThenby() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w.Length).ThenBy(w=>w).ToList(); return sortedWords; }
public List<string> StringOrderbyThenbyLength() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w).ThenBy(w=>w.Length).ToList(); return sortedWords; }
public List<string> StringOrderbyLengthCustomThenby() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()).ThenBy(w=>w).ToList(); return sortedWords; }
public List<string> StringOrderbyThenbyLengthCustom() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w) .ThenBy(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyLengthThenbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length).ThenBy(w=>w,new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyCustomThenbyLength() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w,new CaseInsensitiveComparer()) .ThenBy(w=>w.Length).ToList(); return sortedWords; }
public List<string> StringOrderbyLengthCustomThenbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()).ThenBy(w=>w,new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyCustomThenbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w,new CaseInsensitiveComparer()) .ThenBy(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyThenbyLengthDescendingCustom() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w) .ThenByDescending(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyLengthThenbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length) .ThenByDescending(w=>w,new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyLengthCustomThenbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()). ThenByDescending(w=>w,new CaseInsensitiveComparer()).ToList(); return sortedWords; }
public List<string> StringOrderbyCustomThenbyLengthDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w,new CaseInsensitiveComparer()) .ThenByDescending(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
public List<Product> ProductOrderbyCategoryThenbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenBy(p=>p.ProductId).ToList(); return sortedProducts; }
public List<Product> ProductOrderbyCategoryThenbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenBy(p=>p.ProductName).ToList(); return sortedProducts; }
public List<Product> ProductOrderbyCategoryThenbyDescendingId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenByDescending(p=>p.ProductId).ToList(); return sortedProducts; }
public List<Product> ProductOrderbyCategoryThenbyDescendingName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenByDescending(p=>p.ProductName).ToList(); return sortedProducts; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category).ThenBy(p=>p.ProductId).ToList(); return sortedProducts; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category).ThenBy(p=>p.ProductName).ToList(); return sortedProducts; }
public List<Product> ProductOrderbyCategoryThenbyIdCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category) .ThenBy(p=>p.ProductId,new CustomNumberComparer()).ToList(); return sortedProducts; }
public List<Product> ProductOrderbyCategoryThenbyNameCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category) .ThenBy(p=>p.ProductName,new CaseInsensitiveComparer()).ToList(); return sortedProducts; }
public List<Product> ProductOrderbyCategoryThenbyDescendingIdCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category) .ThenByDescending(p=>p.ProductId,new CustomNumberComparer()).ToList(); return sortedProducts; }
public List<Product> ProductOrderbyCategoryThenbyDescendingNameCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category) .ThenByDescending(p=>p.ProductName,new CaseInsensitiveComparer()).ToList(); return sortedProducts; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyIdCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category) .ThenBy(p=>p.ProductId,new CustomNumberComparer()).ToList(); return sortedProducts; }
public List<Product> ExpensiveProductOrderbyCategoryThenbyNameCustom() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.Category) .ThenBy(p=>p.ProductName,new CaseInsensitiveComparer()).ToList(); return sortedProducts; }
public List<int> IntIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Where((n,i)=>n<i).ToList(); return q; }
public List<int> OddIntIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Where(i => i % 2 == 1).Where((n,i)=>n<i).ToList(); return q; }
public List<int> OddIntOriginalIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Where((n,i)=>n<i&&n % 2 == 1).ToList(); return q; }
public List<int> IntSquareIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Select(i => i * i).Where((n,i)=>n<i).ToList(); return q; }
public List<int> IntWithSquareIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Where((n,i)=>n<i*i).ToList(); return q; }
public List<string> StringIndexedWhere() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> q = words.Where((w,i)=>w.Length<i).ToList(); return q; }
public List<string> LongStringIndexedWhere() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> q =words.Where(w=>w.Length>5).Where((w,i)=>w.Length<i*3).ToList(); return q; }
public List<string> LongStringOrginalIndexedWhere() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> q = words.Where((w,i)=>w.Length<i*3&&w.Length>5).ToList(); return q; }
public List<Product> ProductIndexedWhere() { List<Product> products = GetProductList(); List<Product> q = products.Where((w,i)=>w.UnitsInStock>0&&i%2==1).ToList(); return q; }
public List<Product> ExpensiveProductIndexedWhere() { List<Product> products = GetProductList(); List<Product> q = products.Where((w,i)=>w.UnitPrice>100&&i%2==1).ToList(); return q; }
