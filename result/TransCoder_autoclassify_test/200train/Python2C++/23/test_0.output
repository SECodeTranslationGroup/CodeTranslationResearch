void firstFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) { int allocation [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( blockSize [ j ] >= processSize [ i ] ) { allocation [ i ] = j ; blockSize [ j ] -= processSize [ i ] ; break ; } } } cout << " ▁ Process ▁ No . ▁ Process ▁ Size ▁ ▁ ▁ ▁ ▁ ▁ " << processSize [ n ] << " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ " << endl ; for ( int i = 0 ; i < n ; i ++ ) { cout << " ▁ " << i + 1 << " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ " << processSize [ i ] << " ▁ ▁ ▁ ▁ ▁ ▁ " << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; } }
int firstNonRepeating ( int arr [ ] , int n ) { map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; for ( int i = 0 ; i < n ; i ++ ) if ( mp [ arr [ i ] ] == 1 ) return arr [ i ] ; return - 1 ; }
bool distributingBalls ( int k , int n , string str ) { int a [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) a [ str [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) if ( a [ i ] > k ) return false ; return true ; }
int count_of_ways ( int n ) { int count = 0 ; count = ( n + 1 ) * ( n + 2 ) / 2 ; return count ; }
int calcAngle ( int h , int m ) { if ( h < 0 || m < 0 || h > 12 || m > 60 ) cout << ' Wrong ▁ input ' << endl ; if ( h == 12 ) h = 0 ; if ( m == 60 ) m = 0 ; double hour_angle = 0.5 * ( h * 60 + m ) ; double minute_angle = 6 * m ; double angle = abs ( hour_angle - minute_angle ) ; angle = min ( 360 - angle , angle ) ; return angle ; }
int smallest ( int x , int y , int z ) { if ( ! ( y / x ) ) return y ; if ( ! ( x / z ) ) return x ; if ( ! ( x / z ) ) return y ; return x if ( ! ( x / z ) ) else z ; }
char findExtraCharcter ( string strA , string strB ) { int res = 0 ; for ( int i = 0 ; i < strA . length ( ) ; i ++ ) res = res ^ ( char ) ( strA [ i ] ) ; for ( int i = 0 ; i < strB . length ( ) ; i ++ ) res = res ^ ( char ) ( strB [ i ] ) ; return ( ( char ) ( res ) ) ; }
int findMinimumAngle ( int arr [ ] , int n ) { int l = 0 ; int _sum = 0 ; int ans = 360 ; for ( int i = 0 ; i < n ; i ++ ) { _sum += arr [ i ] ; while ( _sum >= 180 ) { ans = min ( ans , 2 * abs ( 180 - _sum ) ) ; _sum -= arr [ l ] ; l ++ ; } ans = min ( ans , 2 * abs ( 180 - _sum ) ) ; } return ans ; }
int maxdiff ( int arr [ ] , int n ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i ] > arr [ j ] ) ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] ) ; else if ( freq [ arr [ i ] ] < freq [ arr [ j ] ] && arr [ i ] < arr [ j ] ) ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] ) ; } } } return ans ; }
bool areEqual ( int arr1 [ ] , int arr2 [ ] , int n , int m ) { if ( n != m ) return false ; sort ( arr1 , arr1 + n ) ; sort ( arr2 , arr2 + m ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return false ; return true ; }
int PowerOFPINnfactorial ( int n , int p ) { int ans = 0 ; int temp = p ; while ( temp <= n ) { ans += n / temp ; temp = temp * p ; } return ans ; }
int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == x ) return i ; return - 1 ; }
bool isSubSeqDivisible ( string str ) { int n = str . length ( ) ; int dp [ n + 1 ] [ 10 ] ; int arr [ n + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 1 ; i < n + 1 ; i ++ ) arr [ i ] = str [ i - 1 ] ; for ( int i = 1 ; i < n + 1 ; i ++ ) { dp [ i ] [ arr [ i ] % 8 ] = 1 ; for ( int j = 0 ; j < 8 ; j ++ ) { if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ] ; if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } } for ( int i = 1 ; i < n + 1 ; i ++ ) if ( dp [ i ] [ 0 ] == 1 ) return true ; return false ; }
int multiplyWith3Point5 ( int x ) { return ( x << 1 ) + x + ( x >> 1 ) ; }
int countDivisibleSubseq ( char * str , int n ) { int l = strlen ( str ) ; int dp [ l ] [ n ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ ( * str ) - '0' ] ++ ; for ( int i = 1 ; i < l ; i ++ ) { dp [ i ] [ ( * str ) - '0' ] ++ ; for ( int j = 0 ; j < n ; j ++ ) dp [ i ] [ ( * str ) - '0' ] ++ ; for ( int j = 0 ; j < n ; j ++ ) dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ; } return dp [ l - 1 ] [ 0 ] ; }
void pairs ( int arr [ ] , int n , int k ) { int smallest = INT_MAX ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( abs ( arr [ i ] + arr [ j ] - k ) < smallest ) smallest = abs ( arr [ i ] + arr [ j ] - k ) ; count = 1 ; else if ( abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++ ; } } cout << " Minimal ▁ Value ▁ = ▁ " << smallest << " Total ▁ Pairs ▁ = ▁ " << count << endl ; }
int maxLen ( int arr [ ] ) { unordered_map < int , int > hash_map ; int max_len = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < arr . length ( ) ; i ++ ) { curr_sum += arr [ i ] ; if ( arr [ i ] is 0 && max_len is 0 ) { max_len = 1 ; } if ( curr_sum is 0 ) { max_len = i + 1 ; } if ( hash_map [ curr_sum ] ) { max_len = max ( max_len , i - hash_map [ curr_sum ] ) ; } else hash_map [ curr_sum ] = i ; } return max_len ; }
int maxLength ( string s , int n ) { int dp [ n ] [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( s [ i ] == ' ( ' && s [ i + 1 ] == ' ) ' ) dp [ i ] [ i + 1 ] = 2 ; for ( int l = 2 ; l < n ; l ++ ) { int i = - 1 ; for ( int j = l ; j < n ; j ++ ) { if ( s [ i ] == ' ( ' && s [ j ] == ' ) ' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ] ; for ( int k = i ; k <= j - 1 ; k ++ ) dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] ) ; } } return dp [ 0 ] [ n - 1 ] ; }
long long int summingSeries ( int n ) { return pow ( n , 2 ) ; }
int moduloMultiplication ( int a , int b , int mod ) { int res = 0 ; a = a % mod ; while ( b ) { if ( b & 1 ) res = ( res + a ) % mod ; a = ( 2 * a ) % mod ; b >>= 1 ; } return res ; }
int largestPower ( int n , int p ) { int x = 0 ; while ( n ) { n /= p ; x += n ; } return x ; }
int getOddOccurrence ( int arr [ ] ) { int res = 0 ; for ( int element = 0 ; element < arr . size ( ) ; element ++ ) res = res ^ element ; return res ; }
double findArea ( double a ) { double area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) * a * a ) / 4 ; return area ; }
int countRotationsDivBy8 ( int n [ ] ) { int l = n . length ( ) ; int count = 0 ; if ( l == 1 ) { int oneDigit = n [ 0 ] ; if ( oneDigit % 8 == 0 ) return 1 ; return 0 ; } if ( l == 2 ) { int first = n [ 0 ] * 10 + int ( n [ 1 ] ) ; int second = n [ 1 ] * 10 + int ( n [ 0 ] ) ; if ( first % 8 == 0 ) count ++ ; if ( second % 8 == 0 ) count ++ ; } int threeDigit = 0 ; for ( int i = 0 ; i < ( l - 2 ) ; i ++ ) { threeDigit = ( int ( n [ i ] ) * 100 + int ( n [ i + 1 ] ) * 10 + int ( n [ i + 2 ] ) ) ; if ( threeDigit % 8 == 0 ) count ++ ; } threeDigit = ( int ( n [ l - 1 ] ) * 100 + int ( n [ 0 ] ) * 10 + int ( n [ 1 ] ) ) ; if ( threeDigit % 8 == 0 ) count ++ ; return count ; }
int editDistDP ( string str1 , string str2 , int m , int n ) { int dp [ m + 1 ] [ n + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 ) dp [ i ] [ j ] = j ; else if ( j == 0 ) dp [ i ] [ j ] = i ; else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; } } } return dp [ m ] [ n ] ; }
bool isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) pow = pow * x ; return ( pow == y ) ; }
int maxSum ( int arr [ ] , int N , int k ) { int MS [ N ] ; MS [ 0 ] = arr [ 0 ] ; MS [ N - 1 ] = arr [ N - 1 ] ; for ( int i = N - 2 ; i >= 0 ; i -- ) { if ( i + k + 1 >= N ) MS [ i ] = max ( arr [ i ] , MS [ i + 1 ] ) ; else MS [ i ] = max ( arr [ i ] + MS [ i + k + 1 ] , MS [ i + 1 ] ) ; } return MS [ 0 ] ; }
void printGrouped ( char * str ) { int n = strlen ( str ) ; int count [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) count [ * ( str + i ) - " a " ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { while ( count [ * ( str + i ) - " a " ] ) cout << str [ i ] ; count [ * ( str + i ) - " a " ] -- ; } count [ * ( str + i ) - " a " ] = 0 ; }
int countSub ( char ss [ ] ) { int last [ MAX_CHAR + 1 ] ; int n = strlen ( ss ) ; int dp [ n + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] = 2 * dp [ i - 1 ] ; if ( last [ ss [ i - 1 ] ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ ss [ i - 1 ] ] ; last [ ss [ i - 1 ] ] = i - 1 ; } return dp [ n ] ; }
void findLIS ( int A [ ] , int n ) { unordered_map < int , int > hash ; int LIS_size = 1 , LIS_index = 0 ; hash [ A [ 0 ] ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( hash [ A [ i ] - 1 ] == 0 ) hash [ A [ i ] - 1 ] = 1 ; hash [ A [ i ] ] ++ ; if ( LIS_size < hash [ A [ i ] ] ) { LIS_size = hash [ A [ i ] ] ; LIS_index = A [ i ] ; } } cout << " LIS _ size ▁ = ▁ " << LIS_size << " ▁ " << LIS_index << endl ; for ( int start = LIS_index - LIS_size + 1 ; start <= LIS_index ; start ++ ) cout << start << " ▁ ▁ " ; }
int maximumZeros ( int arr [ ] , int n , int k ) { int subset [ k + 1 ] [ MAX5 + 5 ] ; subset [ 0 ] [ 0 ] = 0 ; for ( int p = 0 ; p < n ; ++ p ) { int pw2 = 0 , pw5 = 0 ; while ( ! p % 2 ) pw2 ++ ; p /= 2 ; while ( ! p % 5 ) pw5 ++ ; p /= 5 ; } int i = k - 1 ; for ( int j = 0 ; j < MAX5 ; ++ j ) { if ( subset [ i ] [ j ] != - 1 ) subset [ i + 1 ] [ j + pw5 ] = ( max ( subset [ i + 1 ] [ j + pw5 ] , ( subset [ i ] [ j ] + pw2 ) ) ; } } int ans = 0 ; for ( int i = 0 ; i < MAX5 ; ++ i ) ans = max ( ans , min ( i , subset [ k ] [ i ] ) ) ; return ans ; }
int maxDiff ( int arr [ ] , int n ) { int result = 0 ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) result += abs ( arr [ i ] ) ; else pass ; if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += abs ( arr [ n - 1 ] ) ; return result ; }
int countNums ( int n , int x , int y ) { bool arr [ n + 2 ] ; if ( x <= n ) arr [ x ] = true ; if ( y <= n ) arr [ y ] = true ; int result = 0 ; for ( int i = min ( x , y ) ; i <= n ; i ++ ) { if ( arr [ i ] ) { if ( i + x <= n ) arr [ i + x ] = true ; if ( i + y <= n ) arr [ i + y ] = true ; result ++ ; } } return result ; }
int countPS ( char * str ) { int N = strlen ( str ) ; int cps [ N ] [ N + 2 ] ; for ( int i = 0 ; i < N ; i ++ ) cps [ i ] [ i ] = 1 ; for ( int L = 2 ; L <= N ; L ++ ) { for ( int i = 0 ; i < N ; i ++ ) { int k ; for ( k = L + i - 1 ; k < N ; k ++ ) { if ( str [ i ] == str [ k ] ) cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] + 1 ) ; else cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] - cps [ i + 1 ] [ k - 1 ] ) ; } } } return cps [ 0 ] [ N - 1 ] ; }
unsigned int countSetBits ( unsigned int n ) { if ( n == 0 ) return 0 ; else return ( n & 1 ) + countSetBits ( n >> 1 ) ; }
int numofAP ( int a [ ] , int n ) { int minarr = INT_MIN , maxarr = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { minarr = min ( minarr , a [ i ] ) ; maxarr = max ( maxarr , a [ i ] ) ; } int dp [ n + 1 ] ; int ans = n + 1 ; for ( int d = ( minarr - maxarr ) ; d <= ( maxarr - minarr ) ; d ++ ) { int sum [ MAX + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] = 1 ; if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ] ; ans += dp [ i ] - 1 ; sum [ a [ i ] ] += dp [ i ] ; } } return ans ; }
void spiralFill ( int m , int n , int a [ R ] [ C ] ) { int val = 1 ; int k = 0 , l = 0 ; while ( k < m && l < n ) { for ( int i = l ; i < n ; i ++ ) a [ k ] [ i ] = val ; val ++ ; } k ++ ; for ( int i = k ; i < m ; i ++ ) a [ i ] [ n - 1 ] = val ; val ++ ; } if ( k < m ) { for ( int i = n - 1 ; i >= l ; i -- ) a [ m - 1 ] [ i ] = val ; val ++ ; } if ( l < n ) { for ( int i = m - 1 ; i >= k ; i -- ) a [ i ] [ l ] = val ; val ++ ; } l ++ ; } }
void printClosest ( int ar1 [ ] , int ar2 [ ] , int m , int n , int x ) { int diff = INT_MAX ; int l = 0 , r = n - 1 ; while ( l < m && r >= 0 ) { if ( abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) { res_l = l ; res_r = r ; diff = abs ( ar1 [ l ] + ar2 [ r ] - x ) ; if ( ar1 [ l ] + ar2 [ r ] > x ) r -- ; else l ++ ; } } cout << " The ▁ closest ▁ pair ▁ is ▁ [ ▁ " << ar1 [ res_l ] << " , ▁ " << ar2 [ res_r ] << " ] " ; }
int findInteger ( int arr [ ] , int n ) { unordered_map < int , int > hash ; int maximum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < 0 ) hash [ abs ( i ) ] = - 1 ; else hash [ abs ( i ) ] -- ; } else hash [ i ] = hash . find ( i , 0 ) + 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i in hash . keys ( ) && hash [ i ] > 0 ) return i ; } return - 1 ; }
int decimalToBinary ( int N ) { int B_Number = 0 ; int cnt = 0 ; while ( N != 0 ) { int rem = N % 2 ; int c = pow ( 10 , cnt ) ; B_Number += rem * c ; N /= 2 ; cnt ++ ; } return B_Number ; }
int Right_most_setbit ( int num ) { int pos = 1 ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { if ( ! ( num & ( 1 << i ) ) ) pos ++ ; else break ; } return pos ; }
int countDigits ( int a , int b ) { if ( a == 0 || b == 0 ) return 1 ; return floor ( log10 ( abs ( a ) ) + log10 ( abs ( b ) ) ) + 1 ; }
int CountWays ( int n ) { int table [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) table [ j ] += table [ j - i ] ; } return table [ n ] ; }
void twoWaySort ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] & 1 ) arr [ i ] *= - 1 ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] & 1 ) arr [ i ] *= - 1 ; }
void factorize ( int n ) { int count = 0 ; while ( ( n % 2 > 0 ) == false ) n >>= 1 ; count ++ ; for ( int i = 3 ; i <= sqrt ( n ) ; i ++ ) { count = 0 ; while ( n % i == 0 ) count ++ ; n = n / i ; if ( count > 0 ) cout << i << count ; } if ( n > 2 ) cout << n << 1 ; }
int findSmallestDifference ( int A [ ] , int B [ ] , int m , int n ) { sort ( A , A + m ) ; sort ( B , B + n ) ; int result = INT_MAX ; while ( a < m && b < n ) { if ( abs ( A [ a ] - B [ b ] ) < result ) result = abs ( A [ a ] - B [ b ] ) ; if ( A [ a ] < B [ b ] ) a ++ ; else b ++ ; } return result ; }
bool isPath ( int arr [ ] [ ROW ] ) { arr [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < row ; i ++ ) { if ( arr [ i ] [ 0 ] != - 1 ) arr [ i ] [ 0 ] = arr [ i - 1 ] [ 0 ] ; } for ( int j = 1 ; j < col ; j ++ ) if ( arr [ 0 ] [ j ] != - 1 ) arr [ 0 ] [ j ] = arr [ 0 ] [ j - 1 ] ; for ( int i = 1 ; i < row ; i ++ ) { for ( int j = 1 ; j < col ; j ++ ) { if ( arr [ i ] [ j ] != - 1 ) arr [ i ] [ j ] = max ( arr [ i ] [ j - 1 ] , arr [ i - 1 ] [ j ] ) ; } } return ( arr [ row - 1 ] [ col - 1 ] == 1 ) ; }
int solve ( int dp [ ] [ MAX ] , int a [ ] , int low , int high , int turn ) { if ( low == high ) return a [ low ] * turn ; if ( dp [ low ] [ high ] ) return dp [ low ] [ high ] ; dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp , a , low + 1 , high , turn + 1 ) , a [ high ] * turn + solve ( dp , a , low , high - 1 , turn + 1 ) ) ; return dp [ low ] [ high ] ; }
unsigned int swapNibbles ( unsigned int x ) { return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ; }
int countPS ( int i , int j ) { if ( i >= n || j < 0 ) return 0 ; if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ; if ( abs ( i - j ) == 1 ) { if ( str [ i ] == str [ j ] ) dp [ i ] [ j ] = 3 ; return dp [ i ] [ j ] ; } else dp [ i ] [ j ] = 2 ; return dp [ i ] [ j ] ; }
int addOne ( int x ) { int m = 1 ; while ( x & m ) { x = x ^ m ; m <<= 1 ; } x = x ^ m ; return x ; }
bool check ( char * str ) { int n = strlen ( str ) ; int digitSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) digitSum = digitSum + ( int ) str [ i ] ; return ( digitSum % 9 == 0 ) ; }
int findMaxGCD ( int arr [ ] , int n ) { int high = 0 ; for ( int i = 0 ; i < n ; ++ i ) { high = max ( high , arr [ i ] ) ; i ++ ; } int divisors [ high + 1 ] ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 1 ; j <= sqrt ( arr [ i ] ) ; ++ j ) { if ( arr [ i ] % j == 0 ) divisors [ j ] = divisors [ j ] + 1 ; if ( j != arr [ i ] / j ) divisors [ arr [ i ] / j ] = divisors [ arr [ i ] / j ] ; } } i = high ; while ( i >= 1 ) if ( divisors [ i ] > 1 ) return i ; i = i - 1 ; return 1 ; }
int minRemove ( int arr [ ] , int n ) { int LIS [ n ] ; int len = 0 ; for ( int i = 0 ; i < n ; i ++ ) LIS [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 ) ; } return ( n - len ) ; }
void computeLPSArray ( char pat [ ] , int M , int lps [ ] ) { int len = 0 ; lps [ 0 ] = 0 ; int i = 1 ; while ( i < M ) { if ( pat [ i ] == pat [ len ] ) { len ++ ; lps [ i ] = len ; i ++ ; } else { if ( len != 0 ) len = lps [ len - 1 ] ; else lps [ i ] = 0 ; i ++ ; } } }
int numofsubset ( int arr [ ] , int n ) { int x [ n ] ; sort ( x , arr + n ) ; int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( x [ i ] + 1 != x [ i + 1 ] ) count ++ ; } return count ; }
int stringReduction ( string str ) { int n = str . length ( ) ; int count [ 3 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) count [ str [ i ] - ' a ' ] ++ ; if ( count [ 0 ] == n || count [ 1 ] == n || count [ 2 ] == n ) return n ; if ( count [ 0 ] % 2 == ( count [ 1 ] % 2 ) && ( count [ 1 ] % 2 ) == ( count [ 2 ] % 2 ) ) return 2 ; return 1 ; }
int KnapSack ( int val [ ] , int wt [ ] , int n ) { int dp [ W + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = W ; j >= wt [ i ] ; j -- ) dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ; } return dp [ W ] ; }
int findSum ( int n ) { int multiTerms = n * ( n + 1 ) / 2 ; int sm = multiTerms ; for ( int i = 2 ; i <= n ; i ++ ) { multiTerms = multiTerms - ( i - 1 ) ; sm = sm + multiTerms * i ; } return sm ; }
int getSingle ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { int sm = 0 ; int x = ( 1 << i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] & x ) sm ++ ; if ( sm % 3 ) result |= x ; } } return result ; }
bool allCharactersSame ( string s ) { int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) if ( s [ i ] != s [ 0 ] ) return false ; return true ; }
int maxDecimalValue ( int mat [ ] [ N ] , int i , int j , int p ) { if ( i >= N || j >= N ) return 0 ; int result = max ( maxDecimalValue ( mat , i , j + 1 , p + 1 ) , maxDecimalValue ( mat , i + 1 , j , p + 1 ) ) ; if ( mat [ i ] [ j ] == 1 ) return pow ( 2 , p ) + result ; else return result ; }
int countBT ( int h ) { int MOD = 1000000007 ; int dp [ h + 1 ] ; dp [ 0 ] = 1 , dp [ 1 ] = 1 ; for ( int i = 2 ; i <= h ; i ++ ) dp [ i ] = dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ; return dp [ h ] ; }
int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; }
int swapBits ( int x , int p1 , int p2 , int n ) { int set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) ; int set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) ; int xor = ( set1 ^ set2 ) ; xor = ( xor << p1 ) | ( xor << p2 ) ; result = x ^ xor ; return result ; }
void findElements ( int arr [ ] , int n ) { int first = INT_MAX ; int second = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) { second = arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < second ) cout << arr [ i ] << " ▁ " ; } }
int findMaximum ( int arr [ ] , int low , int high ) { int max = arr [ low ] ; int i ; for ( i = low ; i <= high ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } return max ; }
int longestPrefixSuffix ( string s ) { int n = s . length ( ) ; int lps [ n ] ; int l = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == s [ l ] ) { l ++ ; lps [ i ] = l ; i ++ ; } else { if ( l != 0 ) l = lps [ l - 1 ] ; else lps [ i ] = 0 ; i ++ ; } } int res = lps [ n - 1 ] ; if ( res > n / 2 ) return n / 2 ; else return res ; }
int MaxTotalRectangleArea ( int a [ ] , int n ) { vector < int > oneTwoThree ; sort ( a , a + n ) ; int sum = 0 ; int flag = false ; int len = 0 ; int i = 0 ; while ( i < n - 1 ) { if ( i != 0 ) i ++ ; if ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) flag = true ; else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && flag == true ) { sum = sum + a [ i + 1 ] * len ; flag = false ; i = i + 1 ; } } return sum ; }
bool isHeap ( int arr [ ] , int i , int n ) { if ( i > ( n - 2 ) / 2 ) return true ; if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 * i + 2 ] && isHeap ( arr , 2 * i + 1 , n ) && isHeap ( arr , 2 * i + 2 , n ) ) return true ; return false ; }
int findLength ( char str [ ] ) { int total [ n + 1 ] ; memset ( total , 0 , sizeof total ) ; for ( int i = 1 ; i <= n ; i ++ ) total [ i ] = ( total [ i - 1 ] + str [ i - 1 ] - '0' ) ; int ans = 0 ; for ( int l = 2 ; l <= n ; l ++ ) { for ( int i = 0 ; i <= n - l + 1 ; i ++ ) { int j = i + l - 1 ; if ( total [ i + l ] - total [ i ] == total [ i + l ] - total [ i + int ( l / 2 ) ] ) ans = max ( ans , l ) ; } } return ans ; }
int maxDP ( int n ) { int res [ n + 1 ] ; res . push_back ( 0 ) ; res . push_back ( 1 ) ; int i = 2 ; while ( i < n + 1 ) { res . push_back ( max ( i , ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) ) ; i ++ ; } return res [ n ] ; }
int findDiff ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int count = 0 , max_count = 0 , min_count = n ; for ( int i = 0 ; i < ( n - 1 ) ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) count ++ ; continue ; } else { max_count = max ( max_count , count ) ; min_count = min ( min_count , count ) ; count = 0 ; } } return max_count - min_count ; }
int countSink ( int n , int m , int edgeFrom [ ] , int edgeTo [ ] ) { int mark [ n + 1 ] ; memset ( mark , 0 , sizeof ( mark ) ) ; for ( int i = 0 ; i < m ; i ++ ) mark [ edgeFrom [ i ] ] = 1 ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( ! mark [ i ] ) count ++ ; return count ; }
int countOfSubstringWithKOnes ( string s , int K ) { int N = s . length ( ) ; int res = 0 ; int countOfOne = 0 ; int freq [ N + 1 ] = { 0 } ; freq [ 0 ] = 1 ; for ( int i = 0 ; i <= N ; i ++ ) { countOfOne += s [ i ] - '0' ; if ( countOfOne >= K ) res += freq [ countOfOne - K ] ; freq [ countOfOne ] ++ ; } return res ; }
int search ( int arr [ ] , int n , int x ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == x ) return i ; return - 1 ; }
int binaryToDecimal ( string n ) { string num = n ; int dec_value = 0 ; int base1 = 1 ; int len1 = num . length ( ) ; for ( int i = len1 - 1 ; i >= 0 ; i -- ) { if ( num [ i ] == '1' ) dec_value += base1 ; base1 = base1 * 2 ; } return dec_value ; }
string compute ( char * str , int n ) { string reverseAlphabet = " zyxwvutsrqponmlkjihgfedcba " ; int l = strlen ( str ) ; string answer = " " ; for ( int i = 0 ; i < n ; i ++ ) answer = answer + str [ i ] ; for ( int i = 0 ; i < l ; i ++ ) answer = answer + reverseAlphabet [ * ( str + i ) - ' a ' ] ; return answer ; }
int countPairs ( string & str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( abs ( str [ i ] - str [ j ] ) == abs ( i - j ) ) result ++ ; } return result ; }
bool flipsPossible ( int a [ ] , int n ) { int count_odd = 0 , count_even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] & 1 ) count_odd ++ ; else count_even ++ ; } if ( count_odd % 2 && count_even % 2 ) return false ; else return true ; }
int maxSumPairWithDifferenceLessThanK ( int arr [ ] , int N , int K ) { sort ( arr , arr + N ) ; int dp [ N ] ; dp [ 0 ] = 0 ; for ( int i = 1 ; i < N ; i ++ ) { dp [ i ] = dp [ i - 1 ] ; if ( arr [ i ] - arr [ i - 1 ] < K ) { if ( i >= 2 ) dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ; else dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ; } } return dp [ N - 1 ] ; }
void kSmallestPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 , int k ) { if ( k > n1 * n2 ) cout << " k ▁ pairs ▁ don ' t ▁ exist " ; int index2 [ n1 ] ; for ( int i = 0 ; i < n1 ; i ++ ) index2 [ i ] = 0 ; while ( k > 0 ) { int min_sum = INT_MAX ; int min_index = INT_MAX ; for ( int i1 = 0 ; i1 < n1 ; i1 ++ ) { if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) { min_index = i1 ; min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ; } } cout << " ( " << arr1 [ min_index ] << " , ▁ " << arr2 [ index2 [ min_index ] << " ) " << endl ; index2 [ min_index ] ++ ; k -- ; } }
void assign ( int a [ ] , int n ) { sort ( a , a + n ) ; int ans [ n ] ; int p = 0 , q = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i + 1 % 2 == 0 ) { ans [ i ] = a [ q ] ; q = q - 1 ; } else ans [ i ] = a [ p ] ; p = p + 1 ; } for ( int i = 0 ; i < n ; i ++ ) cout << ans [ i ] << " ▁ " ; }
int findFourElements ( int arr [ ] , int n ) { map < int , int > mp ; for ( int i = 0 ; i < n - 1 ; i ++ ) mp [ arr [ i ] + arr [ j ] ] = ( i , j ) ; int d = INT_MIN ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int abs_diff = abs ( arr [ i ] - arr [ j ] ) ; if ( abs_diff in mp . keys ( ) ) { int p = mp [ abs_diff ] ; if ( p [ 0 ] != i && p [ 0 ] != j && p [ 1 ] != i && p [ 1 ] != j ) d = max ( d , max ( arr [ i ] , arr [ j ] ) ) ; } } } return d ; }
bool isPrime ( int p ) { int checkNumber = 2 * p - 1 ; int nextval = 4 % checkNumber ; for ( int i = 1 ; i <= p - 2 ; i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber ; if ( nextval == 0 ) return true ; else return false ; }
bool isPalindrome ( string str ) { int l = 0 , h = str . length ( ) - 1 ; while ( h > l ) { l ++ ; h -- ; if ( str [ l - 1 ] != str [ h + 1 ] ) return false ; } return true ; }
int maxNumOfChocolates ( int arr [ ] , int n , int k ) { int um [ n ] , curr_rem , maxSum ; int sm [ n ] ; sm [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) sm [ i ] = sm [ i - 1 ] + arr [ i ] ; for ( int i = 1 ; i < n ; i ++ ) { curr_rem = sm [ i ] % k ; if ( ! curr_rem && maxSum < sm [ i ] ) maxSum = sm [ i ] ; else if ( ! um [ curr_rem ] ) um [ curr_rem ] = i ; else if ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) maxSum = sm [ i ] - sm [ um [ curr_rem ] ] ; } return maxSum / k ; }
bool isPower ( double x , double y ) { double res1 = log ( y ) / log ( x ) ; double res2 = log ( y ) / log ( x ) ; return 1 if ( res1 == res2 ) else 0 ; }
void minMaxValues ( int arr [ ] , int n , int m ) { int sum = 0 ; int INF = 1000000000 ; int MAX = 50 ; for ( int i = 0 ; i < ( n + m ) ; i ++ ) { sum += arr [ i ] ; arr [ i ] += 50 ; } int dp [ MAX * MAX + 1 ] [ MAX + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < ( n + m ) ; i ++ ) { for ( int k = min ( n , i + 1 ) ; k >= 0 ; k -- ) { for ( int j = 0 ; j <= MAX * MAX ; j ++ ) { if ( dp [ k - 1 ] [ j ] ) dp [ k ] [ j + arr [ i ] ] = 1 ; } } int max_value = INT_MIN ; min_value = INT_MAX ; for ( int i = 0 ; i < MAX * MAX + 1 ; i ++ ) { if ( dp [ n ] [ i ] ) { temp = i - 50 * n ; max_value = max ( max_value , temp * ( sum - temp ) ) ; min_value = min ( min_value , temp * ( sum - temp ) ) ; } } cout << " Maximum ▁ Value : ▁ { } \n Minimum ▁ Value : ▁ { } " ; }
int superSeq ( int X [ ] , int Y [ ] , int m , int n ) { if ( ! m ) return n ; if ( ! n ) return m ; if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + superSeq ( X , Y , m - 1 , n - 1 ) ; return min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) ) ; }
int longSubarrWthSumDivByK ( int arr [ ] , int n , int k ) { unordered_map < int , int > um ; int mod_arr [ n ] ; int max = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k ; } for ( int i = 0 ; i < n ; i ++ ) { if ( mod_arr [ i ] == 0 ) max = i + 1 ; else if ( um [ mod_arr [ i ] ] == i ) um [ mod_arr [ i ] ] = i ; else if ( max < ( i - um [ mod_arr [ i ] ] ) ) max = i - um [ mod_arr [ i ] ] ; } return max ; }
int arrangeBraces ( int n , int pos [ ] , int k ) { bool h [ N ] ; int dp [ N ] [ N ] ; memset ( h , false , sizeof ( h ) ) ; for ( int i = 0 ; i < k ; i ++ ) h [ pos [ i ] ] = 1 ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= 2 * n ; i ++ ) { for ( int j = 2 * n ; j <= 2 * n ; j ++ ) { if ( h [ i ] ) { if ( j != 0 ) dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] ) ; else dp [ i ] [ j ] = 0 ; } } } return dp [ 2 * n ] [ 0 ] ; }
string lexSmallest ( string a [ ] , int n ) { sort ( a , a + n ) ; string answer = " " ; for ( int i = 0 ; i < n ; i ++ ) answer += a [ i ] ; return answer ; }
int subset ( int ar [ ] , int n ) { int res = 0 ; sort ( ar , ar + n ) ; for ( int i = 0 ; i < n ; i ++ ) { int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( ar [ i ] == ar [ i + 1 ] ) count ++ ; else break ; res = max ( res , count ) ; } return res ; }
string printSubStr ( string str , int low , int high ) { printf ( " % s \n " , str ) ; printf ( " \n " ) ; }
int getMinSquares ( int n ) { int dp [ n + 1 ] ; dp [ 0 ] = 1 , 2 = 3 ; for ( int i = 4 ; i <= n ; i ++ ) { dp . push_back ( i ) ; for ( int x = 1 ; x <= ceil ( sqrt ( i ) ) ; x ++ ) { int temp = x * x ; if ( temp > i ) break ; else dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] ) ; } } return dp [ n ] ; }
void printClosest ( int arr [ ] , int n , int x ) { int res_l , res_r = 0 , diff = 0 , l = n - 1 , r = MAX_VAL ; while ( r > l ) { if ( abs ( arr [ l ] + arr [ r ] - x ) < diff ) { res_l = l ; res_r = r ; diff = abs ( arr [ l ] + arr [ r ] - x ) ; } if ( arr [ l ] + arr [ r ] > x ) r -- ; else l ++ ; } cout << ' The ▁ closest ▁ pair ▁ is ▁ { } ▁ and ▁ { } ' . format ( arr [ res_l ] , arr [ res_r ] ) ; }
int countSubStr ( char str [ ] ) { int m = 0 ; for ( int i = 0 ; str [ i ] != ' \0' ; i ++ ) if ( str [ i ] == '1' ) m ++ ; return m * ( m - 1 ) / 2 ; }
int countSubstringWithEqualEnds ( string s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( s [ i ] == s [ j ] ) result ++ ; } return result ; }
int calcMaxValue ( string str ) { int res = str [ 0 ] - 48 ; for ( int i = 1 ; i < str . size ( ) ; i ++ ) { if ( str [ i ] == '0' || str [ i ] == '1' || res < 2 ) res += ( str [ i ] - 48 ) ; else res *= ( str [ i ] - 48 ) ; } return res ; }
void bestFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) { int allocation [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int bestIdx = - 1 ; for ( int j = 0 ; j < m ; j ++ ) { if ( blockSize [ j ] >= processSize [ i ] ) bestIdx = j ; else if ( blockSize [ bestIdx ] > blockSize [ j ] ) bestIdx = j ; } } if ( bestIdx != - 1 ) { allocation [ i ] = bestIdx ; blockSize [ bestIdx ] -= processSize [ i ] ; } cout << " Process ▁ No . ▁ Process ▁ Size ▁ ▁ ▁ ▁ Block ▁ no . " << endl ; for ( int i = 0 ; i < n ; i ++ ) { cout << i + 1 << " ▁ ▁ ▁ ▁ ▁ ▁ ▁ " << processSize [ i ] << " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ " << endl ; if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; } }
void countFreq ( int a [ ] , int n ) { unordered_map < int , int > hm ; for ( int i = 0 ; i < n ; i ++ ) hm [ a [ i ] ] ++ ; int cumul = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cumul += hm [ a [ i ] ] ; if ( hm [ a [ i ] ] > 0 ) cout << a [ i ] << " - > " << cumul << endl ; hm [ a [ i ] ] = 0 ; } }
bool isSubSeqDivisible ( int str [ ] ) { int l = strlen ( str ) ; int arr [ l ] ; for ( int i = 0 ; i < l ; i ++ ) { for ( int j = i ; j < l ; j ++ ) { for ( int k = j ; k < l ; k ++ ) { if ( arr [ i ] % 8 == 0 ) return true ; else if ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 && i != j ) return true ; else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 && i != j ) return true ; else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 && i != j && j != k && i != k ) return true ; } } } return false ; }
unsigned int getAbs ( unsigned int n ) { unsigned int mask = n >> ( SIZE_INT * CHARBIT - 1 ) ; return ( ( n + mask ) ^ mask ) ; }
bool isAnBn ( string str ) { int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( str [ i ] != ' a ' ) break ; if ( i * 2 != n ) return false ; for ( int j = i ; j < n ; j ++ ) if ( str [ j ] != ' b ' ) return false ; return true ; }
int maxDistance ( int arr [ ] , int n ) { map < int , int > mp ; int maxDict = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . find ( arr [ i ] ) == mp . end ( ) ) mp [ arr [ i ] ] = i ; else maxDict = max ( maxDict , i - mp [ arr [ i ] ] ) ; } return maxDict ; }
int maxSumWO3Consec ( int arr [ ] , int n ) { int sum [ n ] ; if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ; if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ; if ( n > 2 ) sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) ) ; for ( int i = 3 ; i < n ; i ++ ) sum [ i ] = max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] ) ; return sum [ n - 1 ] ; }
int nobleInteger ( int arr [ ] ) { sort ( arr , arr + n ) ; int n = arr . size ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) continue ; if ( arr [ i ] == n - i - 1 ) return arr [ i ] ; } if ( arr [ n - 1 ] == 0 ) return arr [ n - 1 ] ; return - 1 ; }
void productArray ( int arr [ ] , int n ) { if ( n == 1 ) cout << 0 ; return ; } int prod [ n ] ; int temp = 1 ; for ( int i = 0 ; i < n ; i ++ ) prod [ i ] = temp ; temp *= arr [ i ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) prod [ i ] *= temp ; temp = 1 ; for ( int i = 0 ; i < n - 1 ; i -- ) { prod [ i ] *= temp ; temp *= arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) cout << prod [ i ] << " ▁ " ; }
bool sortedAfterSwap ( int A [ ] , int B [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( B [ i ] == 1 ) { int j = i ; while ( B [ j ] == 1 ) j ++ ; A [ i ] = A [ j + 1 ] ; i = j ; } } for ( int i = 0 ; i < n ; i ++ ) if ( A [ i ] != i + 1 ) return false ; return true ; }
int maxSubarrayXOR ( int arr [ ] , int n ) { int ans = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) { int curr_xor = 0 ; for ( int j = i ; j < n ; j ++ ) curr_xor = curr_xor ^ arr [ j ] ; ans = max ( ans , curr_xor ) ; } return ans ; }
int minRemovalsDP ( int arr [ ] , int n ) { int longest_start = - 1 , longest_end = 0 ; for ( int start = 0 ; start < n ; start ++ ) { int min = INT_MAX ; int max = INT_MAX ; for ( int end = start ; end < n ; end ++ ) { int val = arr [ end ] ; if ( val < min ) min = val ; if ( val > max ) max = val ; if ( 2 * min <= max ) break ; if ( end - start > longest_end - longest_start || longest_start == - 1 ) { longest_start = start ; longest_end = end ; } } } if ( longest_start == - 1 ) return n ; return ( longest_end - longest_start + 1 ) ; }
double surface_area_octahedron ( int side ) { return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) ) ; }
int countUnique ( int mat [ ] [ MAX ] , int n , int m ) { int rowsum [ n ] = { 0 } , colsum [ m ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != 0 ) rowsum [ i ] ++ ; colsum [ j ] ++ ; } } int uniquecount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) if ( mat [ i ] [ j ] != 0 && rowsum [ i ] == 1 && colsum [ j ] == 1 ) uniquecount ++ ; } return uniquecount ; }
int remainder ( char str [ ] ) { int ln = strlen ( str ) ; int rem = 0 ; for ( int i = 0 ; i < ln ; i ++ ) { int num = rem * 10 + ( int ) str [ i ] - '0' ; rem = num % 11 ; } return rem ; }
bool checkReverse ( int arr [ ] , int n ) { if ( n == 1 ) return true ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) if ( i == n ) return true ; } int j = i ; while ( arr [ j ] < arr [ j - 1 ] ) { if ( i > 1 && arr [ j ] < arr [ i - 2 ] ) return false ; j ++ ; } int k = j ; if ( arr [ k ] < arr [ i - 1 ] ) return false ; while ( k > 1 && k < n ) { if ( arr [ k ] < arr [ k - 1 ] ) return false ; k ++ ; } return true ; }
double vol_of_octahedron ( int side ) { return ( ( side * side * side ) * ( sqrt ( 2 ) / 3 ) ) ; }
int maxDifference ( int arr [ ] , int N , int k ) { int S = 0 , S1 = 0 ; int max_difference = 0 ; for ( int i = 0 ; i < N ; i ++ ) S += arr [ i ] ; sort ( arr , arr + N ) ; int M = max ( k , N - k ) ; for ( int i = 0 ; i < M ; i ++ ) S1 += arr [ i ] ; max_difference = S1 - ( S - S1 ) ; return max_difference ; }
int maxSumSubarrayRemovingOneEle ( int arr [ ] , int n ) { int fw [ n ] ; int bw [ n ] ; int cur_max , max_so_far = arr [ 0 ] , arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { cur_max = max ( arr [ i ] , cur_max + arr [ i ] ) ; max_so_far = max ( max_so_far , cur_max ) ; fw [ i ] = cur_max ; } cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { cur_max = max ( arr [ i ] , cur_max + arr [ i ] ) ; max_so_far = max ( max_so_far , cur_max ) ; bw [ i ] = cur_max ; } fans = max_so_far ; for ( int i = 1 ; i < n - 1 ; i ++ ) fans = max ( fans , fw [ i - 1 ] + bw [ i + 1 ] ) ; return fans ; }
void findMaxPoints ( int A [ ] [ N ] ) { int P1S [ N ] [ M + 2 ] ; int P1E [ N ] [ M + 2 ] ; int P2S [ N ] [ M + 2 ] ; int P2E [ N ] [ M + 2 ] ; memset ( P1S , 0 , sizeof ( P1S ) ) ; memset ( P1E , 0 , sizeof ( P1E ) ) ; memset ( P2S , 0 , sizeof ( P2S ) ) ; memset ( P2E , 0 , sizeof ( P2E ) ) ; for ( int i = 1 ; i < N + 1 ; i ++ ) { for ( int j = 1 ; j < M + 1 ; j ++ ) { P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ; } } for ( int i = 0 ; i < N + 1 ; i ++ ) { for ( int j = 1 ; j < M + 1 ; j ++ ) { P2S [ i ] [ j ] = max ( P2S [ i + 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ; } } int ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ; } } ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { for ( int j = 2 ; j < N ; j ++ ) { ans = max ( P2E [ i ] [ j ] , P2E [ i ] [ j ] , P2E [ i ] [ j + 1 ] ) + 1 ] ) + A [ i - 1 ] ) ; } } ans = ans ; } return ans ; }
int KnapSack ( int val [ ] , int wt [ ] , int n , int W ) { int mat [ W + 1 ] [ n + 1 ] ; memset ( mat , 0 , sizeof ( mat ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int j ; if ( i % 2 == 0 ) { while ( j < W ) { j ++ ; if ( wt [ i ] <= j ) mat [ 1 ] [ j ] = max ( val [ i ] + mat [ 0 ] [ j - wt [ i ] , mat [ 0 ] [ j ] ) ; else mat [ 1 ] [ j ] = mat [ 0 ] [ j ] ; } } else { while ( j < W ) { j ++ ; if ( wt [ i ] <= j ) mat [ 0 ] [ j ] = max ( val [ i ] + mat [ 1 ] [ j - wt [ i ] ] , mat [ 1 ] [ j ] ) ; else mat [ 0 ] [ j ] = mat [ 1 ] [ j ] ; } } } if ( n % 2 == 0 ) return mat [ 0 ] [ W ] ; else return mat [ 1 ] [ W ] ; }
bool isHeap ( int arr [ ] , int n ) { for ( int i = 0 ; i <= ( n - 2 ) / 2 ; i ++ ) { if ( arr [ 2 * i + 1 ] > arr [ i ] ) return false ; if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) return false ; } return true ; }
void maxProduct ( int arr [ ] , int n ) { if ( n < 2 ) cout << " No ▁ pairs ▁ exists " ; if ( n == 2 ) cout << arr [ 0 ] << " ▁ " << arr [ 1 ] << endl ; int posa = 0 , posb = 0 , nega = 0 , negb = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > posa ) { posb = posa ; posa = arr [ i ] ; } else if ( arr [ i ] > posb ) { negb = nega ; nega = arr [ i ] ; } else if ( arr [ i ] < 0 and abs ( arr [ i ] ) > abs ( nega ) ) { negb = nega ; nega = arr [ i ] ; } else if ( arr [ i ] < 0 and abs ( arr [ i ] ) > abs ( negb ) ) { negb = arr [ i ] ; } } if ( nega * negb > posa * posb ) { cout << " Max ▁ product ▁ pair ▁ is ▁ " << nega << " ▁ " << negb << endl ; } else { cout << " Max ▁ product ▁ pair ▁ is ▁ " << posa << " ▁ " << posb << endl ; } }
int superSeq ( int X [ ] , int Y [ ] , int m , int n ) { int dp [ m + 2 ] [ n + 2 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( ! i ) dp [ i ] [ j ] = j ; else if ( ! j ) dp [ i ] [ j ] = i ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } return dp [ m ] [ n ] ; }
int minJumps ( int arr [ ] , int n ) { int jumps [ n ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] == 0 ) jumps [ i ] = float ( ' inf ' ) ; else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ; else { int min = INT_MAX ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( min > jumps [ j ] ) min = jumps [ j ] ; } } if ( min != float ( ' inf ' ) ) jumps [ i ] = min + 1 ; else jumps [ i ] = min ; } } return jumps [ 0 ] ; }
int minAdjustmentCost ( int A [ ] , int M , int n , int target ) { int dp [ M + 1 ] [ n + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i <= M ; i ++ ) dp [ 0 ] [ i ] = abs ( j - A [ 0 ] ) ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= M ; j ++ ) dp [ i ] [ j ] = INT_MAX ; for ( int k = max ( j - target , 0 ) ; k <= min ( M , j + target ) ; k ++ ) dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ i - 1 ] [ k ] + abs ( A [ i ] - j ) ) ; } int res = INT_MAX ; for ( int j = 0 ; j <= M ; j ++ ) res = min ( res , dp [ n - 1 ] [ j ] ) ; return res ; }
int kthSmallest ( int arr [ ] , int n , int k ) { sort ( arr , arr + n ) ; return arr [ k - 1 ] ; }
int lis ( int arr [ ] , int n ) { int maximum = 1 ; _lis ( arr , n ) ; return maximum ; }
int minCoins ( int coins [ ] , int m , int V ) { if ( V == 0 ) return 0 ; int res = INT_MAX ; for ( int i = 0 ; i < m ; i ++ ) { if ( coins [ i ] <= V ) { int sub_res = minCoins ( coins , m , V - coins [ i ] ) ; if ( sub_res != INT_MAX && sub_res + 1 < res ) res = sub_res + 1 ; } } return res ; }
int minimum_cost ( int a [ ] , int n ) { int mn = INT_MAX ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mn = min ( a [ i ] , mn ) ; sum += a [ i ] ; } return mn * ( sum - mn ) ; }
float getArea ( float a ) { float area = ( ( pi * a * a ) / 4 ) ; return area ; }
int evenFibSum ( int limit ) { if ( limit < 2 ) return 0 ; int ef1 = 0 , ef2 = 2 ; int sm = ef1 + ef2 ; while ( ef2 <= limit ) { int ef3 = 4 * ef2 + ef1 ; if ( ef3 > limit ) break ; ef1 = ef2 ; ef2 = ef3 ; sm = sm + ef2 ; } return sm ; }
int findSubArray ( int arr [ ] , int n ) { int sum = 0 ; int maxsize = - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum = sum + ( - 1 ) if ( arr [ i ] == 0 ) sum += 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) sum += 1 ; if ( sum == 0 && maxsize < j - i + 1 ) { maxsize = j - i + 1 ; startindex = i ; } } } if ( maxsize == - 1 ) cout << " No ▁ such ▁ subarray " ; else cout << startindex << " ▁ to ▁ " << startindex + maxsize - 1 ; return maxsize ; }
int largestSumOfAverages ( int A [ ] , int K ) { int n = A . size ( ) ; int pre_sum [ n + 1 ] = { 0 } ; pre_sum [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ; int dp [ n ] = 0 ; sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n - i ) ; for ( int k = 0 ; k <= K - 2 ; k ++ ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - pre_sum [ i ] ) / ( j - i ) + dp [ j ] ) ; } } return dp [ 0 ] ; }
int getMinSteps ( int n ) { int table [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) table [ i ] = n - i ; for ( int i = n ; i >= 0 ; i -- ) { if ( ! ( i % 2 ) ) table [ i / 2 ] = min ( table [ i ] + 1 , table [ i / 2 ] ) ; if ( ! ( i % 3 ) ) table [ i / 3 ] = min ( table [ i ] + 1 , table [ i / 3 ] ) ; } return table [ 1 ] ; }
int eggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) return k ; if ( n == 1 ) return k ; int min = INT_MAX ; for ( int x = 1 ; x <= k ; x ++ ) { int res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
int count ( const string & s , char c ) { int res = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s [ i ] == c ) res ++ ; return res ; }
int findLength ( string str , int n ) { int sum [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = ( sum [ i - 1 ] + str [ i - 1 ] ) ; int ans = 0 ; for ( int length = 2 ; length <= n ; length ++ ) { for ( int i = 0 ; i <= n - length + 1 ; i ++ ) { int j = i + length - 1 ; if ( sum [ i + length ] - sum [ i ] == sum [ i + length ] - sum [ i + length / 2 ] ) ans = max ( ans , length ) ; } } return ans ; }
int maximumNumberDistinctPrimeRange ( int m , int n ) { int factorCount [ n + 1 ] ; bool prime [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { factorCount [ i ] = 0 ; prime [ i ] = true ; } for ( int i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] == true ) factorCount [ i ] = 1 ; for ( int j = i * 2 ; j <= n ; j ++ ) factorCount [ j ] ++ ; prime [ j ] = false ; } } int max = factorCount [ m ] ; int num = m ; for ( int i = m ; i <= n ; i ++ ) { if ( factorCount [ i ] > max ) max = factorCount [ i ] ; num = i ; } return num ; }
int catalan ( int n ) { if ( n <= 1 ) return 1 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res += catalan ( i ) * catalan ( n - i - 1 ) ; return res ; }
int minRevolutions ( int r , int x1 , int y1 , int x2 , int y2 ) { double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ; return ceil ( d / ( 2 * r ) ) ; }
int largestKSubmatrix ( int a [ ] [ Row ] ) { int dp [ Row ] [ Col ] ; int result = 0 ; for ( int i = 0 ; i < Row ; i ++ ) { for ( int j = 0 ; j < Col ; j ++ ) { if ( i == 0 || j == 0 ) dp [ i ] [ j ] = 1 ; else if ( a [ i ] [ j ] == a [ i - 1 ] [ j ] && a [ i ] [ j ] == a [ i - 1 ] [ j - 1 ] ) dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + 1 ; else dp [ i ] [ j ] = 1 ; } } result = max ( result , dp [ i ] [ j ] ) ; } return result ; }
int cassini ( int n ) { return ( n & 1 ) ? - 1 : 1 ; }
int waysToArrange ( int N , int K , int k ) { int C [ N + 1 ] [ N + 1 ] ; memset ( C , 0 , sizeof ( C ) ) ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ) ; } } int dp [ K ] = { 0 } ; for ( int i = 0 ; i <= K ; i ++ ) dp [ i + 1 ] = dp [ i ] * C [ count + k [ i ] - 1 ] [ k [ i ] - 1 ] ; count += k [ i ] ; } return dp [ K ] ; }
void findDimen ( int H , int A ) { if ( H * H < 4 * A ) cout << " Not ▁ Possible " ; return ; } int apb = sqrt ( H * H + 4 * A ) ; int asb = sqrt ( H * H - 4 * A ) ; cout << " P ▁ = ▁ " << " % .2f " << ( apb - asb ) / 2.0 ; cout << " B ▁ = ▁ " << " % .2f " << ( apb + asb ) / 2.0 ; }
int maxTripletSum ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ) ; }
int MaxDotProduct ( int A [ ] , int B [ ] , int m , int n ) { int dp [ n + 1 ] [ m + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= m ; j ++ ) dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] ) ; } return dp [ n ] [ m ] ; }
int findMinDiff ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int diff = INT_MAX ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [ i + 1 ] - arr [ i ] ; } return diff ; }
int findLastIndex ( string str , int x ) { for ( int i = str . length ( ) - 1 ; i >= 0 ; i -- ) if ( str [ i ] == x ) return i ; return - 1 ; }
int maxLower ( string str ) { int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( str [ i ] >= ' A ' && str [ i ] <= ' Z ' ) break ; int maxCount = 0 ; int count [ MAX_CHAR ] ; for ( int j = 0 ; j < MAX_CHAR ; j ++ ) count . push_back ( 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( str [ j ] >= ' A ' && str [ j ] <= ' Z ' ) { int currCount = 0 ; for ( int k = 0 ; k < MAX_CHAR ; k ++ ) if ( count [ k ] > 0 ) currCount ++ ; maxCount = max ( maxCount , currCount ) ; for ( int y = 0 ; y < count . size ( ) ; y ++ ) count [ str [ j ] - ' a ' ] ++ ; } } return maxCount ; }
int evenlength ( int n ) { int res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; j -- ) res += n [ j ] ; return res ; }
int maxLen ( int arr [ ] , int n ) { unordered_map < int , int > hash_map ; int curr_sum = 0 ; int max_len = 0 ; int ending_index = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) arr [ i ] = - 1 ; else arr [ i ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { curr_sum = curr_sum + arr [ i ] ; if ( curr_sum == 0 ) { max_len = i + 1 ; ending_index = i ; } if ( hash_map . find ( curr_sum + n ) != hash_map . end ( ) ) { max_len = max ( max_len , i - hash_map [ curr_sum + n ] ) ; } else hash_map [ curr_sum ] = i ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == - 1 ) arr [ i ] = 0 ; else arr [ i ] = 1 ; } cout << ending_index - max_len + 1 << " ▁ ▁ " ; cout << " to ▁ " << ending_index << " ▁ " ; cout << ending_index << endl ; } return max_len ; }
double circumference ( double r ) { return ( 2 * PI * r ) ; }
void printDistinct ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) { while ( i < n - 1 && ( arr [ i ] == arr [ i + 1 ] ) ) i ++ ; } else cout << arr [ i ] << " ▁ " ; } }
int search ( int arr [ ] , int n , int x , int k ) { int i ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == x ) return i ; cout << " number ▁ is ▁ not ▁ present ! " ; return - 1 ; }
int countStrings ( int n ) { int a [ n ] = { 0 } , b [ n ] = { 0 } ; a [ 0 ] = b [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i - 1 ] + b [ i - 1 ] ; b [ i ] = a [ i - 1 ] ; } return a [ n - 1 ] + b [ n - 1 ] ; }
int minSum ( int arr [ ] , int n ) { int dp [ n ] ; if ( n == 1 ) return arr [ 0 ] ; if ( n == 2 ) return min ( arr [ 0 ] , arr [ 1 ] ) ; if ( n == 3 ) return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) ) ; if ( n == 4 ) return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) ) ; dp [ 0 ] = arr [ 0 ] ; dp [ 1 ] = arr [ 1 ] ; dp [ 2 ] = arr [ 2 ] ; dp [ 3 ] = arr [ 3 ] ; for ( int i = 4 ; i < n ; i ++ ) dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) ) ; return min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) ) ; }
string printSequence ( int arr [ ] , string input ) { int n = input . length ( ) ; string output = " " ; for ( int i = 0 ; i < n ; i ++ ) { if ( input [ i ] == ' ▁ ' ) output = output + "0" ; else { int position = ( input [ i ] - ' A ' ) ; output = output + arr [ position ] ; } } return output ; }
int maxcoefficientvalue ( int n ) { int C [ n + 1 ] [ n + 1 ] ; int i , j ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = min ( i , n ) ; j <= max ( i , n ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ) ; } } int maxvalue = 0 ; for ( int i = 0 ; i <= n ; i ++ ) maxvalue = max ( maxvalue , C [ n ] [ i ] ) ; return maxvalue ; }
int gcd ( int a , int b ) { if ( a < b ) return gcd ( b , a ) ; if ( abs ( b ) < 0.001 ) return a ; else return gcd ( b , a - floor ( a / b ) * b ) ; }
string sortByPattern ( string str , string pat ) { int count [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) count [ str [ i ] - 97 ] ++ ; int index = 0 ; str = " " ; for ( int i = 0 ; i < pat . length ( ) ; i ++ ) { int j = 0 ; while ( j < count [ pat [ i ] - ' a ' ] ) j ++ ; index ++ ; } return str ; }
int minJumps ( int arr [ ] , int n ) { int jumps [ n ] ; if ( n == 0 ) return float ( ' inf ' ) ; jumps [ 0 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { jumps [ i ] = float ( ' inf ' ) ; for ( int j = 0 ; j < i ; j ++ ) { if ( i <= j + arr [ j ] ) { jumps [ i ] = min ( jumps [ i ] , jumps [ j ] + 1 ) ; break ; } } } return jumps [ n - 1 ] ; }
int find_prob ( int n , int P ) { int dp [ n + 1 ] ; dp [ 0 ] = 1 , dp [ 1 ] = 0 ; dp [ 2 ] = P ; dp [ 3 ] = 1 - P ; for ( int i = 4 ; i <= N ; i ++ ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ] ; return dp [ N ] ; }
int countStrings ( int n ) { int a [ n ] = { 0 } , b [ n ] = { 0 } ; a [ 0 ] = b [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i - 1 ] + b [ i - 1 ] ; b [ i ] = a [ i - 1 ] ; } return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ; }
int maximumSegments ( int n , int a , int b , int c ) { int dp [ n + 10 ] ; dp [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] != - 1 ) { if ( i + a <= n ) dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] ) ; if ( i + b <= n ) dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] ) ; if ( i + c <= n ) dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] ) ; } } return dp [ n ] ; }
int countWords ( char * str , int l ) { int count = 1 ; if ( l == 1 ) return count ; if ( str [ 0 ] == str [ 1 ] ) count *= 1 ; else count *= 2 ; for ( int j = 1 ; j <= l - 1 ; j ++ ) { if ( str [ j ] == str [ j - 1 ] && str [ j ] == str [ j + 1 ] ) count *= 1 ; else if ( str [ j ] == str [ j - 1 ] || str [ j ] == str [ j + 1 ] || str [ j - 1 ] == str [ j + 1 ] ) count *= 2 ; else count *= 3 ; } if ( str [ l - 1 ] == str [ l - 2 ] ) count *= 1 ; else count *= 2 ; } return count ; }
int findMinDiff ( int arr [ ] , int n ) { int diff = INT_MAX ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) < diff ) diff = abs ( arr [ i ] - arr [ j ] ) ; } return diff ; }
int maxSum ( int arr [ ] , int n ) { int res = - INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { int curr_sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { int index = ( i + j ) % n ; curr_sum += j * arr [ index ] ; res = max ( res , curr_sum ) ; } } return res ; }
float volumeOfEllipsoid ( float r1 , float r2 , float r3 ) { return ( 1.33 * math . pi * r1 * r2 * r3 ) ; }
int lcsOf3 ( int X [ ] , int Y [ ] , int Z [ ] , int m , int n , int o ) { int L [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= o ; k ++ ) { if ( i == 0 || j == 0 || k == 0 ) L [ i ] [ j ] [ k ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] && X [ i - 1 ] == Z [ k - 1 ] ) L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 ] + 1 ; else L [ i ] [ j ] [ k ] = max ( L [ i - 1 ] [ j ] [ k ] , L [ i ] [ j - 1 ] [ k ] ) ; } } } return L [ m ] [ n ] [ o ] ; }
int countEndless ( int input_mat [ ] [ n ] ) { int row [ n ] [ n ] ; int col [ n ] [ n ] ; memset ( row , 0 , sizeof row ) ; memset ( col , 0 , sizeof col ) ; for ( int i = 0 ; i < n - 1 ; ++ i ) { int isEndless = 1 ; for ( int j = n - 1 ; j >= 0 ; -- j ) { if ( input_mat [ i ] [ j ] == 0 ) isEndless = 0 ; row [ i ] [ j ] = isEndless ; } } int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 1 ; j < n ; ++ j ) if ( row [ i ] [ j ] && col [ i ] [ j ] ) ans ++ ; } return ans ; }
void NextFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) { int allocation [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { j = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( blockSize [ j ] >= processSize [ i ] ) { allocation [ i ] = j ; blockSize [ j ] -= processSize [ i ] ; break ; } j ++ ; } } cout << " Process ▁ No . ▁ Process ▁ Size ▁ Block ▁ no . " << endl ; for ( i = 0 ; i < n ; i ++ ) { cout << i + 1 << " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ " << processSize [ i ] << endl ; if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; } }
int lenOfLongestGP ( int sett [ ] , int n ) { if ( n < 2 ) return n ; if ( n == 2 ) return sett [ 1 ] % sett [ 0 ] == 0 ; sort ( sett , sett + n ) ; int llgp = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sett [ n - 1 ] % sett [ i ] == 0 ) L [ i ] [ n - 1 ] = 2 ; else L [ i ] [ n - 1 ] = 1 ; } for ( int j = n - 2 ; j >= 0 ; j -- ) { if ( sett [ i ] * sett [ k ] < sett [ j ] * sett [ j ] ) k ++ ; else if ( sett [ i ] * sett [ k ] > sett [ j ] * sett [ j ] ) { if ( sett [ j ] % sett [ i ] == 0 ) L [ i ] [ j ] = 2 ; else L [ i ] [ j ] = 1 ; } i -- ; } } return llgp ; }
bool checkValidity ( int a , int b , int c ) { if ( a + b <= c ) || a + c <= b || b + c <= a ) return false ; else return true ; }
bool isDDM ( int m [ ] [ MAX ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) sum = sum + abs ( m [ i ] [ j ] ) ; sum = sum - abs ( m [ i ] [ i ] ) ; if ( abs ( m [ i ] [ i ] ) < sum ) return false ; } return true ; }
int shortestDist ( int graph [ ] [ N ] ) { int dist [ N ] ; dist [ N - 1 ] = 0 ; for ( int i = N - 2 ; i >= 0 ; i -- ) { dist [ i ] = INF ; for ( int j = 0 ; j < N ; j ++ ) { if ( graph [ i ] [ j ] == INF ) continue ; dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] ) ; } } return dist [ 0 ] ; }
unsigned int calculateSum ( int n ) { unsigned int sum = 0 ; sum = 1 << n ; sum = 1 << sum ; return ( sum - 1 ) ; }
int kthdigit ( int a , int b , int k ) { int p = a ** b ; int count = 0 ; while ( p > 0 && count < k ) { int rem = p % 10 ; count ++ ; if ( count == k ) return rem ; p = p / 10 ; } }
bool isEven ( int n ) { return ( ! ( n & 1 ) ) ; }
void printPath ( string str ) { int i = 0 ; int curX = 0 ; int curY = 0 ; while ( i < str . size ( ) ) { int nextX = ( str [ i ] - ' A ' ) / 5 ; int nextY = ( str [ i ] - ' B ' ) + 1 ; while ( curX > nextX ) { cout << " Move ▁ Up " << curX -- ; } while ( curY > nextY ) { cout << " Move ▁ Left " << curY -- ; } while ( curX < nextX ) { cout << " Move ▁ Down " << curX ++ ; } while ( curY < nextY ) { cout << " Move ▁ Right " << curY ++ ; } cout << " Press ▁ OK " ; i ++ ; } }
bool checkcircle ( int r , int R , int r1 , int x1 , int y1 ) { int dis = sqrt ( x1 * x1 + y1 * y1 ) ; return ( dis - r1 >= R && dis + r1 <= r ) ; }
bool isMinHeap ( int level [ ] , int n ) { for ( int i = n / 2 - 1 ; i >= 0 ; i -- ) { if ( level [ i ] > level [ 2 * i + 1 ] ) return false ; if ( 2 * i + 2 < n ) if ( level [ i ] > level [ 2 * i + 2 ] ) return false ; } return true ; }
int countSetBits ( int n ) { int i = 0 ; int ans = 0 ; while ( ( 1 << i ) <= n ) { int k = 0 , change = 1 << i ; for ( int j = 0 ; j <= n ; j ++ ) { ans += k ; if ( change == 1 ) { k = ! k ; change = 1 << i ; } else change -- ; } i ++ ; } return ans ; }
int getPairsCount ( int arr [ ] , int n , int sum ) { int m [ 1000 ] ; memset ( m , 0 , sizeof m ) ; for ( int i = 0 ; i < n ; i ++ ) m [ arr [ i ] ] ++ ; int twice_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { twice_count += m [ sum - arr [ i ] ] ; if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ; } return twice_count / 2 ; }
void printSorted ( int a , int b , int c ) { int get_max = max ( a , max ( b , c ) ) ; int get_min = - max ( a , max ( b , - c ) ) ; int get_mid = ( a + b + c ) - ( get_max + get_min ) ; cout << get_min << " ▁ ▁ " << get_mid << " ▁ ▁ " << get_max << endl ; }
bool isDivisible ( int n ) { while ( n / 100 ) { int last_digit = n % 10 ; n = n / 10 ; n += last_digit * 3 ; } return ( n % 29 == 0 ) ; }
int minSumPath ( int A [ ] [ MAX ] ) { int memo [ MAX ] ; int n = ( int ) A . size ( ) - 1 ; for ( int i = 0 ; i < n ; i ++ ) memo [ i ] = A [ n ] [ i ] ; for ( int i = 0 ; i < ( int ) A . size ( ) - 2 ; i -- ) { for ( int j = 0 ; j < ( int ) A [ i ] . size ( ) ; j ++ ) memo [ j ] = A [ i ] [ j ] + min ( memo [ j ] , memo [ j + 1 ] ) ; } return memo [ 0 ] ; }
int minXOR ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int minXor = INT_MAX ; int val = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { val = arr [ i ] ^ arr [ i + 1 ] ; minXor = min ( minXor , val ) ; } return minXor ; }
void luDecomposition ( int mat [ ] [ n ] , int n ) { int lower [ n ] [ n ] ; int upper [ n ] [ n ] ; memset ( lower , 0 , sizeof lower ) ; memset ( upper , 0 , sizeof upper ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int k = i ; k < n ; k ++ ) { int sum = 0 ; for ( int j = 0 ; j < i ; j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ; upper [ i ] [ k ] = mat [ i ] [ k ] - sum ; } for ( int k = i ; k < n ; k ++ ) { int sum = 0 ; for ( int j = 0 ; j < i ; j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ; lower [ k ] [ i ] = int ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ; } } cout << " Lower ▁ Triangular\t\tUpper ▁ Triangular " << endl ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << lower [ i ] [ j ] << " \t " ; cout << upper [ i ] [ j ] << " \t " ; } cout << " \n " ; }
int findMinSum ( int a [ ] , int b [ ] , int n ) { sort ( a , a + n ) ; sort ( b , b + n ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + abs ( a [ i ] - b [ i ] ) ; return sum ; }
int minDist ( int arr [ ] , int n , int x , int y ) { int min_dist = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( ( x == arr [ i ] && y == arr [ j ] || y == arr [ i ] && x == arr [ j ] ) && min_dist > abs ( i - j ) ) min_dist = abs ( i - j ) ; } return min_dist ; }
void findSymPairs ( int arr [ ] [ MAX ] , int row ) { unordered_map < int , int > hM ; for ( int i = 0 ; i < row ; i ++ ) { int first = arr [ i ] [ 0 ] ; int sec = arr [ i ] [ 1 ] ; if ( hM . find ( sec ) != hM . end ( ) ) { cout << " ( " << sec << " , " << first << " ) " ; } else hM [ first ] = sec ; } }
bool isValidString ( string str ) { int freq [ CHARS ] = { 0 } ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) freq [ str [ i ] - ' a ' ] ++ ; int freq1 = 0 , count_freq1 = 0 ; for ( int i = 0 ; i < CHARS ; i ++ ) { if ( freq [ i ] != 0 ) { freq1 = freq [ i ] ; count_freq1 = 1 ; break ; } } int freq2 = 0 , count_freq2 = 0 ; for ( int j = i + 1 ; j < CHARS ; j ++ ) { if ( freq [ j ] == freq1 ) count_freq1 ++ ; else count_freq2 = 1 ; freq2 = freq [ j ] ; break ; } } for ( int k = j + 1 ; k < CHARS ; k ++ ) { if ( freq [ k ] == freq1 ) count_freq1 ++ ; if ( freq [ k ] == freq2 ) count_freq2 ++ ; else return false ; } if ( count_freq1 > 1 && count_freq2 > 1 ) return false ; }
void maximizecube ( int l , int b , int h ) { int side = gcd ( l , gcd ( b , h ) ) ; int num = l / side ; num = num * b / side ; num = num * h / side ; cout << side << num ; }
void rotate ( int arr [ ] , int n ) { int x = arr [ n - 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) arr [ i ] = arr [ i - 1 ] ; arr [ 0 ] = x ; }
void bonacciseries ( long n , int m ) { int a [ m ] = { 0 } ; a [ n - 1 ] = 1 ; a [ n ] = 1 ; for ( int i = n + 1 ; i < m ; i ++ ) a [ i ] = 2 * a [ i - 1 ] - a [ i - n - 1 ] ; for ( int i = 0 ; i < m ; i ++ ) cout << a [ i ] << " ▁ ▁ " ; }
int findoptimal ( int N ) { if ( N <= 6 ) return N ; int screen [ N ] ; for ( int n = 1 ; n <= 7 ; n ++ ) screen [ n - 1 ] = n ; for ( int n = 7 ; n <= N ; n ++ ) screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ; return screen [ N - 1 ] ; }
int fib ( int n ) { if ( n < 6 ) return f [ n ] ; int t = 5 ; int fn = 5 ; while ( t < n ) { fn = round ( fn * PHI ) ; t ++ ; } return fn ; }
int countWays ( int arr [ ] , int m , int N ) { int count [ N + 1 ] ; count [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ; } return count [ N ] ; }
float sumOfSeries ( int n ) { return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ) ; }
void findDivision ( char * str , int a , int b ) { int len = strlen ( str ) ; int lr [ len ] = { 0 } ; lr [ 0 ] = ( int ) str [ 0 ] ; for ( int i = 1 ; i < len ; i ++ ) lr [ i ] = ( lr [ i - 1 ] * 10 ) % a + \ int [ i ] ) % a ; int rl [ lenn - 1 ] = ( int ) str [ lenn - 1 ] ; int power10 = ( int ) ( str [ lenn - 1 ] ) % b ; for ( int i = 0 ; i < lenn - 2 ; i -- ) { if ( lr [ i ] != 0 ) continue ; if ( rl [ i + 1 ] == 0 ) { cout << " YES " << for ( int k = 0 ; k <= i ; k ++ ) cout << str [ k ] << " ▁ " << endl ; for ( int i = i + 1 ; i < lenn - 1 ; i ++ ) { rl [ i ] = ( rl [ i + 1 ] + int ( str [ i ] ) * power10 ; power10 = ( power10 * 10 ) % b ; } } cout << " NO " ; }
int count ( int a [ ] , int b [ ] ) { int m = strlen ( a ) , n = strlen ( b ) ; int lookup [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) lookup [ 0 ] [ i ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) lookup [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( a [ i - 1 ] == b [ j - 1 ] ) lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] + lookup [ i - 1 ] [ j ] ; else lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ] ; } } return lookup [ m ] [ n ] ; }
int find_extra_element_index ( int arrA [ ] , int arrB [ ] ) { int extra_element = ( sum ( arrA ) - sum ( arrB ) ) ; return arrA . index ( extra_element ) ; }
int sumNodes ( int l ) { unsigned int leafNodeCount = pow ( 2 , l - 1 ) ; int sumLastLevel = 0 ; sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ) ; int sum = sumLastLevel * l ; return sum ; }
bool check ( int degree [ ] , int n ) { int deg_sum = sum ( degree ) ; if ( 2 * ( n - 1 ) == deg_sum ) return true ; else return false ; }
void findCount ( int n , int sum ) { int start = pow ( 10 , n - 1 ) ; int end = pow ( 10 , n ) - 1 ; int count = 0 ; for ( int i = start ; i <= end ; i ++ ) { int cur = 0 ; int temp = i ; while ( temp != 0 ) { cur += temp % 10 ; temp = temp / 10 ; } if ( cur == sum ) count ++ ; i ++ ; } else cout << count << endl ; }
int smallest ( int x , int y , int z ) { int c = 0 ; while ( x && y && z ) { x = x - 1 ; y = y - 1 ; z = z - 1 ; c ++ ; } return c ; }
int longLenSub ( int arr [ ] , int n ) { unordered_map < int , int > um ; int longLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int len1 = 0 ; if ( arr [ i - 1 ] in um && len1 < um [ arr [ i ] - 1 ] ) len1 = um [ arr [ i ] - 1 ] ; if ( arr [ i ] + 1 ] in um [ arr [ i ] + 1 ] ) len1 = um [ arr [ i ] + 1 ] ; um [ arr [ i ] ] = len1 + 1 ; if ( longLen < um [ arr [ i ] ] ) longLen = um [ arr [ i ] ] ; } return longLen ; }
int minOperation ( int * arr ) { int ans = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { for ( int j = M - 1 ; j >= 0 ; j -- ) { if ( arr [ i ] [ j ] == 0 ) ans ++ ; for ( int k = i + 1 ; k <= j ; k ++ ) { for ( int h = 0 ; h <= j ; h ++ ) { if ( arr [ k ] [ h ] == 1 ) arr [ k ] [ h ] = 0 ; else arr [ k ] [ h ] = 1 ; } } } return ans ; }
int nextPowerOf2 ( int n ) { int p = 1 ; if ( n && ! ( n & ( n - 1 ) ) ) return n ; while ( p < n ) p <<= 1 ; return p ; }
int numberofways ( int n , int m ) { int dp [ n + 2 ] [ n + 2 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ n + 1 ] = 1 ; for ( int k = n ; k >= 0 ; k -- ) { for ( int i = n + 1 ; i <= m ; i ++ ) { dp [ i ] [ k ] = dp [ i ] [ k + 1 ] ; if ( i - k >= 0 ) dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i - k ] [ k ] ) ; } } return dp [ n ] [ m ] ; }
void generate_derangement ( int N ) { int S [ N + 1 ] ; int D [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) S [ i ] = i ; for ( int i = 1 ; i <= N ; i ++ ) D [ i ] = S [ i ] ; for ( int i = 1 ; i <= N ; i += 2 ) { if ( i == N ) D [ N ] = S [ N - 1 ] ; D [ N - 1 ] = S [ N ] ; else D [ i ] = i + 1 ; D [ i + 1 ] = i ; } } for ( int i = 1 ; i <= N ; i ++ ) cout << D [ i ] << " ▁ ▁ " ; cout << endl ; }
int countTriangle ( int g [ ] [ MAX ] , bool isDirected ) { int nodes = g . size ( ) ; int count_Triangle = 0 ; for ( int i = 0 ; i < nodes ; i ++ ) { for ( int j = 0 ; j < nodes ; j ++ ) { for ( int k = 0 ; k < nodes ; k ++ ) { if ( i != j && i != k && j != k && g [ i ] [ j ] && g [ j ] [ k ] && g [ k ] [ i ] ) count_Triangle ++ ; } } } return count_Triangle / 3 if ( isDirected ) count_Triangle / 6 ; }
int leonardo ( int n ) { if ( n == 0 || n == 1 ) return 1 ; return leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ; }
void findLargestPlus ( int mat [ N ] [ N ] ) { int left [ N ] [ N ] ; int right [ N ] [ N ] ; int top [ N ] [ N ] ; int bottom [ N ] [ N ] ; memset ( left , 0 , sizeof ( left ) ) ; memset ( right , 0 , sizeof ( right ) ) ; for ( int i = 0 ; i < N ; i ++ ) { top [ 0 ] [ i ] = mat [ 0 ] [ i ] ; bottom [ N - 1 ] [ i ] = mat [ N - 1 ] [ i ] ; left [ i ] [ 0 ] = mat [ i ] [ 0 ] ; right [ i ] [ N - 1 ] = mat [ i ] [ N - 1 ] ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j < N ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) left [ i ] [ j ] = left [ i ] [ j - 1 ] + 1 ; else top [ i ] [ j ] = 0 ; } if ( mat [ i ] [ j ] == 1 ) bottom [ j ] [ i ] = bottom [ j + 1 ] [ i ] + 1 ; else { bottom [ j ] [ i ] = 0 ; } } int n = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j < N ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) right [ i ] [ j ] = right [ i ] [ j + 1 ] + 1 ; else { right [ i ] [ j ] = 0 ; } } j = N - 1 - j ; } }
int sumAtKthLevel ( string tree , int k ) { int level = - 1 ; int sum = 0 ; int n = tree . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tree [ i ] == ' ( ' ) level ++ ; else if ( tree [ i ] == ' ( ' ) level -- ; else if ( level == k ) sum += ( tree [ i ] - '0' ) ; } return sum ; }
int countWays ( string s ) { int count [ 26 ] ; for ( int x = 0 ; x < s . length ( ) ; x ++ ) count [ x - ' a ' ] = ( count [ x ] - ' a ' ] ) + 1 ; int ans = 1 ; for ( int i = 0 ; i < 26 ; i ++ ) if ( count [ i ] != 0 ) ans *= count [ i ] ; return ans ; }
int countWays ( int n , int m ) { int count [ n + 2 ] ; for ( int i = 0 ; i <= n ; i ++ ) count . push_back ( 0 ) ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ] ; else if ( i < m ) count [ i ] = 1 ; else count [ i ] = 2 ; } return count [ n ] ; }
void printCommonElements ( int mat [ M ] [ N ] ) { map < int , int > mp ; for ( int i = 0 ; i < M ; i ++ ) mp [ mat [ 0 ] [ i ] ] = 1 ; for ( int i = 1 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( mp [ mat [ i ] [ j ] ] == i ) mp [ mat [ i ] [ j ] ] = i + 1 ; if ( i == M - 1 ) cout << mat [ i ] [ j ] << " ▁ " ; } } }
int nextPowerOf2 ( int n ) { int p = 1 ; if ( n && ! ( n & ( n - 1 ) ) ) return n ; while ( p < n ) p <<= 1 ; return p ; }
void longest ( char a [ ] , int n , int k ) { int freq [ n ] ; int start = 0 , end = 0 ; int now = 0 , l = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq [ a [ i ] ] ++ ; if ( freq [ a [ i ] ] == 1 ) now ++ ; while ( now > k ) { freq [ a [ l ] ] -- ; if ( freq [ a [ l ] ] == 0 ) now -- ; l ++ ; } if ( i - l + 1 >= end - start + 1 ) end = i ; start = l ; } for ( int i = start ; i <= end ; i ++ ) cout << a [ i ] << " ▁ " ; }
int findWays ( int m , int n , int x ) { int table [ n + 1 ] [ x + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) table [ i ] [ 0 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= x ; j ++ ) for ( int k = 1 ; k <= min ( m + 1 , j ) ; k ++ ) table [ i ] [ j ] += table [ i - 1 ] [ j - k ] ; } } return table [ - 1 ] [ - 1 ] ; }
bool checkCorrectOrNot ( string s ) { int count [ MAX_CHAR ] ; int n = s . length ( ) ; if ( n == 1 ) return true ; for ( int i = 0 , j = n - 1 ; i < j ; i ++ , j -- ) { count [ s [ i ] - ' a ' ] ++ ; count [ s [ j ] - ' a ' ] -- ; } for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( count [ i ] != 0 ) return false ; } return true ; }
int findnumberofTriangles ( int arr [ ] ) { int n = arr . size ( ) ; sort ( arr , arr + n ) ; int count = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { int k = i + 2 ; for ( int j = i + 1 ; j < n ; j ++ ) { while ( k < n && arr [ i ] + arr [ j ] > arr [ k ] ) k ++ ; if ( k > j ) count += k - j - 1 ; } } return count ; }
int countWays ( int n ) { int A [ n + 1 ] ; int B [ n + 1 ] ; A [ 0 ] = 1 , A [ 1 ] = 0 ; B [ 0 ] = 0 , B [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ; B [ i ] = A [ i - 1 ] + B [ i - 2 ] ; } return A [ n ] ; }
int minValue ( int A [ ] , int B [ ] , int n ) { sort ( A , A + n ) ; sort ( B , B + n ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) result += A [ i ] * B [ n - i - 1 ] ; return result ; }
bool isOneFlip ( string str ) { int sum = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) sum += ( str [ i ] - '0' ) ; return ( sum == n - 1 || sum == 1 ) ; }
int MatrixChainOrder ( int p [ ] , int i , int j ) { if ( i == j ) return 0 ; int _min = INT_MAX ; for ( int k = i ; k < j ; k ++ ) { int count = MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] ; if ( count < _min ) _min = count ; } return _min ; }
void worstFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) { int allocation [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int wstIdx = - 1 ; for ( int j = 0 ; j < m ; j ++ ) { if ( blockSize [ j ] >= processSize [ i ] ) wstIdx = j ; else if ( blockSize [ wstIdx ] < blockSize [ j ] ) wstIdx = j ; else if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; } }
void prefixSum2D ( int a [ R ] [ C ] ) { int psa [ C ] [ R ] ; psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( int i = 1 ; i < C ; i ++ ) psa [ 0 ] [ i ] = a [ 0 ] [ i ] ; for ( int i = 0 ; i < R ; i ++ ) psa [ i ] [ 0 ] = ( psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ) ; for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 1 ; j < C ; j ++ ) psa [ i ] [ j ] = ( psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ) ; } for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 0 ; j < C ; j ++ ) cout << psa [ i ] [ j ] << " ▁ ▁ " ; } cout << endl ; }
bool isMultipleOf3 ( int n ) { int odd_count = 0 , even_count = 0 ; if ( n < 0 ) n = - n ; if ( n == 0 ) return 1 ; if ( n == 1 ) return 0 ; while ( n ) { if ( n & 1 ) odd_count ++ ; if ( n & 2 ) even_count ++ ; n = n >> 2 ; } return isMultipleOf3 ( abs ( odd_count - even_count ) ) ; }
int longestSubsequenceCommonSegment ( int k , string s1 , string s2 ) { int n = s1 . length ( ) ; int m = s2 . length ( ) ; int lcs [ n + 1 ] [ m + 1 ] ; int cnt [ n + 1 ] [ m + 1 ] ; memset ( lcs , 0 , sizeof ( lcs ) ) ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { lcs [ i ] [ j ] = max ( lcs [ i - 1 ] [ j ] , lcs [ i ] [ j - 1 ] ) ; if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) cnt [ i ] [ j ] = cnt [ i - 1 ] [ j - 1 ] + 1 ; if ( cnt [ i ] [ j ] >= k ) { for ( int a = 0 ; a <= k ; a ++ ) lcs [ i ] [ j ] = max ( lcs [ i ] [ j ] , lcs [ i - a ] [ j - a ] + a ) ; } } } return lcs [ n ] [ m ] ; }
int lcsOf3 ( int i , int j , int k ) { if ( i == - 1 || j == - 1 || k == - 1 ) return 0 ; if ( dp [ i ] [ j ] [ k ] ) return dp [ i ] [ j ] [ k ] ; if ( X [ i ] == Y [ j ] && Y [ j ] == Z [ k ] ) { dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1 , k - 1 ) ; return dp [ i ] [ j ] [ k ] ; } else dp [ i ] [ j ] [ k ] = max ( lcsOf3 ( i - 1 , j , k ) , lcsOf3 ( i , j - 1 , k ) ) , lcsOf3 ( i , j , k - 1 ) ) ; return dp [ i ] [ j ] [ k ] ; }
void findLarger ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; for ( int i = 0 ; i < n / 2 ; i ++ ) cout << x [ i ] ; }
int maxProductSubset ( int a [ ] , int n ) { if ( n == 1 ) return a [ 0 ] ; int max_neg = INT_MIN , count_neg = 0 , count_zero = 0 , prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) count_zero ++ ; continue ; if ( a [ i ] < 0 ) count_neg ++ ; max_neg = max ( max_neg , a [ i ] ) ; prod *= a [ i ] ; } if ( count_zero == n ) return 0 ; if ( count_neg & 1 ) { if ( count_neg == 1 && count_zero > 0 && count_zero + count_neg == n ) return 0 ; prod = prod / max_neg ; } return prod ; }
int russianPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( b & 1 ) res += a ; a = a << 1 ; b = b >> 1 ; } return res ; }
int distance ( double lat1 , double lat2 , double lon1 , double lon2 ) { lon1 = radians ( lon1 ) ; lon2 = radians ( lon2 ) ; lat1 = radians ( lat1 ) ; lat2 = radians ( lat2 ) ; dlon = lon2 - lon1 ; dlat = lat2 - lat1 ; a = sin ( dlat / 2 ) * 2 + cos ( lat1 ) * cos ( lat2 ) * sin ( dlon / 2 ) ** 2 ; c = 2 * asin ( a ) ) ; r = 6371 ; return ( c * r ) ; }
bool isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; while ( n != 1 ) { if ( n % 2 != 0 ) return false ; n = n / 2 ; } return true ; }
void checkPoint ( double radius , double y , double percent , double startAngle ) { double endAngle = 360 / percent + startAngle ; double polarradius = sqrt ( x * x + y * y ) ; double Angle = atan ( y / x ) ; if ( Angle >= startAngle && Angle <= endAngle && polarradius < radius ) { cout << " Point ▁ ( " << x << " , " << y << " ) ▁ exist ▁ in ▁ the ▁ circle ▁ sector " << endAngle ; } else { cout << " Point ▁ ( " << x << " , " << y << " ) ▁ " " does ▁ not ▁ exist ▁ in ▁ the ▁ circle ▁ sector " << endAngle << endAngle << endl ; } }
int findSum ( int n ) { int arr [ n ] [ n ] ; memset ( arr , 0 , sizeof arr ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) arr [ i ] [ j ] = abs ( i - j ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) sum += arr [ i ] [ j ] ; return sum ; }
int discreteLogarithm ( int a , int b , int m ) { int n = sqrt ( m ) + 1 ; int an = 1 ; for ( int i = 0 ; i < n ; i ++ ) an = ( an * a ) % m ; int value [ m ] ; int cur = an ; for ( int i = 1 ; i <= n ; i ++ ) value [ cur ] = 0 ; cur = b ; for ( int i = 0 ; i <= n ; i ++ ) { if ( value [ cur ] > 0 ) value [ cur ] = i ; cur = ( cur * an ) % m ; } cur = b ; for ( int i = 0 ; i <= n ; i ++ ) { if ( value [ cur ] > 0 ) ans = value [ cur ] * n - i ; if ( ans < m ) return ans ; } cur = ( cur * a ) % m ; } return - 1 ; }
bool isPossibleTriangle ( int arr [ ] , int N ) { if ( N < 3 ) return false ; sort ( arr , arr + N ) ; for ( int i = 0 ; i < N - 2 ; i ++ ) { if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true ; } }
int numOfIncSubseqOfSizeK ( int arr [ ] , int n , int k ) { long int dp [ k ] [ n ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i < n ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int l = 1 ; l < k ; l ++ ) { for ( int i = l ; i < n ; i ++ ) dp [ l ] [ i ] = 0 ; for ( int j = l - 1 ; j < i ; j ++ ) if ( arr [ j ] < arr [ i ] ) dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ; } long int sum = 0 ; for ( int i = k - 1 ; i < n ; i ++ ) sum += dp [ k - 1 ] [ i ] ; return sum ; }
int solve ( int X [ ] , int Y [ ] , int l , int r , int k , int dp [ ] [ R ] [ k ] ) { if ( k == 0 ) return 0 ; if ( l < 0 || r < 0 ) return 1000000000 ; if ( dp [ l ] [ r ] [ k ] ) return dp [ l ] [ r ] [ k ] ; int cost = ( ( X [ l ] - ' a ' ) ^ ( Y [ r ] - ' a ' ) ) ; dp [ l ] [ r ] [ k ] = min ( [ cost + solve ( X , Y , l - 1 , r - 1 , k - 1 , dp ) , solve ( X , Y , l - 1 , r , k , dp ) ] ) ; return dp [ l ] [ r ] [ k ] ; }
bool isSubSequence ( string string1 , string string2 , int m , int n ) { if ( m == 0 ) return true ; if ( n == 0 ) return false ; if ( string1 [ m - 1 ] == string2 [ n - 1 ] ) return isSubSequence ( string1 , string2 , m - 1 , n - 1 ) ; return isSubSequence ( string1 , string2 , m , n - 1 ) ; }
int minProductSubset ( int a [ ] , int n ) { if ( n == 1 ) return a [ 0 ] ; int max_neg = numeric_limits < int > :: min ( ) ; int min_pos = numeric_limits < int > :: min ( ) ; int count_neg = 0 , count_zero = 0 ; int prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) count_zero = count_zero + 1 ; continue ; if ( a [ i ] < 0 ) count_neg = count_neg + 1 ; max_neg = max ( max_neg , a [ i ] ) ; if ( a [ i ] > 0 ) min_pos = min ( min_pos , a [ i ] ) ; prod *= a [ i ] ; } if ( count_zero == n || ( count_neg == 0 && count_zero > 0 ) ) return 0 ; if ( count_neg == 0 ) return min_pos ; if ( count_neg == 0 ) return 0 ; if ( count_neg & 1 ) == 0 && count_neg != 0 ) prod = int ( prod / max_neg ) ; return prod ; }
long long findDigits ( int n ) { if ( n < 0 ) return 0 ; if ( n <= 1 ) return 1 ; long long digits = 0 ; for ( int i = 2 ; i <= n ; i ++ ) digits += log10 ( i ) ; return floor ( digits ) + 1 ; }
void mergeTwoHalf ( int A [ ] , int n ) { sort ( A , A + n ) ; }
int minPerimeter ( int n ) { int l = sqrt ( n ) ; double sq = l * l ; if ( sq == n ) return l * 4 ; else { int row = n / l ; int perimeter = 2 * ( l + row ) ; if ( n % l != 0 ) perimeter += 2 ; return perimeter ; } }
void possibleOrNot ( double a1 , double a2 , double b1 , double b2 , double c1 , double c2 ) { int dis1 = ( pow ( b1 - a1 , 2 ) + pow ( b2 - a2 , 2 ) ) ; int dis2 = ( pow ( c1 - b1 , 2 ) + pow ( c2 - b2 , 2 ) ) ; if ( dis1 != dis2 ) cout << " No \n " ; else if ( b1 == ( ( a1 + c1 ) / 2.0 ) && b2 == ( ( a2 + c2 ) / 2.0 ) ) cout << " No \n " ; else { cout << " Yes " ; } }
int CountSquares ( double a , double b ) { return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 ) ; }
int countStrings ( int n , int k ) { long int dp [ n + 1 ] [ k + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 1 ] [ 0 ] [ 0 ] = 1 ; dp [ 1 ] [ 0 ] [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ) ; dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ; if ( j >= 1 ) dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ] ; } } return dp [ k ] [ 0 ] + dp [ k ] [ 1 ] ; }
void findSmallestRange ( int arr [ ] [ MAX ] , int n , int k ) { int i , minval , maxval , minrange , minel , maxel , flag ; for ( i = 0 ; i <= k ; i ++ ) { ptr [ i ] = 0 ; minrange = 10 ** 9 ; } while ( 1 ) { minind = - 1 ; minval = 10 ** 9 ; maxval = - 10 ** 9 ; flag = 0 ; for ( i = 0 ; i < k ; i ++ ) { if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) { minind = i ; minval = arr [ i ] [ ptr [ i ] ] ; } if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) { maxval = arr [ i ] [ ptr [ i ] ] ; } } if ( flag ) break ; ptr [ minind ] ++ ; if ( ( maxval - minval ) < minrange ) { minel = minval ; maxel = maxval ; minrange = maxel - minel ; } } cout << " The ▁ smallest ▁ range ▁ is ▁ [ ▁ " << minel << " ] " ; }
int maxelement ( int arr [ ] [ MAX ] ) { int no_of_rows = arr . size ( ) ; int no_of_column = arr . size ( ) ; for ( int i = 0 ; i < no_of_rows ; i ++ ) { int max1 = 0 ; for ( int j = 0 ; j < no_of_column ; j ++ ) if ( arr [ i ] [ j ] > max1 ) max1 = arr [ i ] [ j ] ; } cout << max1 << endl ; }
int yMod ( int y , int x ) { return ( y % pow ( 2 , x ) ) ; }
bool findthepath ( char S [ ] , char v ) { result [ 0 ] = v ; for ( int i = 1 ; i < S . length ( ) ; i ++ ) { if ( adj [ v ] [ S [ i ] - ' A ' ] || adj [ S [ i ] - ' A ' ] [ v ] ) v = S [ i ] - ' A ' ; else if ( adj [ v ] [ S [ i ] - ' A ' + 5 ] || adj [ S [ i ] - ' A ' + 5 ] [ v ] ) v = S [ i ] - ' A ' + 5 ] [ v ] ; else return false ; } result . push_back ( v ) ; } return true ; }
int getMissingNo ( int A [ ] ) { int n = A . size ( ) ; int total = ( n + 1 ) * ( n + 2 ) / 2 ; int sum_of_A = sum ( A ) ; return total - sum_of_A ; }
void fitOrNotFit ( int R , int r , int x , int y , int rad ) { double val = sqrt ( pow ( x , 2 ) + pow ( y , 2 ) ) ; if ( val + rad <= R && val - rad >= R - r ) cout << " Fits \n " ; else cout << " Doesn ' t ▁ Fit " ; }
int findPosition ( int k , int n ) { int f1 = 0 , f2 = 1 ; int i = 2 ; while ( i != 0 ) { int f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) return n * i ; i ++ ; } return - 1 ; }
int countManipulations ( string s1 , string s2 ) { int count = 0 ; int char_count [ 26 ] = { 0 } ; for ( int i = 0 ; i < 26 ; i ++ ) char_count [ i ] = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) char_count [ s1 [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { char_count [ s2 [ i ] - ' a ' ] -- ; if ( char_count [ s2 [ i ] - ' a ' ] < 0 ) count ++ ; } return count ; }
int count ( int n ) { int table [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( int i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( int i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; }
int findLongestRepeatingSubSeq ( char str [ ] ) { int n = strlen ( str ) ; int dp [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n ] [ n ] ; }
int jumpSearch ( int arr [ ] , int x , int n ) { int step = sqrt ( n ) ; int prev = 0 ; while ( arr [ min ( step , n ) - 1 ] < x ) { prev = step ; step += sqrt ( n ) ; if ( prev >= n ) return - 1 ; } while ( arr [ int ( prev ) ] < x ) { prev ++ ; if ( prev == min ( step , n ) ) return - 1 ; if ( arr [ int ( prev ) ] == x ) return prev ; } return - 1 ; }
int find ( int arr [ ] [ MAX ] ) { int n = arr . size ( ) ; int i = 0 , j = n - 1 ; int res = - 1 ; while ( i < n && j >= 0 ) { if ( arr [ i ] [ j ] == 0 ) { while ( j >= 0 && arr [ i ] [ j ] == 0 || i == j ) j -- ; if ( j == - 1 ) res = i ; break ; } else { while ( i < n && arr [ i ] [ j ] == 1 || i == j ) { i ++ ; if ( i == n ) res = j ; break ; } } if ( res == - 1 ) return res ; for ( int i = 0 ; i < n ; i ++ ) { if ( res != i && arr [ i ] [ res ] != 1 ) return - 1 ; } for ( int j = 0 ; j < n ; j ++ ) if ( res != j && arr [ res ] [ j ] != 0 ) return - 1 ; } return res ; }
void printArray ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << " ▁ " ; cout << endl ; }
void sortSquares ( int arr [ ] , int n ) { int K ; for ( K = 0 ; K < n ; K ++ ) if ( arr [ K ] >= 0 ) break ; int i = K - 1 , j = K ; int temp [ n ] ; for ( i = 0 ; i >= 0 && j < n ; i ++ , j ++ ) { if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) temp [ ind ] = arr [ i ] * arr [ i ] ; i -- ; } else temp [ ind ] = arr [ j ] * arr [ j ] ; ind ++ ; } while ( i >= 0 ) { temp [ ind ] = arr [ i ] * arr [ i ] ; i -- ; ind ++ ; } while ( j < n ) { temp [ ind ] = arr [ j ] * arr [ j ] ; j ++ ; ind ++ ; } for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = temp [ i ] ; }
int find_maximum ( int a [ ] , int n , int k ) { unordered_map < int , int > b ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; int d = min ( 1 + i , n - i ) ; if ( x not in b . keys ( ) ) b [ x ] = d ; else b [ x ] = min ( d , b [ x ] ) ; } int ans = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; if ( x != ( k - x ) && ( k - x ) in b . keys ( ) ) ans = min ( max ( b [ x ] , b [ k - x ] ) , ans ) ; } return ans ; }
int maxRepeating ( char str [ ] ) { int n = strlen ( str ) ; int count = 0 ; char res = str [ 0 ] ; int cur_count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( i < n - 1 && str [ i ] == str [ i + 1 ] ) ++ cur_count ; else if ( cur_count > count ) count = cur_count ; res = str [ i ] ; cur_count = 1 ; } } return res ; }
unsigned int snoob ( unsigned int x ) { unsigned int next = 0 ; if ( x ) { unsigned int rightOne = x & - ( x ) ; unsigned int nextHigherOneBit = x + int ( rightOne ) ; int rightOnesPattern = x ^ int ( nextHigherOneBit ) ; rightOnesPattern = ( int ( rightOnesPattern ) / int ( rightOne ) ) ; rightOnesPattern = ( int ( rightOnesPattern ) >> 2 ) ; next = nextHigherOneBit | rightOnesPattern ; } return next ; }
bool isInorder ( int arr [ ] , int n ) { if ( n == 0 || n == 1 ) return true ; for ( int i = 1 ; i <= n ; i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ; return true ; }
int lis ( int arr [ ] , int n ) { int maximum = 1 ; _lis ( arr , n ) ; return maximum ; }
int nCrModp ( int n , int r , int p ) { int C [ r + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = min ( i , r ) ; j >= 0 ; j -- ) C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p ; } return C [ r ] ; }
int binarySearch ( int arr [ ] , int l , int r , int x ) { while ( l <= r ) { int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; else if ( arr [ mid ] < x ) l = mid + 1 ; else r = mid - 1 ; } return - 1 ; }
int minXOR ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int min_xor = INT_MAX ; int val = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { val = arr [ i ] ^ arr [ j ] ; min_xor = min ( min_xor , val ) ; } } return min_xor ; }
int rearrange ( int arr [ ] , int n ) { int temp [ n ] ; int small = 0 , large = n - 1 ; bool flag = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( flag is true ) temp [ i ] = arr [ large ] ; large -- ; else temp [ i ] = arr [ small ] ; small ++ ; } flag = ! flag ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = temp [ i ] ; } return arr ; }
int LCSubStr ( int X [ ] , int Y [ ] , int m , int n ) { int LCSuff [ m + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) LCSuff [ i ] [ j ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ; result = max ( result , LCSuff [ i ] [ j ] ) ; } } return result ; }
int patternCount ( char str [ ] ) { char last = str [ 0 ] ; int counter = 0 ; while ( i < str . length ( ) ) { if ( str [ i ] == '0' && last == '1' ) { while ( str [ i ] == '0' ) i ++ ; if ( str [ i ] == '1' ) counter ++ ; } last = str [ i ] ; i ++ ; } return counter ; }
void longestSubseqWithK ( string str , int k ) { int n = str . length ( ) ; int freq [ MAX_CHARS ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) freq [ str [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) if ( freq [ str [ i ] - ' a ' ] >= k ) cout << str [ i ] ; }
unsigned int nextPowerOf2 ( unsigned int n ) { unsigned int count = 0 ; if ( n && ! ( n & ( n - 1 ) ) ) return n ; while ( n != 0 ) { n >>= 1 ; count ++ ; } return 1 << count ; }
bool isPowerOfTwo ( int x ) { return ( x && ( ! ( x & ( x - 1 ) ) ) ) ; }
void decToBinary ( int n ) { int binaryNum [ n ] ; int i = 0 ; while ( n > 0 ) { binaryNum [ i ] = n % 2 ; n = n / 2 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) cout << binaryNum [ j ] ; }
int maximumSumSubarray ( int arr [ ] , int n ) { int min_prefix_sum = 0 ; int res = INT_MIN ; int prefix_sum [ n ] = { 0 } ; prefix_sum . push_back ( arr [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) prefix_sum . push_back ( arr [ i ] ) ; for ( int i = 1 ; i < n ; i ++ ) { prefix_sum . push_back ( prefix_sum [ i - 1 ] + arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { res = max ( res , prefix_sum [ i ] - min_prefix_sum ) ; min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ] ) ; } return res ; }
int countOccurrences ( string s , int K ) { int n = s . length ( ) ; int c1 = 0 , c2 = 0 , C = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' a ' ) c1 ++ ; if ( s [ i ] == ' b ' ) c2 ++ ; C += c1 ; } return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ; }
bool checkDivisibility ( string num ) { int len = num . length ( ) ; if ( len == 1 && num [ 0 ] == '0' ) return true ; if ( len % 3 == 1 ) num = "00" ; else if ( len % 3 == 2 ) num = "0" ; length ++ ; } int sum = 0 ; int p = 1 ; for ( int i = length - 1 ; i >= 0 ; i -- ) { int group = 0 ; group += ( num [ i ] - '0' ) ; i -- ; group += ( num [ i ] - '0' ) * 10 ; i -- ; group += ( num [ i ] - '0' ) * 100 ; sum = sum + group * p ; p *= ( - 1 ) ; } return ( sum % 13 == 0 ) ; }
int countSetBits ( int n ) { int count = 0 ; while ( n ) { n &= ( n - 1 ) ; count ++ ; } return count ; }
int lenOfLongSubarr ( int arr [ ] , int n ) { unordered_map < int , int > um ; int sum = 0 ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) sum += - 1 ; else sum ++ ; if ( sum == 1 ) maxLen = i + 1 ; else if ( um [ sum ] == i ) um [ sum ] = i ; else if ( um [ sum - 1 ] == 0 ) maxLen = i - um [ sum - 1 ] ) maxLen = i - um [ sum - 1 ] ; } return maxLen ; }
int minJumps ( int arr [ ] , int l , int h ) { if ( h == l ) return 0 ; if ( arr [ l ] == 0 ) return float ( ' inf ' ) ; int min = INT_MAX ; for ( int i = l + 1 ; i <= h ; i ++ ) { if ( i < l + arr [ l ] + 1 ) { int jumps = minJumps ( arr , i , h ) ; if ( jumps != ' inf ' ) min = jumps + 1 ; } } return min ; }
int minTimeForWritingChars ( int N , int insrt , int remov , int cpy ) { if ( N == 0 ) return 0 ; if ( N == 1 ) return insrt ; int dp [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { if ( i % 2 == 0 ) dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ i / 2 ] + cpy ) ; else dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ i / 2 ] + cpy + remov ) ; } return dp [ N ] ; }
void carveCross ( char * str ) { int n = strlen ( str ) ; if ( n % 2 == 0 ) cout << " Not ▁ possible . ▁ Please ▁ enter ▁ " << " odd ▁ length ▁ string . \n " ; else { int arr [ n ] [ max ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] [ j ] = ' X ' ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ m ] = str [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ m ] = str [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ m ] [ i ] = str [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << arr [ i ] [ j ] << " ▁ " ; } cout << endl ; } }
int MaximumDecimalValue ( int mat [ MAX ] [ MAX ] , int n ) { int dp [ n ] [ n ] ; if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + 2 ** i ; else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ; } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ i ] [ 0 ] == 1 ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + 2 ** i ; else dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( 2 ** ( i + j ) ) ; else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n - 1 ] [ n - 1 ] ; }
int findRepeating ( int arr [ ] , int n ) { int missingElement = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int element = arr [ abs ( arr [ i ] ) ] ; if ( element < 0 ) missingElement = arr [ i ] ; break ; } arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ] ; return abs ( missingElement ) ; }
bool isPowerOfFour ( int n ) { return ( n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ! ( n & 0xAAAAAAAA ) ) ; }
void decToBinary ( int n ) { for ( int i = 31 ; i >= 0 ; i -- ) { int k = n >> i ; if ( k & 1 ) cout << 1 << " " ; else cout << 0 << " " ; } }
int countSubstrs ( char str [ ] , int i , int j , int n ) { if ( n == 1 ) return 1 ; if ( n <= 0 ) return 0 ; int res = countSubstrs ( str , i + 1 , j , n - 1 ) + countSubstrs ( str , i , j - 1 , n - 1 ) - countSubstrs ( str , i + 1 , j - 1 , n - 2 ) ; if ( str [ i ] == str [ j ] ) res ++ ; return res ; }
int minRotation ( int input , int unlock_code ) { int rotation = 0 ; while ( input > 0 || unlock_code > 0 ) { int input_digit = input % 10 ; int code_digit = unlock_code % 10 ; rotation += min ( abs ( input_digit - code_digit ) , 10 - abs ( input_digit - code_digit ) ) ; input = int ( input / 10 ) ; unlock_code = int ( unlock_code / 10 ) ; } return rotation ; }
bool checkMarkov ( int m [ ] [ MAX ] ) { for ( int i = 0 ; i < m . size ( ) ; i ++ ) { int sm = 0 ; for ( int j = 0 ; j < m [ i ] . size ( ) ; j ++ ) sm = sm + m [ i ] [ j ] ; if ( sm != 1 ) return false ; } return true ; }
bool areConsecutive ( int arr [ ] , int n ) { if ( n < 1 ) return false ; int Min = min ( arr ) ; int Max = max ( arr ) ; if ( Max - Min + 1 == n ) { bool visited [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited [ arr [ i ] - Min ] ) return false ; visited [ arr [ i ] - Min ] = true ; } return true ; }
int findMod ( int a , int b ) { if ( a < 0 ) a = - a ; if ( b < 0 ) b = - b ; int mod = a ; while ( mod >= b ) mod = mod - b ; if ( a < 0 ) return - mod ; return mod ; }
int sumOfSubstrings ( string num ) { int n = num . length ( ) ; int sumofdigit [ n ] = { 0 } ; int res = sumofdigit [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int numi = num [ i ] ; sumofdigit . push_back ( ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ) ; res += sumofdigit [ i ] ; } return res ; }
int findGreatest ( int arr [ ] , int n ) { unordered_map < int , int > m ; for ( int i = 0 ; i < n ; i ++ ) m [ i ] ++ ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < i && arr [ j ] <= sqrt ( arr [ i ] ) ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) { int result = arr [ i ] / arr [ j ] ; if ( result != arr [ j ] && ( result in m . keys ( ) ) && m [ result ] > 0 ) return arr [ i ] ; else if ( result == arr [ j ] && ( result in m . keys ( ) ) && m [ result ] > 1 ) return arr [ i ] ; } } return - 1 ; }
int getMissingNo ( int a [ ] , int n ) { int i , total = 0 , j = 2 ; for ( i = 2 ; i <= n ; i ++ ) total += i ; total -= a [ i - 2 ] ; return total ; }
int nextPowerOf2 ( int n ) { n -- ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; n ++ ; return n ; }
int zigzag ( int n , int k ) { int dp [ n + 1 ] [ k + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= k ; j ++ ) dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ i - j ] ) ; } return dp [ n ] [ k ] ; }
int maximumDifferenceSum ( int arr [ ] , int N ) { int dp [ N ] [ N ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i < N ; i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) ) ; dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) ) ; } return max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] ) ; }
bool isMultipleOf10 ( int n ) { return ( n % 15 == 0 ) ; }
int maxProduct ( int arr [ ] , int n ) { if ( n < 3 ) return - 1 ; sort ( arr , arr + n ) ; return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] ) ; }
int nextPowerOf2 ( int n ) { n -- ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; n ++ ; return n ; }
int findMaxValue ( int arr [ ] , int n ) { if ( n < 4 ) { cout << " The ▁ array ▁ should ▁ have ▁ atlest ▁ 4 ▁ elements " << endl ; return MIN ; } int table1 [ n + 1 ] , table2 [ n ] , table3 [ n - 2 ] ; int table4 [ n - 4 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ; for ( int i = n - 3 ; i >= 0 ; i -- ) table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ; for ( int i = n - 4 ; i >= 0 ; i -- ) table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ; return table4 [ 0 ] ; }
int findMaxGCD ( int arr [ ] , int n ) { int high = 0 ; for ( int i = 0 ; i < n ; i ++ ) high = max ( high , arr [ i ] ) ; int count [ high + 1 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) count [ arr [ i ] ] ++ ; int counter = 0 ; for ( int i = high ; i >= 0 ; i -- ) { if ( count [ i ] > 0 ) counter += count [ i ] ; j += i ; if ( counter == 2 ) return i ; } counter = 0 ; }
void smallestSubsegment ( int a [ ] , int n ) { unordered_map < int , int > left ; int count [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; if ( x == left [ x ] ) { left [ x ] = i ; count [ x ] = 1 ; } else count [ x ] ++ ; if ( count [ x ] > mx ) { mx = count [ x ] ; mn = i - left [ x ] + 1 ; strindex = left [ x ] ; } else if ( count [ x ] == mx && i - left [ x ] + 1 < mn ) mn = i - left [ x ] + 1 ; strindex = left [ x ] ; } for ( int i = strindex ; i <= strindex + mn ; i ++ ) cout << a [ i ] << " ▁ " ; }
int minRadius ( int k , int x [ ] , int y [ ] , int n ) { int dis [ n ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ] ; sort ( dis , dis + k ) ; return dis [ k - 1 ] ; }
void findSmallest ( int m , int s ) { if ( s == 0 ) { if ( m == 1 ) cout << " Smallest ▁ number ▁ is ▁ 0 " ; else cout << " Not ▁ possible " ; return ; } if ( s > 9 * m ) cout << " Not ▁ possible " ; return ; } int res [ m + 1 ] ; s -- ; for ( int i = m - 1 ; i >= 0 ; i -- ) { if ( s > 9 ) { res [ i ] = 9 ; s -= 9 ; } else res [ i ] = s ; s = 0 ; } res [ 0 ] = s + 1 ; cout << " Smallest ▁ number ▁ is ▁ " << endl ; for ( int i = 0 ; i < m ; i ++ ) cout << res [ i ] << " ▁ " << endl ; }
bool isPresent ( string s , string q ) { int freq [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) freq [ s [ i ] ] ++ ; for ( int i = 0 ; i < q . length ( ) ; i ++ ) freq [ q [ i ] ] -- ; if ( freq [ q [ i ] ] < 0 ) return false ; return true ; }
void sortArray ( int arr [ ] , int n , int A , int B , int C ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = ( A * arr [ i ] * arr [ i ] + B * arr [ i ] + C ) ; int index = INT_MIN , maximum = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { if ( maximum < arr [ i ] ) { index = i ; maximum = arr [ i ] ; } } int i = 0 , j = n - 1 ; int new_arr [ n ] ; int k = 0 ; while ( i < index && j > index ) { if ( arr [ i ] < arr [ j ] ) { new_arr [ k ] = arr [ i ] ; k ++ ; i ++ ; } else { new_arr [ k ] = arr [ j ] ; k ++ ; j -- ; } } while ( i < index ) { new_arr [ k ] = arr [ i ] ; k ++ ; i ++ ; } while ( j > index ) { new_arr [ k ] = arr [ j ] ; k ++ ; j -- ; } new_arr [ n - 1 ] = maximum ; } for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = new_arr [ i ] ; }
void printDistance ( int mat [ N ] [ M ] ) { int ans [ N ] [ M ] ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < M ; j ++ ) ans [ i ] [ j ] = INT_MAX ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int l = 0 ; l < M ; l ++ ) { if ( mat [ k ] [ l ] == 1 ) ans [ i ] [ j ] = min ( ans [ i ] [ j ] , abs ( i - k ) + abs ( j - l ) ) ; } } } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) cout << ans [ i ] [ j ] << " ▁ ▁ " ; cout << endl ; } }
int findLastIndex ( string str , int x ) { int index = - 1 ; for ( int i = 0 ; i < str . size ( ) ; i ++ ) if ( str [ i ] == x ) index = i ; return index ; }
double vol_of_dodecahedron ( int side ) { return ( ( 15 + ( 7 * ( sqrt ( 5 ) ) ) / 4 ) * ( pow ( side , 3 ) ) ) ; }
int countTransformation ( int a [ ] , int b [ ] ) { int n = a . length ( ) ; int m = b . length ( ) ; if ( m == 0 ) return 1 ; int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { if ( i == 0 ) { if ( j == 0 ) dp [ i ] [ j ] = 1 ; else dp [ i ] [ j ] = 0 ; } else if ( a [ j ] == b [ i ] ) dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } } return dp [ m - 1 ] [ n - 1 ] ; }
int sumAtKthLevel ( char tree [ ] , int k , int i , int level ) { if ( tree [ i [ 0 ] ] == ' ( ' ) return 0 ; int sum = 0 ; if ( level == k ) { sum = tree [ i [ 0 ] ] ; i [ 0 ] ++ ; } i [ 0 ] ++ ; int leftsum = sumAtKthLevel ( tree , k , i , level + 1 ) ; i [ 0 ] ++ ; int rightsum = sumAtKthLevel ( tree , k , i , level + 1 ) ; i [ 0 ] ++ ; return sum + leftsum + rightsum ; }
void printRepeating ( int arr [ ] , int size ) { int count [ size ] ; count [ size ] = { 0 } ; cout << " ▁ Repeating ▁ elements ▁ are ▁ \n " ; for ( int i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) cout << arr [ i ] << " ▁ " ; else count [ arr [ i ] ] ++ ; } }
bool isSubsetSum ( int set [ ] , int n , int sum ) { bool subset [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) subset [ i ] [ 0 ] = true ; for ( int i = 0 ; i <= sum ; i ++ ) subset [ 0 ] [ i ] = false ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= sum ; j ++ ) { if ( j < set [ i - 1 ] ) subset [ i ] [ j ] = subset [ i - 1 ] [ j ] ; if ( j >= set [ i - 1 ] ) subset [ i ] [ j ] = ( subset [ i - 1 ] [ j ] || subset [ i - 1 ] [ j - set [ i - 1 ] ] ) ; } } return subset [ n ] [ sum ] ; }
void findMajority ( int arr [ ] , int size ) { unordered_map < int , int > m ; for ( int i = 0 ; i < size ; i ++ ) { if ( m [ arr [ i ] ] ) m [ arr [ i ] ] ++ ; else m [ arr [ i ] ] = 1 ; } int count = 0 ; for ( int key = 0 ; key < m . size ( ) ; key ++ ) { if ( m [ key ] > size / 2 ) count ++ ; break ; } if ( count == 0 ) cout << " No ▁ Majority ▁ element " ; }
void replaceOriginal ( char s [ ] , int n ) { char r [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { r [ i ] = s [ n - 1 - i ] ; if ( s [ i ] != ' a ' && s [ i ] != ' e ' && s [ i ] != ' i ' && s [ i ] != ' o ' && s [ i ] != ' u ' ) cout << r [ i ] ; } cout << endl ; }
int findMaxPath ( int mat [ M ] [ N ] ) { int res = - 1 ; for ( int i = 0 ; i < M ; i ++ ) res = max ( res , mat [ 0 ] [ i ] ) ; for ( int i = 1 ; i < N ; i ++ ) { res = - 1 ; for ( int j = 0 ; j < M ; j ++ ) { if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) ) ; else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] ) ; else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] ) ; res = max ( mat [ i ] [ j ] , res ) ; } } return res ; }
bool checkIsAP ( int arr [ ] , int n ) { if ( n == 1 ) return true ; sort ( arr , arr + n ) ; int d = arr [ 1 ] - arr [ 0 ] ; for ( int i = 2 ; i < n ; i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; return true ; }
bool check ( char * str ) { int n = strlen ( str ) ; int oddDigSum = 0 , evenDigSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) oddDigSum = oddDigSum + ( ( int ) str [ i ] - '0' ) ; else evenDigSum = evenDigSum + ( ( int ) str [ i ] - '0' ) ; } return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ; }
void swap ( int xp [ ] , int yp [ ] ) { xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; }
int countSol ( int coeff [ ] , int n , int rhs ) { int dp [ rhs + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = coeff [ i ] ; j <= rhs ; j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ; } return dp [ rhs ] ; }
void printRepeating ( int arr [ ] , int size ) { int xor = arr [ 0 ] ; int n = size - 2 ; int x = 0 , y = 0 ; for ( int i = 1 ; i < size ; i ++ ) xor ^= arr [ i ] ; for ( int i = 1 ; i < n + 1 ; i ++ ) xor ^= i ; int set_bit_no = xor & ~ ( xor - 1 ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( int i = 1 ; i < n + 1 ; i ++ ) { if ( i & set_bit_no ) x = x ^ i ; else y = y ^ i ; } } cout << " The ▁ two ▁ repeating " << " elements ▁ are ▁ " << y << x ; }
int findSubsequenceCount ( char * S , char * T ) { int m = strlen ( T ) , n = strlen ( S ) ; if ( m > n ) return 0 ; int mat [ m + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= m ; i ++ ) mat [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j <= n ; j ++ ) mat [ 0 ] [ j ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( T [ i - 1 ] != S [ j - 1 ] ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ] ; else mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] ) ; } } return mat [ m ] [ n ] ; }
int breakSum ( int n ) { int dp [ n + 1 ] ; dp [ 0 ] = 0 , dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) dp [ i ] = max ( dp [ i / 2 ] + dp [ i / 3 ] + dp [ i / 4 ] , i ) ; return dp [ n ] ; }
void decToHexa ( int n ) { char hexaDeciNum [ 100 ] ; int i = 0 ; while ( n != 0 ) { int temp = 0 ; temp = n % 16 ; if ( temp < 10 ) hexaDeciNum [ i ] = '0' ; i ++ ; } else hexaDeciNum [ i ] = '0' ; n = n / 16 ; } int j = i - 1 ; while ( j >= 0 ) cout << ( hexaDeciNum [ j ] ) ; j -- ; }
int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( ~ a & 1 ) { if ( ( b & 1 ) == 1 ) return gcd ( a >> 1 , b ) ; else return gcd ( a >> 1 , b >> 1 ) << 1 ; } if ( ( ~ b & 1 ) == 1 ) return gcd ( a , b >> 1 ) ; if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ; return gcd ( ( b - a ) >> 1 , a ) ; }
void evaluate ( int n ) { if ( n == 1 || n == 2 ) cout << " No ▁ Pythagoras ▁ Triplet ▁ exists " ; else if ( n % 2 == 0 ) { cout << " Pythagoras ▁ Triplets " << " ▁ exist ▁ i . e . ▁ " << endl ; cout << int ( n ) << " ▁ " << int ( var - 1 ) << " ▁ " << int ( var + 1 ) << endl ; } else if ( n % 2 != 0 ) { int var = n * n + 1 ; cout << " Pythagoras ▁ Triplets ▁ " << " exist ▁ i . e . ▁ " << endl ; cout << int ( n ) << " ▁ " << int ( var / 2 - 1 ) << " ▁ " << int ( var / 2 ) << endl ; } }
int countPairs ( string & str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j <= MAX_CHAR ; j ++ ) if ( ( i + j ) < n ) if ( abs ( str [ i + j ] - str [ i ] ) == j ) result ++ ; } } return result ; }
int solve ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ; else b = b * 10 + arr [ i ] ; } return a + b ; }
int countMinOperations ( int target [ ] , int n ) { int result = 0 ; while ( true ) { int zero_count = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ( target [ i ] & 1 ) > 0 ) break ; else if ( target [ i ] == 0 ) zero_count ++ ; i ++ ; } if ( zero_count == n ) return result ; if ( i == n ) { for ( int j = 0 ; j < n ; ++ j ) target [ j ] = target [ j ] / 2 ; result ++ ; } for ( int j = i ; j < n ; ++ j ) if ( target [ j ] & 1 ) target [ j ] -= 1 ; result ++ ; } }
bool canMakeAllSame ( string str ) { int zeros = 0 , ones = 0 ; for ( int i = 0 ; i < str . size ( ) ; i ++ ) { char ch = str [ i ] ; if ( ch == '0' ) zeros = zeros + 1 ; else ones = ones + 1 ; } return ( zeros == 1 || ones == 1 ) ; }
void psuedoBinary ( int n ) { while ( n > 0 ) { int temp = n ; int m = 0 , p = 1 ; while ( temp ) { int rem = temp % 10 ; temp = temp / 10 ; if ( rem != 0 ) m += p ; p *= 10 ; } cout << m << " ▁ " ; n = n - m ; } }
int findmin ( int p [ ] [ MAX ] , int n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] [ 0 ] <= 0 ) a ++ ; else if ( p [ i ] [ 0 ] >= 0 ) b ++ ; if ( p [ i ] [ 1 ] >= 0 ) c ++ ; else if ( p [ i ] [ 1 ] <= 0 ) d ++ ; } return min ( a , b , c , d ) ; }
int minCoins ( int coins [ ] , int m , int V ) { int table [ V + 1 ] ; table [ 0 ] = 0 ; for ( int i = 1 ; i <= V ; i ++ ) table [ i ] = INT_MAX ; for ( int i = 1 ; i <= V ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( coins [ j ] <= i ) { int sub_res = table [ i - coins [ j ] ] ; if ( sub_res != INT_MAX && sub_res + 1 < table [ i ] ) table [ i ] = sub_res + 1 ; } } } return table [ V ] ; }
int maxAlternateSum ( int arr [ ] , int n ) { if ( n == 1 ) return arr [ 0 ] ; int dec [ n + 1 ] ; int inc [ n + 1 ] ; memset ( dec , 0 , sizeof ( dec ) ) ; inc [ 0 ] = arr [ 0 ] ; int flag = 0 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] > arr [ i ] ) { dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] ) ; flag = 1 ; } else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] ) ; } } int result = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) if ( result < inc [ i ] ) result = inc [ i ] ; if ( result < dec [ i ] ) result = dec [ i ] ; return result ; }
void printRepeating ( int arr [ ] , int size ) { cout << " Repeating ▁ elements ▁ are ▁ \n " ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = i + 1 ; j < size ; j ++ ) if ( arr [ i ] == arr [ j ] ) cout << arr [ i ] << " ▁ " ; } }
int firstElement ( int arr [ ] , int n , int k ) { unordered_map < int , int > count_map ; for ( int i = 0 ; i < n ; i ++ ) { if ( count_map . find ( arr [ i ] ) != count_map . end ( ) ) count_map [ arr [ i ] ] ++ ; else count_map [ arr [ i ] ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( count_map [ arr [ i ] ] == k ) return arr [ i ] ; i ++ ; } return - 1 ; }
int maxSum ( int grid [ ] [ MAX ] , int n ) { int incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] ) ; int excl = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int excl_new = max ( excl , incl ) ; incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] ) ; excl = excl_new ; } return max ( excl , incl ) ; }
bool checkCorrectOrNot ( string s ) { int count1 [ MAX_CHAR ] = { 0 } , count2 [ MAX_CHAR ] = { 0 } ; int n = s . length ( ) ; if ( n == 1 ) return true ; for ( int i = 0 , j = n - 1 ; i < j ; i ++ , j -- ) { count1 [ s [ i ] - ' a ' ] ++ ; count2 [ s [ j ] - ' a ' ] ++ ; } for ( int i = 0 ; i < MAX_CHAR ; i ++ ) if ( count1 [ i ] != count2 [ i ] ) return false ; return true ; }
int areaOctagon ( int side ) { return ( 2 * ( 1 + ( sqrt ( 2 ) ) ) * side * side ) ; }
void printSuperSeq ( string a , string b ) { int m = a . length ( ) ; int n = b . length ( ) ; int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( ! i ) dp [ i ] [ j ] = j ; else if ( ! j ) dp [ i ] [ j ] = i ; else if ( a [ i - 1 ] == b [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } int index = dp [ m ] [ n ] ; string res [ index ] ; int i = m , j = n ; while ( i > 0 && j > 0 ) { if ( a [ i - 1 ] == b [ j - 1 ] ) { res [ index - 1 ] = a [ i - 1 ] ; i -- , j -- , index -- ; } else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) { res [ index - 1 ] = a [ i - 1 ] ; i -- , index -- ; } else { res [ index - 1 ] = b [ j - 1 ] ; j -- , index -- ; } } while ( i > 0 ) { res [ index - 1 ] = a [ i - 1 ] ; i -- , index -- ; } while ( j > 0 ) { res [ index - 1 ] = b [ j - 1 ] ; j -- , index -- ; } while ( i > 0 ) { res [ index - 1 ] = a [ i - 1 ] ; i -- , index -- ; } while ( j > 0 ) { res [ index - 1 ] = b [ j - 1 ] ; index -- ; } while ( i > 0 ) { res [ index - 1 ] = a [ i - 1 ] ; i -- , index -- ; } while ( j > 0 ) { res [ index - 1 ] = b [ j - 1 ] ; index -- ; } while ( i > 0 ) { res [ index - 1 ] = b [ j - 1 ] ; j
int numberOfPaths ( int p , int q ) { int dp [ q ] = { 1 } ; for ( int i = 0 ; i <= p - 2 ; i ++ ) for ( int j = 1 ; j <= q ; j ++ ) dp [ j ] += dp [ j - 1 ] ; return dp [ q - 1 ] ; }
bool isPowerOfFour ( int n ) { int count = 0 ; if ( n && ( ! ( n & ( n - 1 ) ) ) return false ; while ( n > 1 ) { n >>= 1 ; count ++ ; if ( count % 2 == 0 ) return true ; else return false ; } }
int findElement ( int arr [ ] , int n ) { int leftMax [ n ] = { 0 } ; leftMax [ 0 ] = ' - inf ' ; for ( int i = 1 ; i < n ; i ++ ) leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 ] ) ; float rightMin = float ( ' inf ' ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( leftMax [ i ] < arr [ i ] && rightMin > arr [ i ] ) return i ; rightMin = min ( rightMin , arr [ i ] ) ; } return - 1 ; }
void printRepeating ( int arr [ ] , int size ) { cout << " The ▁ repeating ▁ elements ▁ are ▁ " << endl ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ abs ( arr [ i ] ) ] > 0 ) arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( arr [ i ] ) ] ; else cout << abs ( arr [ i ] ) << " ▁ " ; } }
int height ( int N ) { return ceil ( log2 ( N + 1 ) ) - 1 ; }
void thirdLargest ( int arr [ ] , int arr_size ) { if ( arr_size < 3 ) cout << " ▁ Invalid ▁ Input ▁ " ; return ; } int first = arr [ 0 ] ; int second = INT_MIN , third = INT_MAX ; for ( int i = 1 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { third = second ; second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) { third = second ; second = arr [ i ] ; } else if ( arr [ i ] > third ) { third = arr [ i ] ; } cout << " The ▁ third ▁ Largest " << " element ▁ is ▁ " << third ; }
int getNumStrictMonotone ( int ln ) { int DP [ DP_s ] [ DP_s ] ; memset ( DP , 0 , sizeof ( DP ) ) ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ 0 ] [ i ] = i + 1 ; for ( int i = 1 ; i < ln ; i ++ ) { for ( int j = 1 ; j < DP_s ; j ++ ) DP [ i ] [ j ] = DP [ i - 1 ] [ j - 1 ] + DP [ i ] [ j - 1 ] ; } return DP [ ln - 1 ] [ DP_s - 1 ] ; }
int maxRevenue ( int m , int x [ ] , int revenue [ ] , int n , int t ) { int maxRev [ m + 1 ] ; int nxtbb ; for ( i = 1 ; i <= m ; i ++ ) { if ( nxtbb < n ) { if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ] ; else { if ( i <= t ) maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] ) ; else maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ; } nxtbb ++ ; } } return maxRev [ m ] ; }
void lineFromPoints ( int P [ ] , int Q [ ] ) { int a = Q [ 1 ] - P [ 1 ] ; int b = P [ 0 ] - Q [ 0 ] ; int c = a * ( P [ 0 ] ) + b * ( P [ 1 ] ) ; if ( b < 0 ) { cout << " The ▁ line ▁ passing ▁ through ▁ points ▁ P ▁ and ▁ Q ▁ is : ▁ " << a << " x ▁ " << b << " y ▁ = ▁ " << c << " \n " ; } else { cout << " The ▁ line ▁ passing ▁ through ▁ points ▁ P ▁ and ▁ Q ▁ is : ▁ " << a << " x ▁ + ▁ " << b << " y ▁ = ▁ " << c << " \n " ; } }
int countSubstringWithEqualEnds ( string s ) { int result = 0 ; int n = s . length ( ) ; int count [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) count [ s [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) result += count [ i ] * ( count [ i ] + 1 ) / 2 ; return result ; }
int findRepeatingNumber ( int arr [ ] , int n ) { double sq = sqrt ( n ) ; int count [ range__ ] = { 0 } ; for ( int i = 0 ; i <= n ; i ++ ) count [ ( arr [ i ] - 1 ) / sq ] ++ ; int selected_block = range__ - 1 ; for ( int i = 0 ; i <= range__ - 1 ; i ++ ) if ( count [ i ] > sq ) selected_block = i ; break ; int m [ arr [ i ] ] = 0 ; for ( int i = 0 ; i <= n + 1 ; i ++ ) m [ arr [ i ] ] ++ ; if ( m [ arr [ i ] ] > 1 ) return arr [ i ] ; } return - 1 ; }
bool check ( char * str ) { int n = str . length ( ) ; if ( n == 0 ) return false ; if ( n == 1 ) return ( str [ 0 ] - '0' ) % 4 == 0 ; int last = ( int ) str [ n - 1 ] ; int second_last = ( int ) str [ n - 2 ] ; return ( ( second_last * 10 + last ) % 4 == 0 ) ; }
int remAnagram ( string str1 , string str2 ) { int count1 [ CHARS ] = { 0 } , count2 [ CHARS ] = { 0 } ; int i = 0 ; while ( i < str1 . length ( ) ) count1 [ str1 [ i ] - ' a ' ] ++ ; i = 0 ; while ( i < str2 . length ( ) ) count2 [ str2 [ i ] - ' a ' ] ++ ; int result = 0 ; for ( i = 0 ; i < 26 ; i ++ ) result += abs ( count1 [ i ] - count2 [ i ] ) ; return result ; }
int mulmod ( int a , int b , int mod ) { int res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) res += a ; a = ( a * 2 ) % mod ; b /= 2 ; } return res % mod ; }
string Dragon_Curve_Sequence ( int n ) { string s = "1" ; for ( int i = 2 ; i <= n ; i ++ ) { string temp = "1" ; int prev = '1' ; string zero = '0' , one = '1' ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { temp += s [ j ] ; if ( prev == '0' ) temp += one ; prev = one ; } else temp += zero ; prev = zero ; } s = temp ; } return s ; }
int getSecondMostFreq ( string str ) { int NO_OF_CHARS = 256 ; int count [ NO_OF_CHARS ] ; int i ; for ( i = 0 ; i < str . length ( ) ; i ++ ) count [ str [ i ] ] ++ ; int first = 0 , second = 0 ; for ( i = 0 ; i < NO_OF_CHARS ; i ++ ) { if ( count [ i ] > count [ first ] ) { second = first ; first = i ; } else if ( count [ i ] > count [ second ] && count [ i ] != count [ first ] ) second = i ; } return ( char ) second ; }
