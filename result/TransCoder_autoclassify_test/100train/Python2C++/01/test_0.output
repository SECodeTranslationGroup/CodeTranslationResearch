void printPairs ( int arr [ ] , int n ) { int v [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( abs ( arr [ i ] ) == abs ( arr [ j ] ) ) v . push ( abs ( arr [ i ] ) ) ; } if ( v . empty ( ) ) return ; sort ( v , v + n ) ; for ( int i = 0 ; i < n ; i ++ ) { cout << - v [ i ] << " ▁ " ; } }
void findArea ( int a , int b , int c ) { if ( ( a < 0 || b < 0 || c < 0 ) || ( a + b <= c ) || ( b + c <= a ) ) cout << ' Not ▁ a ▁ valid ▁ trianglen ' ; return ; } int s = ( a + b + c ) / 2 ; double area = ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ** 0.5 ; cout << ' Area ▁ of ▁ a ▁ traingle ▁ is ▁ % f ' % area ; }
bool isMajority ( int a [ ] ) { map < int , int > mp ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) mp [ i ] ++ ; for ( int x = 0 ; x < mp . size ( ) ; x ++ ) if ( mp [ x ] >= len ( a ) / 2 ) return true ; return false ; }
int nonDecNums ( int n ) { int a [ n + 1 ] [ 10 ] ; for ( int i = 0 ; i <= 9 ; i ++ ) a [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] [ 9 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 8 ; j < ; j ++ ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; return a [ n ] [ 0 ] ; }
void firstFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) { int allocation [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( blockSize [ j ] >= processSize [ i ] ) { allocation [ i ] = j ; blockSize [ j ] -= processSize [ i ] ; break ; } } } cout << " ▁ Process ▁ No . ▁ Process ▁ Size ▁ ▁ ▁ ▁ ▁ Block ▁ no . " << endl ; for ( int i = 0 ; i < n ; i ++ ) { cout << " ▁ " << i + 1 << " ▁ ▁ ▁ ▁ " << endl ; if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; } }
int firstNonRepeating ( int arr [ ] , int n ) { map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; for ( int i = 0 ; i < n ; i ++ ) for ( int i = 0 ; i < n ; i ++ ) if ( mp [ arr [ i ] ] == 1 ) return arr [ i ] ; return - 1 ; }
bool distributingBalls ( int k , int n , string str ) { int a [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) a [ str [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) if ( a [ i ] > k ) return false ; return true ; }
int count_of_ways ( int n ) { int count = 0 ; count = ( n + 1 ) * ( n + 2 ) / 2 ; return count ; }
int maxSum ( int arr [ ] , int n ) { int cum_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) cum_sum += arr [ i ] ; int curr_val = 0 ; for ( int i = 0 ; i < n ; i ++ ) curr_val += i * arr [ i ] ; int res = curr_val ; for ( int i = 1 ; i < n ; i ++ ) { int next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) ) ; curr_val = next_val ; res = max ( res , next_val ) ; } return res ; }
int calcAngle ( int h , int m ) { if ( h < 0 || m < 0 || h > 12 || m > 60 ) cout << ' Wrong ▁ input ▁ ' ; if ( h == 12 ) h = 0 ; if ( m == 60 ) m = 0 ; hour_angle = 0.5 * ( h * 60 + m ) ; minute_angle = 6 * m ; angle = abs ( hour_angle - minute_angle ) ; angle = min ( 360 - angle , angle ) ; return angle ; }
int smallest ( int x , int y , int z ) { if ( ! ( y / x ) ) return y if ( ! ( y / z ) ) else z ; return x if ( ! ( x / z ) ) return y if ( ! ( x / z ) ) else z ; }
char findExtraCharcter ( string strA , string strB ) { int res = 0 ; for ( int i = 0 ; i < strA . length ( ) ; i ++ ) res = res ^ ( char ) ( strA [ i ] ) ; for ( int i = 0 ; i < strB . length ( ) ; i ++ ) res = res ^ ( char ) ( strB [ i ] ) ; return ( ( char ) ( res ) ) ; }
void recaman ( int n ) { if ( n <= 0 ) return ; unordered_set < int > S ; int prev ; for ( int i = 1 ; i < n ; i ++ ) S . insert ( 0 ) ; prev = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int curr = prev - i ; if ( curr < 0 || curr in S ) { curr = prev + i ; } s . insert ( curr ) ; } }
int findMinimumAngle ( int arr [ ] , int n ) { int l = 0 ; int _sum = 0 ; int ans = 360 ; for ( int i = 0 ; i < n ; i ++ ) { _sum += arr [ i ] ; while ( _sum >= 180 ) { ans = min ( ans , 2 * abs ( 180 - _sum ) ) ; _sum -= arr [ l ] ; l ++ ; } ans = min ( ans , 2 * abs ( 180 - _sum ) ) ; } return ans ; }
void countSubsequence ( char s [ ] , int n ) { int cntG = 0 , cntF = 0 ; int result = 0 , C = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' G ' ) cntG ++ ; result += C ; continue ; if ( s [ i ] == ' F ' ) cntF ++ ; C ++ ; } else if ( result == 0 ) cout << result << endl ; }
int maxdiff ( int arr [ ] , int n ) { int freq [ n ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i ] > arr [ j ] ) ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] ) ; else if ( freq [ arr [ i ] ] < freq [ arr [ j ] ] && arr [ i ] < arr [ j ] ) ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] ) ; } } return ans ; }
bool areEqual ( int arr1 [ ] , int arr2 [ ] , int n , int m ) { if ( n != m ) return false ; sort ( arr1 , arr1 + n ) ; sort ( arr2 , arr2 + m ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr1 [ i ] != arr2 [ i ] ) return false ; } return true ; }
int countFriendsPairings ( int n ) { int a = 1 , b = 2 , c = 1 ; if ( n <= 2 ) return n ; for ( int i = 3 ; i <= n ; i ++ ) c = b + ( i - 1 ) * a ; a = b ; b = c ; } return c ; }
int PowerOFPINnfactorial ( int n , int p ) { int ans = 0 ; int temp = p ; while ( temp <= n ) ans += n / temp ; return ans ; }
int findLength ( string str ) { int n = str . length ( ) ; int maxlen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int length = ( j - i + 1 ) / 2 ; int leftsum = 0 , rightsum = 0 ; for ( int k = 0 ; k < length / 2 ; k ++ ) { leftsum += ( int ) str [ i + k ] - '0' ) ; rightsum += ( int ) str [ i + k + int ( length / 2 ) ] - '0' ) ; if ( leftsum == rightsum && maxlen < length ) { maxlen = length ; } } } return maxlen ; }
int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == x ) return i ; return - 1 ; }
void subArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = i ; k <= j ; k ++ ) cout << arr [ k ] << " ▁ " ; cout << endl ; } } }
bool isSubSeqDivisible ( string str ) { int n = strlen ( str ) ; int dp [ n ] [ n + 1 ] ; int arr [ n ] ; for ( int i = 1 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = i ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = str [ i - 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 8 ; j ++ ) { if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ] ; if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } } for ( int i = 1 ; i <= n ; i ++ ) if ( dp [ i ] [ 0 ] == 1 ) return true ; return false ; }
int solve ( int i , int par , int a [ ] , int n , int k , int current_ans ) { if ( par > k ) return 0 ; if ( par == k && i == n - 1 ) ans = min ( ans , current_ans ) ; return 0 ; } for ( int j = i ; j < n ; j ++ ) { solve ( j , par + 1 , a , n , k , current_ans + ( a [ j ] - a [ i + 1 ] ) * ( a [ j ] - a [ i + 1 ] ) ; } }
int squareRoot ( int n ) { int x = n ; int y = 1 ; double e = 0.000001 ; while ( x - y > e ) { x = ( x + y ) / 2 ; y = n / x ; } return x ; }
int CountPairs ( int n ) { int k = n ; int imin = 1 ; int ans = 0 ; while ( k <= n ) { int imax = n / k ; ans += k * ( imax - imin + 1 ) ; imin = imax + 1 ; k = n / imin ; } return ans ; }
int multiplyWith3Point5 ( int x ) { return ( x << 1 ) + x + ( x >> 1 ) ; }
bool prevPermutation ( char str [ ] ) { int n = str . length ( ) ; int i , j ; for ( i = n ; i > 0 && str [ i - 1 ] <= str [ i ] ; i -- ) if ( i <= 0 ) return false ; for ( j = i - 1 ; j < n ; j ++ ) { if ( str [ j + 1 ] <= str [ i - 1 ] ) { j ++ ; } str [ i - 1 ] = str [ j ] ; str [ j ] = temp ; } return true , str ; }
int polygonArea ( double X [ ] , double Y [ ] , int n ) { double area = 0.0 ; int j = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ; j = i ; } return abs ( area / 2.0 ) ; }
int equilibrium ( int arr [ ] ) { int leftsum = 0 , rightsum = 0 ; int n = arr . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { leftsum = 0 ; rightsum = 0 ; for ( int j = i ; j < n ; j ++ ) { leftsum += arr [ j ] ; } if ( leftsum == rightsum ) return i ; } return - 1 ; }
int chordCnt ( int A ) { int n = 2 * A ; int dpArray [ n + 1 ] ; dpArray [ 0 ] = 1 , dpArray [ 2 ] = 1 ; for ( int i = 4 ; i <= n ; i ++ ) dpArray [ i ] = 1 ; for ( int j = 0 ; j <= i - 1 ; j ++ ) dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - 2 - j ] ) ; return int ( dpArray [ n ] ) ; }
int compute ( int a , int b ) { int AM = ( a + b ) / 2 ; int GM = ( a * b ) ; int HM = ( GM * GM ) / AM ; return HM ; }
void findMajority ( int arr [ ] , int n ) { int maxCount = 0 ; int index = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] == arr [ j ] ) count ++ ; if ( count > maxCount ) { maxCount = count ; index = i ; } } if ( maxCount > n / 2 ) cout << arr [ index ] << " No ▁ Majority ▁ Element " ; else cout << " No ▁ Majority ▁ Element " ; }
bool isPerfectSquare ( int n ) { int i = 1 ; int the_sum = 0 ; while ( the_sum < n ) { the_sum += i ; if ( the_sum == n ) return true ; i += 2 ; } return false ; }
string findSubString ( string & str ) { int len1 = str . length ( ) ; int len2 = pat . length ( ) ; if ( len1 < len2 ) cout << " No ▁ such ▁ window ▁ exists " << endl ; int hash_pat [ no_of_chars ] ; int hash_str [ no_of_chars ] ; for ( int i = 0 ; i < len2 ; i ++ ) hash_pat [ str [ i ] ] ++ ; int count = 0 ; for ( int j = 0 ; j < len1 ; j ++ ) { if ( hash_pat [ str [ j ] ] != 0 && hash_str [ str [ j ] ] <= hash_pat [ str [ j ] ] ) count ++ ; if ( count == len2 ) { while ( hash_str [ str [ start ] ] > hash_pat [ str [ start ] ] ) { if ( hash_str [ str [ start ] ] ) { hash_str [ str [ start ] ] -- ; start ++ ; } len_window = j - start + 1 ; if ( min_len > len_window ) { min_len = len_window ; start_index = start ; } } } if ( start_index == - 1 ) cout << " No ▁ such ▁ window ▁ exists " << endl ; return string [ start_index : start_index + min_len ] ; }
int countDivisibleSubseq ( string str , int n ) { int l = str . length ( ) ; int dp [ l ] [ n ] ; dp [ 0 ] [ ( str [ 0 ] - '0' ) % n ] ++ ; for ( int i = 1 ; i < l ; i ++ ) dp [ i ] [ ( str [ i ] - '0' ) % n ] ++ ; for ( int j = 0 ; j < n ; j ++ ) dp [ i ] [ ( str [ i ] - '0' ) % n ] ++ ; for ( int i = 1 ; i < l ; i ++ ) { dp [ i ] [ ( str [ i ] - '0' ) % n ] ++ ; for ( int j = 0 ; j < n ; j ++ ) dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ; } return dp [ l - 1 ] [ 0 ] ; }
void pairs ( int arr [ ] , int n , int k ) { int smallest = INT_MAX ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( abs ( arr [ i ] + arr [ j ] - k ) < smallest ) { smallest = abs ( arr [ i ] + arr [ j ] - k ) ; count = 1 ; } else if ( abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++ ; } } cout << " Minimal ▁ Value ▁ = ▁ " << smallest << " Total ▁ Pairs ▁ = ▁ " << count << endl ; }
int nearestSmallerEqFib ( int n ) { if ( n == 0 || n == 1 ) return n ; int f1 = 0 , f2 = 1 , f3 = 0 ; while ( f3 <= n ) { f1 = f2 ; f2 = f3 ; f3 = f1 + f2 ; } return f2 ; }
void shuffle ( int card [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int r = i + ( random . randint ( 0 , 55 ) % ( 52 - i ) ) ; int tmp = card [ i ] ; card [ i ] = card [ r ] ; card [ r ] = tmp ; } }
int maxLen ( int arr [ ] ) { map < int , int > hash_map ; int max_len = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < arr . length ( ) ; i ++ ) { curr_sum += arr [ i ] ; if ( arr [ i ] is 0 && max_len is 0 ) { max_len = 1 ; } if ( curr_sum is 0 ) { max_len = i + 1 ; } else { hash_map [ curr_sum ] = i ; } } return max_len ; }
int maxLength ( string s , int n ) { int dp [ n ] [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) dp [ i ] [ i + 1 ] = 2 ; for ( int l = 2 ; l <= n ; l ++ ) { if ( s [ i ] == ' ( ' && s [ i + 1 ] == ' ) ' ) dp [ i ] [ i + 1 ] = 2 ; else for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( s [ i ] == ' ( ' && s [ j ] == ' ) ' ) i ++ ; if ( s [ i ] == ' ( ' && s [ j ] == ' ) ' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ] ; } } return dp [ 0 ] [ n - 1 ] ; }
double summingSeries ( double n ) { return pow ( n , 2 ) ; }
bool isSubsetSum ( int arr [ ] , int n , int sum ) { bool subset [ 3 ] [ n + 1 ] ; for ( int i = 0 ; i <= 3 ; i ++ ) subset [ i ] [ 0 ] = true ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= sum ; j ++ ) { if ( i == 0 ) subset [ i % 2 ] [ j ] = false ; else if ( arr [ i - 1 ] <= j ) { subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j - arr [ i - 1 ] ] || subset [ ( i + 1 ) % 2 ] [ j ] ; } else { subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j ] ; } } } return subset [ n % 2 ] [ sum ] ; }
int findExtra ( int arr1 [ ] , int arr2 [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ; return n ; }
int numberOfPermWithKInversion ( int N , int K ) { if ( N == 0 ) return 0 ; if ( K == 0 ) return 1 ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i <= N - 1 ) sum += numberOfPermWithKInversion ( N - 1 , K - i ) ; } memo [ N ] [ K ] = sum ; } return sum ; }
int removeConsecutiveSame ( int v [ ] ) { vector < int > st ; for ( int i = 0 ; i < v . length ( ) ; i ++ ) { if ( st . empty ( ) ) { st . push ( v [ i ] ) ; } else { int str = st . top ( ) ; if ( str == v [ i ] ) st . pop ( ) ; else st . push ( v [ i ] ) ; } } return st . size ( ) ; }
void find ( string list1 , string list2 ) { int res [ ] ; int max_possible_sum = ( list1 . length ( ) + list2 . length ( ) ) - 2 ; for ( int sum = 0 ; sum <= max_possible_sum ; sum ++ ) { for ( int i = 0 ; i < max_possible_sum ; i ++ ) { if ( i < list1 . length ( ) && ( sum - i ) < list2 . length ( ) && list1 [ i ] == list2 [ sum - i ] ) res . push ( list1 [ i ] ) ; } } if ( res . empty ( ) ) break ; for ( int i = 0 ; i < res . size ( ) ; i ++ ) cout << res [ i ] << " ▁ " ; }
int firstNonRepeating ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < n ; j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ; if ( j == n ) return arr [ i ] ; } return - 1 ; }
int search ( int arr [ ] , int x ) { int n = arr . size ( ) ; for ( int j = 0 ; j < n ; j ++ ) if ( x == arr [ j ] ) return j ; return - 1 ; }
void middlesum ( int mat [ ] [ MAX ] , int n ) { int row_sum = 0 , col_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) row_sum += mat [ n / 2 ] [ i ] ; cout << " sum ▁ of ▁ middle ▁ row ▁ = ▁ " << row_sum << " col sum ▁ " << col_sum << endl ; for ( int i = 0 ; i < n ; i ++ ) { col_sum += mat [ i ] [ n / 2 ] ; cout << " sum ▁ of ▁ middle ▁ column ▁ = ▁ " << col_sum << endl ; }
int moduloMultiplication ( int a , int b , int mod ) { int res = 0 ; a = a % mod ; while ( b ) { if ( b & 1 ) res = ( res + a ) % mod ; a = ( 2 * a ) % mod ; b >>= 1 ; } return res ; }
void pythagoreanTriplets ( int limits ) { int c = 0 , m = 2 ; while ( c < limits ) { c = m + 1 ; while ( m < m ) { for ( int n = 1 ; n <= m ; n ++ ) { int a = m * m - n * n ; int b = 2 * m * n ; c = m * m + n * n ; if ( c > limits ) break ; c = m * m + n * n ; if ( c > limits ) break ; c = m * m + n * n ; if ( c > limits ) break ; c = m * m + n * n ; } m ++ ; } } cout << a << b << c ; }
int findSum ( int n ) { return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ; }
int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 || n == 2 ) return 1 ; if ( f [ n ] ) return f [ n ] ; if ( n & 1 ) { int k = ( n + 1 ) / 2 ; else { int k = ( n + 1 ) / 2 ; if ( n & 1 ) { f [ n ] = fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ; } else { f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k - 1 ) ; } } return f [ n ] ; }
int largestPower ( int n , int p ) { int x = 0 ; while ( n ) n /= p ; x += n ; }
bool isIdentity ( int mat [ ] [ N ] ) { int row , col ; for ( row = 0 ; row < N ; row ++ ) { for ( col = 0 ; col < N ; col ++ ) { if ( row == col && mat [ row ] [ col ] != 1 ) return false ; else if ( row != col && mat [ row ] [ col ] != 0 ) return false ; } } return true ; }
int minCells ( int mat [ ] [ MAX ] , int m , int n ) { int dp [ m ] [ n ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ i ] [ j ] != MAX && ( j + mat [ i ] [ j ] ) < n && ( dp [ i ] [ j ] + 1 ) < dp [ i ] [ j + mat [ i ] [ j ] ] ) dp [ i ] [ j + mat [ i ] [ j ] = dp [ i ] [ j ] + 1 ; } } if ( dp [ m - 1 ] [ n - 1 ] != MAX ) return dp [ m - 1 ] [ n - 1 ] ; return - 1 ; }
void arrangeString ( string str , int x , int y ) { int count_0 = 0 , count_1 = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( str [ i ] == '0' ) count_0 ++ ; else count_1 ++ ; } while ( count_0 > 0 || count_1 > 0 ) { for ( int i = 0 ; i < x ; i ++ ) { if ( count_0 > 0 ) cout << " 0 " ; count_0 -- ; } for ( int j = 0 ; j < y ; j ++ ) cout << " 1 " ; } }
int getLevenstein ( int inpt [ ] ) { int revInput [ MAX ] ; int n = strlen ( inpt ) ; int dp [ n ] [ n + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i <= n ; i ++ ) dp [ 0 ] [ i ] = i ; for ( int i = 1 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = i ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( inpt [ i - 1 ] == revInput [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } int res = INT_MAX ; for ( int i = n ; i >= 0 ; i -- ) { res = min ( res , dp [ i ] [ j ] ) ; if ( i < n ) res = min ( res , dp [ i + 1 ] [ j ] ) ; if ( i > 0 ) res = min ( res , dp [ i - 1 ] [ j ] ) ; i -- ; j ++ ; } return res ; }
int carAssembly ( int a [ ] [ MAX ] , int t [ ] , int e , int x [ ] ) { int NUM_STATION = a [ 0 ] . size ( ) ; int T1 [ NUM_STATION ] , T2 [ NUM_STATION ] ; for ( int i = 0 ; i < NUM_STATION ; i ++ ) T1 [ i ] = e [ 0 ] + a [ 0 ] [ 0 ] ; T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ; for ( int i = 1 ; i < NUM_STATION ; i ++ ) { T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 1 ] [ i ] ) ; T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ; } return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ; }
int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }
void findTriplets ( int arr [ ] , int n ) { bool found = false ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int l = i + 1 ; int r = n - 1 ; int x = arr [ i ] ; while ( l < r ) { if ( x + arr [ l ] + arr [ r ] == 0 ) cout << x << arr [ l ] << arr [ r ] << endl ; else if ( x + arr [ l ] + arr [ r ] < 0 ) l ++ ; else r -- ; } } if ( found == false ) cout << " ▁ No ▁ Triplet ▁ Found " ; }
int getOddOccurrence ( int arr [ ] ) { int res = 0 ; for ( int element = 0 ; element < arr . size ( ) ; element ++ ) res = res ^ element ; return res ; }
int maxTasks ( int high [ ] , int low [ ] , int n ) { if ( n <= 0 ) return 0 ; return max ( high [ n - 1 ] + maxTasks ( high , low , ( n - 2 ) ) , low [ n - 1 ] + maxTasks ( high , low , ( n - 1 ) ) ; }
void printOtherSides ( int n ) { if ( n & 1 ) { if ( n == 1 ) cout << - 1 << " ▁ " ; else { int b = ( n * n - 1 ) / 2 ; int c = ( n * n + 1 ) / 2 ; cout << " b ▁ = " << b << " , ▁ c ▁ = " << c ; } } else { if ( n == 2 ) cout << - 1 << " ▁ " ; else { b = n * n / 4 - 1 ; cout << n * n / 4 + 1 << " ▁ " ; } } }
void printUnsorted ( int arr [ ] , int n ) { int e = n - 1 ; for ( int s = 0 ; s < n - 1 ; s ++ ) { if ( arr [ s ] > arr [ s + 1 ] ) break ; if ( s == n - 1 ) cout << " The ▁ complete ▁ array ▁ is ▁ sorted " << endl ; } int max = arr [ s ] ; int min = arr [ s ] ; for ( int i = s + 1 ; i <= e ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; if ( arr [ i ] < min ) min = arr [ i ] ; } } cout << " The ▁ unsorted ▁ subarray ▁ which ▁ makes ▁ the ▁ given ▁ array " << endl ; for ( int i = n - 1 ; i >= e + 1 ; i -- ) { if ( arr [ i ] < max ) e = i ; break ; } } cout << " The ▁ unsorted ▁ subarray ▁ which ▁ makes ▁ the ▁ given ▁ array ▁ " << endl ; }
int circle ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; int radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ; if ( distSq == radSumSq ) return 1 ; else return - 1 ; }
void countDistinct ( int arr [ ] , int k , int n ) { map < int , int > mp ; int dist_count = 0 ; for ( int i = 0 ; i < k ; i ++ ) mp [ arr [ i ] ] ++ ; cout << dist_count << endl ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp [ arr [ i ] ] == 0 ) dist_count ++ ; mp [ arr [ i ] ] ++ ; } cout << dist_count << endl ; }
int findArea ( int a ) { int area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) * a * a ) / 4 ; return area ; }
int countRotationsDivBy8 ( char n [ ] ) { int l = n . length ( ) ; int count = 0 ; if ( l == 1 ) return 1 ; if ( l == 2 ) { int first = n [ 0 ] * 10 + n [ 1 ] ; int second = n [ 1 ] * 10 + n [ 0 ] ; if ( first % 8 == 0 ) count ++ ; if ( second % 8 == 0 ) count ++ ; if ( third % 8 == 0 ) count ++ ; } int threeDigit = 0 ; for ( int i = 0 ; i < ( l - 2 ) ; i ++ ) { threeDigit = ( int ) n [ i ] * 100 + int ( n [ i + 1 ] ) * 10 + int ( n [ i + 2 ] ) ; if ( threeDigit % 8 == 0 ) count ++ ; } threeDigit = ( int ) n [ l - 2 ] ) * 100 + int ( n [ l - 1 ] ) * 10 + int ( n [ 0 ] ) ; if ( threeDigit % 8 == 0 ) count ++ ; return count ; }
int lcs ( int dp [ ] [ MAX ] , int arr1 [ ] , int n , int arr2 [ ] , int m , int k ) { if ( k < 0 ) return - ( 10 ** 7 ) ; if ( n < 0 || m < 0 ) return 0 ; int ans = dp [ n ] [ m ] [ k ] ; if ( ans != - 1 ) return ans ; ans = max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) , lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k ) ) ; if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) ans = max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k ) ) ; ans = max ( ans , lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k ) ) ; return ans ; }
int editDistDP ( char str1 [ ] , char str2 [ ] , int m , int n ) { int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) dp [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j <= n ; j ++ ) dp [ 0 ] [ j ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( i == 0 ) dp [ i ] [ j ] = j ; else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; } } return dp [ m ] [ n ] ; }
int countOps ( int A [ ] [ MAX ] , int B [ ] [ MAX ] , int m , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1 ; } } int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) result += abs ( A [ i ] [ 0 ] ) ; return ( result ) ; }
void longestAlternating ( int arr [ ] , int n ) { int count [ n ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] * arr [ i + 1 ] < 0 ) count [ i ] = count [ i + 1 ] + 1 ; else count [ i ] = 1 ; } i = 0 ; while ( i < n ) cout << count [ i ] << " ▁ ▁ " ; }
void printDivisors ( int n ) { int list [ 100 ] ; for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) cout << i << " ▁ " ; else cout << i << " ▁ " ; } } for ( int i = list . size ( ) - 1 ; i >= 0 ; i -- ) cout << i << " ▁ " ; }
bool isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) pow = pow * x ; return ( pow == y ) ; }
int maxSum ( int arr [ ] , int N , int k ) { int MS [ N ] ; memset ( MS , 0 , sizeof ( MS ) ) ; MS [ N - 1 ] = arr [ N - 1 ] ; for ( int i = N - 2 ; i >= 0 ; i -- ) { if ( i + k + 1 >= N ) MS [ i ] = max ( arr [ i ] , MS [ i + 1 ] ) ; else MS [ i ] = max ( arr [ i ] + MS [ i + k + 1 ] , MS [ i + 1 ] ) ; } return MS [ 0 ] ; }
void printGrouped ( string & str ) { int n = str . length ( ) ; int count [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) count [ str [ i ] - " a " ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { while ( count [ str [ i ] - " a " ] ) cout << str [ i ] ; count [ str [ i ] - " a " ] -- ; } }
int sortedCount ( int mat [ R ] [ C ] ) { int result = 0 ; for ( int i = 0 ; i < r ; i ++ ) { int j ; for ( j = 0 ; j < c - 1 ; j ++ ) if ( mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] ) break ; if ( j == c - 2 ) result ++ ; for ( int i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < c - 1 ; j ++ ) { if ( mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] ) break ; if ( c > 1 && j == 1 ) result ++ ; } } return result ; }
int countSub ( string ss ) { int last [ MAX_CHAR ] ; int n = ss . length ( ) ; int dp [ n + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) dp [ i ] = 2 * dp [ i - 1 ] ; if ( last [ str ( ss [ i - 1 ] ) ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ str ( ss [ i - 1 ] ) ] ; last [ str ( ss [ i - 1 ] ) ] = i - 1 ; return dp [ n ] ; }
void findLIS ( int A [ ] , int n ) { int hash [ n ] ; int LIS_size , LIS_index ; hash [ A [ 0 ] ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( A [ i ] - 1 ] == 0 ) hash [ A [ i ] - 1 ] = 1 ; hash [ A [ i ] ] = hash [ A [ i ] - 1 ] + 1 ; if ( LIS_size < hash [ A [ i ] ] ) { LIS_size = hash [ A [ i ] ] ; LIS_index = A [ i ] ; } } cout << " LIS _ size ▁ = ▁ " << LIS_size << " ▁ " << endl ; for ( int start = LIS_index - LIS_size + 1 ; start <= LIS_index ; start ++ ) cout << start << " ▁ " ; }
void printMaxOfMin ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { int maxOfMin = INT_MIN ; for ( int i = 0 ; i <= n - k ; i ++ ) { int min = arr [ i ] ; for ( int j = 0 ; j < k ; j ++ ) { if ( arr [ i + j ] < min ) min = arr [ i + j ] ; } if ( min > maxOfMin ) maxOfMin = min ; } cout << maxOfMin << " ▁ " ; }
int maximumZeros ( int arr [ ] [ MAX ] , int n , int k ) { int subset [ k + 1 ] [ MAX ] ; subset [ 0 ] [ 0 ] = 0 ; for ( int p = 0 ; p < n ; p ++ ) { int pw2 = 0 , pw5 = 0 ; while ( ! p % 2 ) pw2 ++ ; while ( ! p % 5 ) pw5 ++ ; for ( int i = k - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < MAX5 ; j ++ ) { if ( subset [ i ] [ j ] != - 1 ) subset [ i + 1 ] [ j + pw5 ] = max ( subset [ i + 1 ] [ j + pw5 ] , ( subset [ i ] [ j ] + pw2 ) ) ; } } int ans = 0 ; for ( int i = 0 ; i < MAX5 ; i ++ ) ans = max ( ans , min ( i , subset [ k ] [ i ] ) ) ; return ans ; }
int largestSubset ( int a [ ] , int n ) { int dp [ n ] ; sort ( a , a + n ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) dp [ i ] = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { int mxm = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) if ( a [ j ] % a [ i ] == 0 ) mxm = max ( mxm , dp [ j ] ) ; dp [ i ] = 1 + mxm ; } return max ( dp ) ; }
string encodedChar ( string str , int k ) { string expand = " " ; int freq = 0 ; int i = 0 ; while ( str [ i ] != ' \0' ) { string temp = " " ; int freq = 0 ; while ( i < str . length ( ) && str [ i ] >= ' a ' && str [ i ] <= ' z ' ) { temp += str [ i ] ; i ++ ; } while ( i < str . length ( ) && str [ i ] >= ' 1' && str [ i ] <= '9' ) { freq = freq * 10 + str [ i ] - '0' ; i ++ ; } for ( int j = 1 ; j <= freq ; j ++ ) expand += temp ; if ( freq == 0 ) expand += temp ; } return expand [ k - 1 ] ; }
int countNum ( int arr [ ] , int n ) { map < int , int > s ; int count = 0 , maxm = INT_MAX ; int minm = INT_MIN ; int maxm = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { s [ arr [ i ] ] = 1 ; if ( arr [ i ] < minm ) minm = arr [ i ] ; if ( arr [ i ] > maxm ) maxm = arr [ i ] ; } for ( int i = minm ; i <= maxm ; i ++ ) { if ( s [ i ] == INT_MAX ) count ++ ; } return count ; }
int countPairs ( int arr [ ] , int n ) { map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; int ans = 0 ; for ( int it = 0 ; it < mp . size ( ) ; it ++ ) { int count = mp [ it ] ; ans += ( count * ( count - 1 ) ) / 2 ; } return ans ; }
int maxDiff ( int arr [ ] , int n ) { int result = 0 ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) result += abs ( arr [ i ] ) ; else if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += abs ( arr [ n - 1 ] ) ; else pass ; if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += abs ( arr [ n - 1 ] ) ; } return result ; }
int middleOfThree ( int a , int b , int c ) { if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ; if ( ( b < a && a < c ) || ( c < a && a < b ) ) return a ; else return c ; }
int countarray ( int n , int k , int x ) { int dp [ n ] ; dp . push ( 0 ) ; dp . push ( 1 ) ; for ( int i = 2 ; i < n ; i ++ ) dp . push ( ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp [ i - 2 ] ) ; return ( ( k - 1 ) * dp [ n - 2 ] if ( x == 1 else dp [ n - 1 ] ) ; }
int nswp ( int n ) { if ( n == 0 || n == 1 ) return 1 ; return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ; }
int fib ( int n , int lookup [ ] ) { if ( n == 0 || n == 1 ) lookup [ n ] = n ; else if ( lookup [ n ] is None ) lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , lookup ) ; return lookup [ n ] ; }
int countNums ( int n , int x , int y ) { bool arr [ n + 2 ] ; if ( x <= n ) arr [ x ] = true ; if ( y <= n ) arr [ y ] = true ; int result = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( arr [ i ] ) { if ( i + x <= n ) arr [ i + x ] = true ; if ( i + y <= n ) arr [ i + y ] = true ; } result = result + 1 ; } return result ; }
int countPS ( char str [ ] ) { int N = strlen ( str ) ; int cps [ N ] [ N + 2 ] ; memset ( cps , 0 , sizeof cps ) ; for ( int i = 0 ; i < N ; i ++ ) cps [ i ] [ i ] = 1 ; for ( int L = 2 ; L <= N ; L ++ ) { for ( int i = 0 ; i < N ; i ++ ) { int k = L + i - 1 ; if ( k < N ) { cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] + 1 ) ; else cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] - cps [ i + 1 ] [ k - 1 ] ) ; } } } return cps [ 0 ] [ N - 1 ] ; }
string decimalToBinary ( int num , int k_prec ) { string binary = " " ; int Integral = num - Integral ; int fractional = num - Integral ; while ( Integral ) { int rem = Integral % 2 ; binary += str ( rem ) ; Integral /= 2 ; } binary = binary [ : : - 1 ] ; binary += ' . ' ; while ( k_prec ) { fractional *= 2 ; fract_bit = int ( fractional ) ; if ( fract_bit == 1 ) fractional -= fract_bit ; else binary += '1' ; } } return binary ; }
void countParenth ( char symb [ ] , char oper [ ] , int n ) { int F [ n ] [ n ] ; int T [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { F [ i ] [ i ] = 1 ; else T [ i ] [ i ] = 0 ; } for ( int gap = 1 ; gap <= n ; gap ++ ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < gap ; j ++ ) { int tik = T [ i ] [ k ] + F [ i ] [ k ] ; int tkj = T [ k + 1 ] [ j ] + F [ k + 1 ] [ j ] ; if ( oper [ k ] == ' & ' ) { T [ i ] [ j ] += T [ i ] [ k ] * T [ k + 1 ] [ j ] ; F [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * T [ k + 1 ] [ j ] ) ; } if ( oper [ k ] == ' | ' ) { F [ i ] [ j ] += F [ i ] [ k ] * F [ k + 1 ] [ j ] ; T [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * F [ k + 1 ] [ j ] ) ; } if ( oper [ k ] == ' ^ ' ) { T [ i ] [ j ] += ( F [ i ] [ k ] * T [ k + 1 ] [ j ] ; } } }
unsigned int countSetBits ( unsigned int n ) { if ( n == 0 ) return 0 ; else return ( n & 1 ) + countSetBits ( n >> 1 ) ; }
int longestCommonSum ( int arr1 [ ] , int arr2 [ ] , int n ) { int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum1 = 0 , sum2 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum1 += arr1 [ j ] ; sum2 += arr2 [ j ] ; if ( sum1 == sum2 ) { int len = j - i + 1 ; if ( len > maxLen ) maxLen = len ; } } } return maxLen ; }
int maxTripletSum ( int arr [ ] , int n ) { int sm = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) sm = arr [ i ] + arr [ j ] + arr [ k ] ; } } return sm ; }
int evaluateBoolExpr ( string s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n - 2 ; i += 2 ) { if ( s [ i + 1 ] == " A " ) { if ( s [ i + 2 ] == "0" || s [ i ] == "0" ) s [ i + 2 ] = "0" ; else s [ i + 2 ] = "1" ; } else if ( s [ i + 1 ] == " B " ) { if ( s [ i + 2 ] == "1" || s [ i ] == "1" ) s [ i + 2 ] = "1" ; else { s [ i + 2 ] = "0" ; } } else { if ( s [ i + 2 ] == s [ i ] ) s [ i + 2 ] = "1" ; } } return s [ n - 1 ] - " 0" ; }
int findNth ( int n ) { int nthElement = 19 + ( n - 1 ) * 9 ; int outliersCount = log10 ( nthElement ) ; nthElement += 9 * outliersCount ; return nthElement ; }
int numofAP ( int a [ ] , int n ) { int minarr = INT_MAX ; int maxarr = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) minarr = min ( minarr , a [ i ] ) ; maxarr = max ( maxarr , a [ i ] ) ; int dp [ n ] ; int ans = n + 1 ; for ( int d = ( minarr - maxarr ) ; d ++ ) { int sum [ a [ i ] - d ] ; int dp [ i ] = 1 ; if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ] ; ans += dp [ i ] - 1 ; sum [ a [ i ] ] += dp [ i ] ; } return ans ; }
int countSol ( int coeff [ ] , int start , int end , int rhs ) { if ( rhs == 0 ) return 1 ; int result = 0 ; for ( int i = start ; i <= end ; i ++ ) { if ( coeff [ i ] <= rhs ) result += countSol ( coeff , i , end , rhs - coeff [ i ] ) ; } return result ; }
int minSwaps ( int arr [ ] [ MAX ] ) { int n = arr . size ( ) ; int arrpos [ n ] ; sort ( arrpos , arrpos + n ) ; for ( int k = 0 ; k < n ; k ++ ) arrpos [ k ] [ 0 ] = i ; bool vis [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] || arrpos [ i ] [ 0 ] == i ) continue ; int cycle_size = 0 ; for ( int j = i ; j < n ; j ++ ) { vis [ j ] = true ; j = arrpos [ j ] [ 0 ] ; cycle_size ++ ; } if ( cycle_size > 0 ) ans += ( cycle_size - 1 ) ; } return ans ; }
void spiralFill ( int m , int n , int a [ R ] [ C ] ) { int val = 1 ; int k = 0 , l = 0 ; while ( k < m && l < n ) { for ( int i = l ; i < n ; ++ i ) a [ k ] [ i ] = val ; val ++ ; } for ( int i = k ; i < m ; ++ i ) a [ i ] [ n - 1 ] = val ; val ++ ; if ( k < m ) { for ( int i = n - 1 ; i >= l ; -- i ) { a [ m - 1 ] [ i ] = val ; val ++ ; } m -- ; } if ( l < n ) { for ( int i = m - 1 ; i >= k ; -- i ) { a [ i ] [ l ] = val ; val ++ ; } l ++ ; } }
void printClosest ( int ar1 [ ] , int ar2 [ ] , int m , int n , int x ) { int diff = INT_MAX ; int l = 0 , r = n - 1 ; while ( l < m && r >= 0 ) { if ( abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) { res_l = l ; res_r = r ; diff = abs ( ar1 [ l ] + ar2 [ r ] - x ) ; if ( ar1 [ l ] + ar2 [ r ] > x ) r -- ; else l ++ ; } } cout << " The ▁ closest ▁ pair ▁ is ▁ [ ▁ " << ar1 [ res_l ] << " , ▁ " << ar2 [ res_r ] << " ] " ; }
int minimumBox ( int arr [ ] , int n ) { queue < int > q ; sort ( arr , arr + n ) ; for ( int i = 1 ; i < n ; i ++ ) { int now = q [ 0 ] ; if ( arr [ i ] >= 2 * now ) q . popleft ( ) ; q . push ( arr [ i ] ) ; } return len ( q ) ; }
int findInteger ( int arr [ ] , int n ) { unordered_map < int , int > hash ; int maximum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < 0 ) hash [ abs ( i ) ] = - 1 ; else hash [ abs ( i ) ] -- ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i < 0 ) hash [ i ] = - 1 ; else hash [ i ] = hash . get ( i , 0 ) + 1 ; } } for ( int i = 0 ; i < arr . size ( ) ; i ++ ) if ( hash [ i ] > 0 ) return i ; }
void convertOpposite ( string str ) { int ln = str . length ( ) ; for ( int i = 0 ; i < ln ; i ++ ) { if ( str [ i ] >= ' a ' && str [ i ] <= ' z ' ) str [ i ] = ( char ) ( str [ i ] - 32 ) ; else if ( str [ i ] >= ' A ' && str [ i ] <= ' Z ' ) str [ i ] = ( char ) ( str [ i ] + 32 ) ; else if ( str [ i ] >= ' A ' && str [ i ] <= ' Z ' ) str [ i ] = ( char ) ( str [ i ] ) - 32 ; else if ( str [ i ] >= ' A ' && str [ i ] <= ' Z ' ) str [ i ] = ( char ) ( str [ i ] + 32 ) ; } }
int decimalToBinary ( int N ) { int B_Number = 0 ; int cnt = 0 ; while ( N != 0 ) { int rem = N % 2 ; int c = pow ( 10 , cnt ) ; B_Number += rem * c ; N /= 2 ; cnt ++ ; } return B_Number ; }
int findRepeating ( int arr [ ] , int n ) { unordered_set < int > S ; for ( int i = 0 ; i < n ; i ++ ) { if ( S . find ( arr [ i ] ) != S . end ( ) ) return arr [ i ] ; S . insert ( arr [ i ] ) ; } return - 1 ; }
void transpose ( int A [ ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A [ i ] [ j ] ; } }
void findConsecutive ( int n ) { int start = 1 , end = ( N + 1 ) / 2 ; while ( start < end ) { int sum = 0 ; for ( int i = start ; i <= end ; i ++ ) { sum = sum + i ; if ( sum == N ) break ; for ( int j = start ; j <= end ; j ++ ) cout << j << " ▁ " ; } cout << endl ; } }
void printSubsequences ( string str ) { int n = str . length ( ) ; int opsize = pow ( 2 , n - 1 ) ; for ( int counter = 0 ; counter < opsize ; counter ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cout << str [ j ] << " ▁ " ; if ( counter & ( 1 << j ) ) cout << " ▁ " ; } cout << endl ; } }
int maxArea ( int a , int b , int c , int d ) { int semiperimeter = ( a + b + c + d ) / 2 ; return ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) ; }
int Right_most_setbit ( int num ) { int pos = 1 ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { if ( num & ( 1 << i ) ) pos ++ ; else break ; } return pos ; }
void printRoman ( int number ) { int num [ 12 ] ; int sym [ 12 ] ; memset ( num , 0 , sizeof ( num ) ) ; int i , div ; for ( i = 1 ; number >= num [ i ] ; i ++ ) { sym [ i ] = " I " , " IV " , " X " , " XL " , " L " , " XC " , " C " , " D " , " CM " ] ; while ( div ) { div = number / num [ i ] ; number %= num [ i ] ; div -- ; } i -- ; } }
bool isSubsetSum ( int set [ ] , int n , int sum ) { if ( sum == 0 ) return true ; if ( n == 0 && sum != 0 ) return false ; if ( set [ n - 1 ] > sum ) return isSubsetSum ( set , n - 1 , sum ) ; return isSubsetSum ( set , n - 1 , sum ) || isSubsetSum ( set , n - 1 , sum - set [ n - 1 ] ) ; }
int countDigits ( int a , int b ) { if ( a == 0 || b == 0 ) return 1 ; return log10 ( abs ( a ) ) + log10 ( abs ( b ) ) + 1 ; }
int CountWays ( int n ) { int table [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) table [ j ] += table [ j - i ] ; } return table [ n ] ; }
void twoWaySort ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] & 1 ) arr [ i ] *= - 1 ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] & 1 ) arr [ i ] *= - 1 ; } }
int PowerOFPINnfactorial ( int n , int p ) { int ans = 0 ; int temp = p ; while ( temp <= n ) ans += n / temp ; return ans ; }
int findMaxValue ( int mat [ R ] [ C ] ) { int maxValue = 0 ; for ( int a = 0 ; a <= N - 2 ; a ++ ) { for ( int b = 0 ; b <= N - 1 ; b ++ ) { for ( int d = a + 1 ; d <= N ; d ++ ) { for ( int e = b + 1 ; e <= N ; e ++ ) { if ( maxValue < int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) { maxValue = int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ; } } } return maxValue ; }
bool findTriplet ( int a1 [ ] , int a2 [ ] , int a3 , int n1 , int n2 , int n3 , int sum ) { unordered_set < int > S ; for ( int i = 0 ; i < n1 ; i ++ ) S . insert ( a1 [ i ] ) ; for ( int i = 0 ; i < n2 ; i ++ ) for ( int j = 0 ; j < n3 ; j ++ ) S . insert ( a2 [ i ] - a3 [ j ] ) ; return true ; }
int getOddOccurrence ( int arr [ ] , int arr_size ) { for ( int i = 0 ; i < arr_size ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < arr_size ; j ++ ) if ( arr [ i ] == arr [ j ] ) ++ count ; if ( count % 2 != 0 ) return arr [ i ] ; } return - 1 ; }
void factorize ( int n ) { int count = 0 ; while ( ( n % 2 > 0 ) == false ) n >>= 1 ; count ++ ; for ( int i = 3 ; i <= sqrt ( n ) ; i ++ ) { count = 0 ; while ( n % i == 0 ) count ++ ; n = n / i ; if ( count > 0 ) cout << i << count ; } if ( n > 2 ) cout << n << 1 ; }
int findSmallestDifference ( int A [ ] , int B [ ] , int m , int n ) { sort ( A , A + m ) ; sort ( B , B + n ) ; int a = 0 , b = 0 , result = INT_MAX ; while ( a < m && b < n ) { if ( abs ( A [ a ] - B [ b ] ) < result ) { result = abs ( A [ a ] - B [ b ] ) ; if ( A [ a ] < B [ b ] ) a ++ ; else b ++ ; } } return result ; }
bool check ( string s ) { if ( s . length ( ) >= 10 ) return true ; for ( int i = 1 ; i <= len ( s ) ; i ++ ) { for ( int j = i + 1 ; j <= len ( s ) ; j ++ ) { for ( int k = j + 1 ; k <= len ( s ) ; k ++ ) { string s1 = s [ 0 ] ; s2 = s [ i : j - i ] ; s3 = s [ j : k - j ] ; s4 = s [ k : len ( s ) - k ] ; if ( s1 != s2 && s1 != s3 && s2 != s4 && s3 != s4 ) return true ; } } } return false ; }
bool isPath ( int arr [ R ] [ COL ] ) { int i , j ; for ( i = 1 ; i < row ; i ++ ) if ( arr [ i ] [ 0 ] != - 1 ) arr [ i ] [ 0 ] = arr [ i - 1 ] [ 0 ] ; for ( j = 0 ; j < col ; j ++ ) if ( arr [ 0 ] [ j ] != - 1 ) arr [ 0 ] [ j ] = arr [ 0 ] [ j - 1 ] ; for ( i = 1 ; i < row ; i ++ ) { for ( j = 1 ; j < col ; j ++ ) if ( arr [ i ] [ j ] != - 1 ) arr [ i ] [ j ] = max ( arr [ i ] [ j - 1 ] , arr [ i - 1 ] [ j ] ) ; } } return ( arr [ row - 1 ] [ col - 1 ] == 1 ) ; }
int bitonicGenerator ( int arr [ ] , int n ) { int i = 1 , j = n - 1 ; if ( j % 2 != 0 ) { j ++ ; i ++ ; } while ( i < j ) { arr [ j ] , arr [ i ] = arr [ i ] , arr [ j ] ; i = i + 2 ; j = j - 2 ; } int arr_f [ ] , arr_s [ ] ; for ( int i = 0 ; i < n ; i ++ ) { arr_f . push ( arr [ i ] ) ; i = i + 1 ; } arr_s . sort ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr_s . push ( arr [ i ] ) ; i = i + 1 ; } arr_f . sort ( ) ; } return arr_f ; }
int solve ( int dp [ ] [ MAX ] , int a [ ] , int low , int high , int turn ) { if ( low == high ) return a [ low ] * turn ; if ( dp [ low ] [ high ] != 0 ) return dp [ low ] [ high ] ; dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp , a , low + 1 , high , turn + 1 ) , a [ high ] * turn + solve ( dp , a , low , high - 1 , turn + 1 ) ) ; return dp [ low ] [ high ] ; }
void direction ( int R , int C ) { if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) cout << " Left " ; if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) cout << " Up " ; if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) cout << " Right " ; if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) cout << " Up " ; if ( R != C && R % 2 != 0 && R < C ) cout << " Right " ; if ( R != C && R % 2 != 0 && R < C ) cout << " Down " ; if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) cout << " Left " ; return ; if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) cout << " Right " ; return ; }
void splitString ( string str ) { string alpha = " " , num = " " , special = " " ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] . isdigit ( ) ) num = num + str [ i ] ; else if ( str [ i ] >= ' A ' && str [ i ] <= ' Z ' ) alpha += str [ i ] ; else if ( str [ i ] >= ' a ' && str [ i ] <= ' z ' ) special += str [ i ] ; } cout << alpha << num << " \n " ; cout << special << endl ; }
int binaryMedian ( int m [ R ] [ MAX ] , int r , int d ) { int mi = m [ 0 ] [ 0 ] ; int mx = 0 ; for ( int i = 0 ; i < r ; i ++ ) { if ( m [ i ] [ 0 ] < mi ) mi = m [ i ] [ 0 ] ; if ( m [ i ] [ d - 1 ] > mx ) mx = m [ i ] [ d - 1 ] ; } int desired = ( r * d + 1 ) / 2 ; while ( mi < mx ) { int mid = mi + ( mx - mi ) / 2 ; int place [ 0 ] = m [ i ] [ 0 ] + j ; if ( place [ 0 ] < desired ) mi ++ ; else mx = mid ; } cout << " Median ▁ is ▁ " << mi << endl ; }
void printDuplicates ( int arr [ ] ) { unordered_map < int , int > dict ; for ( int ele = 0 ; ele < arr . length ( ) ; ++ ele ) dict [ ele ] ++ ; for ( int item = 0 ; item < dict . size ( ) ; ++ item ) { if ( dict [ item ] > 1 ) cout << item << " ▁ " ; } cout << endl ; }
void fib ( int n ) { int a = 0 , b = 1 ; if ( n >= 0 ) cout << a << ' ▁ ' ; if ( n >= 1 ) cout << b << ' ▁ ' ; for ( int i = 2 ; i <= n ; i ++ ) cout << a + b << ' ▁ ' ; }
int swapNibbles ( int x ) { return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ; }
int countPS ( int i , int j ) { if ( i >= n || j < 0 ) return 0 ; if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ; if ( abs ( i - j ) == 1 ) dp [ i ] [ j ] = 3 ; else dp [ i ] [ j ] = 2 ; } if ( i == j ) dp [ 1 ] [ j ] = 1 ; else dp [ i ] [ j ] = countPS ( i + 1 , j ) + countPS ( i , j - 1 ) + 1 ; else dp [ i ] [ j ] = countPS ( i + 1 , j ) + countPS ( i + 1 , j - 1 ) - countPS ( i + 1 , j - 1 ) ; }
int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( n / i ) * i ; return sum ; }
int addOne ( int x ) { int m = 1 ; while ( x & m ) x = x ^ m ; return x ; }
bool check ( string str ) { int n = str . length ( ) ; int digitSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) digitSum += ( str [ i ] & 0x3f ) ; return ( digitSum % 9 == 0 ) ; }
int findMaxGCD ( int arr [ ] , int n ) { int high = 0 ; int i ; for ( i = 0 ; i < n ; ++ i ) high = max ( high , arr [ i ] ) ; int divisors [ high + 1 ] ; for ( i = 0 ; i < n ; ++ i ) { for ( j = 1 ; j <= math . sqrt ( arr [ i ] ) ; ++ j ) { if ( arr [ i ] % j == 0 ) divisors [ j ] = divisors [ j ] + 1 ; if ( j != arr [ i ] / j ) divisors [ arr [ i ] / j ] = divisors [ arr [ i ] / j ] ; } } i = high ; while ( i >= 1 ) if ( divisors [ i ] > 1 ) return i ; i = i - 1 ; } return 1 ; }
int minRemove ( int arr [ ] , int n ) { int LIS [ n ] ; int len = 0 ; for ( int i = 0 ; i < n ; i ++ ) LIS [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { LIS [ i ] = 1 ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 ) ; } } return ( n - len ) ; }
void computeLPSArray ( char pat [ ] , int M , int lps [ ] ) { int len = 0 ; for ( int i = 1 ; i < M ; i ++ ) { if ( pat [ i ] == pat [ len ] ) { len ++ ; lps [ i ] = len ; i ++ ; } else { if ( pat [ i ] == pat [ len ] ) { len -- ; lps [ i ] = 0 ; i ++ ; } else { lps [ i ] = 0 ; } } }
int numofsubset ( int arr [ ] , int n ) { int x [ n ] ; int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( x [ i ] + 1 != x [ i + 1 ] ) count ++ ; } return count ; }
void stoogesort ( int * arr , int l , int h ) { if ( l >= h ) return ; if ( arr [ l ] > arr [ h ] ) { int t = arr [ l ] ; arr [ l ] = arr [ h ] ; arr [ h ] = t ; } if ( h - l + 1 > 2 ) { int t = ( int ) ( ( h - l + 1 ) / 3 ) ; stoogesort ( arr , l , ( h - t ) ) ; stoogesort ( arr , l + t , ( h ) ) ; stoogesort ( arr , l + t , ( h ) ) ; } }
void solve ( int n , int t , char p [ ] ) { char s [ n ] ; for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < n - 1 ; j ++ ) { if ( s [ j ] == ' B ' && s [ j + 1 ] == ' G ' ) { s [ j ] = s [ j + 1 ] ; s [ j + 1 ] = temp ; j = j + 1 ; } } cout << s << endl ; }
int turnOffK ( int n , int k ) { if ( k <= 0 ) return n ; return ( n & ~ ( 1 << ( k - 1 ) ) ) ; }
void printEqualModNumbers ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int d = arr [ n - 1 ] - arr [ 0 ] ; int v [ n ] ; for ( int i = 1 ; i * i <= d ; i ++ ) { if ( d % i == 0 ) v . push ( i ) ; if ( i != d / i ) v . push ( d / i ) ; } for ( int i = 1 ; i < n ; i ++ ) { int temp = arr [ 0 ] % v [ i ] ; int j ; for ( j = 1 ; j < n ; j ++ ) { if ( arr [ j ] % v [ i ] != temp ) break ; if ( j == n ) cout << v [ i ] << " ▁ " ; } } }
int findMaximum ( int * arr , int low , int high ) { if ( low == high ) return arr [ low ] ; if ( high == low + 1 && arr [ low ] >= arr [ high ] ) return arr [ low ] ; if ( high == low + 1 && arr [ low ] < arr [ high ] ) return arr [ high ] ; if ( high == low + 1 && arr [ low ] < arr [ high ] ) return arr [ low ] ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ; if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ; else findMaximum ( arr , mid + 1 , high ) ; }
int stringReduction ( string str ) { int n = str . length ( ) ; int count [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) count [ str [ i ] - ' a ' ] ++ ; if ( count [ 0 ] == n || count [ 1 ] == n || count [ 2 ] == n ) return n ; if ( count [ 0 ] == n || count [ 1 ] == n || count [ 2 ] == n ) return n ; if ( count [ 0 ] % 2 == ( count [ 1 ] % 2 ) && ( count [ 2 ] % 2 ) ) return 2 ; return 1 ; }
int KnapSack ( int val [ ] , int wt [ ] , int n , int W ) { int dp [ W ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] = 0 ; for ( int j = W ; j < wt [ i ] ; j ++ ) dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ; return dp [ W ] ; }
int findSum ( int n ) { int multiTerms = n * ( n + 1 ) / 2 ; int sm = multiTerms ; for ( int i = 2 ; i <= n ; i ++ ) multiTerms = multiTerms - ( i - 1 ) ; sm = sm + multiTerms * i ; return sm ; }
void recursiveReverse ( char str [ ] ) { stack < char > stack ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) stack . push ( str [ i ] ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) str [ i ] = stack . top ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { str [ i ] = stack . pop ( ) ; } }
int subArraySum ( int arr [ ] , int n , int sum ) { for ( int i = 0 ; i < n ; i ++ ) { int curr_sum = arr [ i ] ; int j ; for ( j = i + 1 ; j <= n ; j ++ ) { if ( curr_sum == sum ) cout << " sum ▁ found ▁ between " << ( i , j - 1 ) << " " ; return 1 ; } curr_sum = curr_sum + arr [ j ] ; if ( curr_sum > sum || j == n ) break ; curr_sum = curr_sum + arr [ j ] ; } cout << " No ▁ subarray ▁ found " ; return 0 ; }
int getSingle ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { int sm = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] & x ) sm ++ ; if ( sm % 3 ) result |= x ; } } return result ; }
int getModulo ( int n , int d ) { return ( n & ( d - 1 ) ) ; }
bool allCharactersSame ( string s ) { int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) if ( s [ i ] != s [ 0 ] ) return false ; return true ; }
int maxDecimalValue ( int mat [ ] [ MAX ] , int i , int j , int p ) { if ( i >= N || j >= N ) return 0 ; int result = max ( maxDecimalValue ( mat , i , j + 1 , p + 1 ) , maxDecimalValue ( mat , i + 1 , j , p + 1 ) ) ; if ( mat [ i ] [ j ] == 1 ) return pow ( 2 , p ) + result ; else return result ; }
int countBT ( int h ) { int MOD = 100000000 ; int dp [ h + 1 ] ; dp [ 0 ] = 1 , dp [ 1 ] = 1 ; for ( int i = 2 ; i <= h ; i ++ ) dp [ i ] = dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ; return dp [ h ] ; }
int getInvCount ( int arr [ ] , int n ) { int inv_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ; } return inv_count ; }
void printRect ( int X , int Y , int n ) { int Xmax = max ( X ) ; int Xmin = min ( X ) ; int Ymax = max ( Y ) ; int Ymin = min ( Y ) ; cout << " { " << Xmin << " , ▁ " << Ymin << " } " ; cout << " { " << Xmax << " , ▁ " << Ymax << " } " ; cout << " { " << Xmin << " , ▁ " << Ymin << " } " ; cout << " { " << Xmax << " , ▁ " << Ymax << " } " ; cout << " { " << Xmax << " , ▁ " << Ymin << " } " ; }
int dealnnoy ( int n , int m ) { int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) dp [ 1 ] [ i ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] + dp [ i ] [ j - 1 ] ; return dp [ m ] [ n ] ; }
int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; }
bool isValidISBN ( string isbn ) { if ( isbn . length ( ) != 10 ) return false ; int _sum = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( 0 <= int ( isbn [ i ] ) <= 9 ) _sum += int ( isbn [ i ] ) * ( 10 - i ) ; else if ( isbn [ i ] != ' X ' && 0 <= int ( isbn [ 9 ] ) <= 9 ) return false ; _sum += 10 if ( isbn [ 9 ] == ' X ' ) return false ; _sum += isbn [ 9 ] == ' X ' else int ( isbn [ 9 ] ) ; return ( _sum % 11 == 0 ) ; }
int NFG ( int a [ ] , int n ) { if ( n <= 0 ) cout << " List ▁ empty \n " ; return [ ] ; } int stack [ n ] ; int freq [ n ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ a [ i ] ] ++ ; int res [ stack [ top ] ] ; int top = - 1 ; top ++ ; stack [ top ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( freq [ a [ stack [ top ] ] ] > freq [ a [ i ] ] ) { top ++ ; stack [ top ] = i ; } else { while ( top > - 1 && freq [ a [ stack [ top ] ] ] < freq [ a [ i ] ] ) { res [ stack [ top ] ] = a [ i ] ; top -- ; stack [ top ] = i ; } } } return res ; }
int swapBits ( int x , int p1 , int p2 , int n ) { int set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) ; int set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) ; int xor = ( set1 ^ set2 ) ; xor = ( xor << p1 ) | ( xor << p2 ) ; result = x ^ xor ; return result ; }
void printEqualSumSets ( int arr [ ] , int n ) { int sum_array = sum ( arr ) ; int k = sum_array >> 1 ; int dp [ k + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= k ; i ++ ) dp [ 0 ] [ i ] = false ; for ( int i = 1 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = true ; for ( int i = 1 ; i <= k ; i ++ ) { for ( int currSum = 1 ; currSum <= n ; currSum ++ ) { dp [ i ] [ currSum ] = dp [ i - 1 ] [ currSum ] ; if ( arr [ i - 1 ] <= currSum ) dp [ i ] [ currSum ] = ( dp [ i ] [ currSum ] || dp [ i - 1 ] [ currSum - arr [ i - 1 ] ] ) ; } } int set1 [ ] , set2 [ ] ; if ( ! dp [ n ] [ k ] ) cout << " Set ▁ 1 ▁ elements : \n " ; for ( int i = 0 ; i < n ; i ++ ) cout << set1 [ i ] << " ▁ " ; for ( int i = 0 ; i < k ; i ++ ) cout << set2 [ i ] << " ▁ " ; } cout << " \n " ; }
int power ( int n ) { if ( n == 1 ) return 2 ; return 2 * power ( n - 1 ) ; }
void findElements ( int arr [ ] , int n ) { int first = INT_MAX ; int second = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) { second = arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < first ) cout << arr [ i ] << " ▁ " ; } }
int lastPosition ( int n , int m , int k ) { if ( m <= n - k + 1 ) return m + k - 1 ; m = m - ( n - k + 1 ) ; if ( m % n == 0 ) return n ; else return m % n ; }
void reverseStr ( char str [ ] ) { int n = str . length ( ) ; int j ; for ( int i = 0 , j = n - 1 ; i < j ; i ++ , j -- ) { str [ i ] , str [ j ] = str [ i ] ; } }
int findMaximum ( int arr [ ] , int low , int high ) { int max = arr [ low ] ; int i ; for ( i = low ; i <= high ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } return max ; }
int longestPrefixSuffix ( string s ) { int n = s . length ( ) ; int lps [ n ] ; int i ; for ( i = 1 ; i < n ; i ++ ) { if ( s [ i ] == s [ l ] ) { l ++ ; lps [ i ] = l ; i = i + 1 ; } else { if ( l != 0 ) l = lps [ l - 1 ] ; else lps [ i ] = 0 ; i = i + 1 ; } } int res = lps [ n - 1 ] ; if ( res > n / 2 ) return n / 2 ; else return res ; }
int MaxTotalRectangleArea ( int a [ ] , int n ) { sort ( a , a + n ) ; int sum = 0 ; bool flag = false ; int len = 0 ; int i ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( i != 0 ) { i ++ ; } if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && flag == false ) { flag = true ; len = a [ i + 1 ] ; i = i + 1 ; } else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && flag == true ) sum += a [ i + 1 ] * len ; flag = false ; i = i + 1 ; } } return sum ; }
void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 ; if ( n < 1 ) return ; for ( int x = 0 ; x < n ; x ++ ) { cout << f2 << " ▁ " ; f1 = f2 ; f2 = next ; } }
void minimizeWithKSwaps ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n - 2 ; i ++ ) { int pos = i ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( j - i > k ) break ; if ( arr [ j ] < arr [ pos ] ) { pos = j ; } } for ( int j = pos ; j > i ; j -- ) { arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ j ] ; } k -= pos - i ; } }
bool isHeap ( int arr [ ] , int i , int n ) { if ( i > ( n - 2 ) / 2 ) return true ; if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 * i + 2 ] && isHeap ( arr , 2 * i + 1 , n ) && isHeap ( arr , 2 * i + 2 , n ) ) return true ; return false ; }
int findLength ( char str [ ] ) { int total [ n + 1 ] ; for ( int i = 1 ; str [ i ] != ' \0' ; i ++ ) total [ i ] = str [ i - 1 ] + str [ i - 1 ] - '0' ; int ans = 0 ; int l = 2 ; while ( l <= n ) { for ( int i = 1 ; i <= n - l + 1 ; i ++ ) { int j = i + l - 1 ; if ( total [ i + int ( l / 2 ) ] - total [ i ] == total [ i + l ] - total [ i + int ( l / 2 ) ] ) ans = max ( ans , l ) ; } l = l + 2 ; } return ans ; }
int countSubarrays ( int arr [ ] , int n ) { int difference = 0 ; int ans = 0 ; int hash_positive [ n + 1 ] ; int hash_negative [ n + 1 ] ; hash_positive [ 0 ] = 1 ; hash_negative [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] & 1 == 1 ) difference ++ ; else difference -- ; if ( difference < 0 ) ans += hash_negative [ - difference ] ; else ans += hash_positive [ difference ] ; hash_positive [ difference ] = hash_positive [ difference ] + 1 ; } return ans ; }
int knapSack ( int W , int wt , int val [ ] , int n ) { int K [ n + 1 ] [ W + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) K [ i ] [ 0 ] = 0 ; for ( int w = 0 ; w <= W ; w ++ ) { if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; }
void multiply ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ; } }
int maxDP ( int n ) { int res [ n ] ; res . push_back ( 0 ) ; res . push_back ( 1 ) ; int i ; for ( i = 2 ; i < n + 1 ; i ++ ) res . push ( max ( i , res [ int ( i / 2 ) ] + res [ int ( i / 3 ) ] + res [ int ( i / 4 ) ] + res [ int ( i / 5 ) ] ) ; return res [ n ] ; }
int findDiff ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int count = 0 ; int max_count = 0 , min_count = n ; for ( int i = 0 ; i < ( n - 1 ) ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) count ++ ; else { max_count = max ( max_count , count ) ; min_count = min ( min_count , count ) ; count = 0 ; } } return max_count - min_count ; }
int countSink ( int n , int m , int edgeFrom [ ] , int edgeTo [ ] ) { int mark [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) mark [ edgeFrom [ i ] ] = 1 ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int i = 1 ; i <= n ; i ++ ) if ( ! mark [ i ] ) count ++ ; return count ; }
int countNegative ( int M [ ] [ MAX ] , int n , int m ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) if ( M [ i ] [ j ] < 0 ) count ++ ; else break ; } return count ; }
int middleOfThree ( int a , int b , int c ) { if ( a > b ) if ( b > c ) return b ; else if ( a > c ) return c ; else return a ; }
int countOfSubstringWithKOnes ( string s , int K ) { int N = s . length ( ) ; int res = 0 ; int countOfOne = 0 ; int freq [ N + 1 ] ; freq [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { countOfOne += s [ i ] - '0' ; if ( countOfOne >= K ) res += freq [ countOfOne - K ] ; freq [ countOfOne ] ++ ; } return res ; }
bool findPairs ( int arr [ ] , int n ) { map < int , int > Hash ; for ( int i = 0 ; i <= n - 2 ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { int sum = arr [ i ] + arr [ j ] ; if ( Hash [ sum ] ) { printf ( " ▁ and ▁ ( % d , ▁ % d ) " , sum ) ; return true ; } else { Hash [ sum ] = ( arr [ i ] , arr [ j ] ) ; } } }
int search ( int arr [ ] , int n , int x ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == x ) return i ; return - 1 ; }
bool check ( string s1 , string s2 ) { int n = strlen ( s1 ) , m = strlen ( s2 ) ; bool dp [ n + 1 ] [ m + 1 ] ; dp [ 0 ] [ 0 ] = true ; for ( int i = 1 ; i < n ; i ++ ) dp [ i ] [ 0 ] = true ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { for ( int j = 0 ; j < s2 . length ( ) ; j ++ ) { if ( s1 [ i ] . isupper ( ) == false ) dp [ i + 1 ] [ j + 1 ] = true ; } } } return ( dp [ n ] [ m ] ) ; }
int binaryToDecimal ( string n ) { char num [ ] ; int dec_value = 0 ; int base1 = 1 ; int len1 = num . length ( ) ; for ( int i = len1 - 1 ; i >= 0 ; i -- ) { if ( num [ i ] == '1' ) dec_value += base1 ; base1 = base1 * 2 ; } return dec_value ; }
int countWays ( int n ) { int dp [ n + 1 ] ; dp [ 0 ] [ 1 ] = 1 , dp [ 1 ] [ 1 ] = 2 ; for ( int i = 2 ; i <= n ; i ++ ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ] ; dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] ; return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ; }
string compute ( char str [ ] ) { char reverseAlphabet [ 2 ] ; int l = str . length ( str ) ; string answer = " " ; for ( int i = 0 ; str [ i ] != ' \0' ; i ++ ) answer = answer + str [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { answer = answer + st [ i ] ; } for ( int i = 0 ; i < l ; i ++ ) { answer = answer + reverseAlphabet [ str [ i ] - ' a ' ] ; } return answer ; }
int maxLenSub ( int arr [ ] , int n ) { int mls [ n ] ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) mls [ i ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ; } return max ; }
int exponentiation ( int bas , int exp ) { int t = 1 ; while ( exp > 0 ) { if ( exp % 2 != 0 ) t = ( t * bas ) % N ; bas = ( bas * bas ) % N ; exp = int ( exp / 2 ) ; } return t % N ; }
int sequence ( int n ) { int f [ n + 1 ] ; f . push_back ( ' i ' ) ; for ( int i = 3 ; i <= n ; i ++ ) { int r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ; f . push_back ( r ) ; } return r ; }
int lbs ( int arr [ ] ) { int n = arr . size ( ) ; int lis [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) lis [ i ] = 1 ; for ( int j = 0 ; j <= i ; j ++ ) lis [ 0 ] = i + 1 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 0 ; j <= i ; j ++ ) { if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ; } } int maximum = lis [ 0 ] + lds [ 0 ] - 1 ; for ( int i = 1 ; i <= n ; i ++ ) maximum = max ( ( lis [ i ] + lds [ i ] - 1 ) , maximum ) ; return maximum ; }
int maximumSum ( int a [ ] [ MAX ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) a [ i ] [ sort ( a [ i ] , a [ n - 1 ] [ M - 1 ] ) ; int sum = a [ n - 1 ] [ M - 1 ] ; int prev = a [ n - 1 ] [ M - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { for ( int j = M - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] < prev ) prev = a [ i ] [ j ] ; sum += prev ; break ; } } if ( j == - 1 ) return 0 ; } return sum ; }
int fib ( int n ) { if ( n <= 1 ) return n ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
int countPairs ( string & str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( abs ( str [ i ] - str [ j ] ) == abs ( i - j ) ) result ++ ; } return result ; }
bool flipsPossible ( int a [ ] , int n ) { int count_odd = 0 , count_even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] & 1 ) count_odd ++ ; else count_even ++ ; } if ( count_odd % 2 && count_even % 2 ) return false ; else return true ; }
bool checkDuplicatesWithinK ( int arr [ ] , int n , int k ) { unordered_set < int > myset ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] in myset ) return true ; myset . push ( arr [ i ] ) ; if ( i >= k ) myset . remove ( arr [ i - k ] ) ; } return false ; }
void diagonalsquare ( int mat [ ROW ] [ COL ] , int row , int column ) { cout << " Diagonal ▁ one ▁ : ▁ " << endl ; for ( int i = 0 ; i < row ; i ++ ) cout << mat [ i ] [ i ] * mat [ i ] [ i ] << endl ; cout << " \n \n " ; for ( int i = 0 ; i < row ; i ++ ) cout << mat [ i ] [ row - i - 1 ] << " ▁ " << endl ; }
int maxArea ( int mat [ R ] [ C ] ) { int hist [ R ] [ C ] ; memset ( hist , 0 , sizeof ( hist ) ) ; for ( int i = 0 ; i < C ; i ++ ) hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ; for ( int i = 1 ; i < R ; i ++ ) { for ( int j = 1 ; j < R ; j ++ ) { if ( mat [ j ] [ i ] == 0 ) hist [ j ] [ i ] = 0 ; else hist [ j ] [ i ] = hist [ j - 1 ] [ i ] + 1 ; } } for ( int i = 0 ; i < R ; i ++ ) { for ( int j = R ; j >= 0 ; j -- ) { if ( count [ j ] > 0 ) { for ( int k = 0 ; k < count [ j ] ; k ++ ) hist [ i ] [ col_no ] = j ; col_no ++ ; } } } int max_area = INT_MIN ; for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 0 ; j < C ; j ++ ) { int curr_area = ( j + 1 ) * hist [ i ] [ j ] ; if ( curr_area > max_area ) { max_area = curr_area ; } } } return max_area ; }
int longestSubseqWithDiffOne ( int arr [ ] , int n ) { int dp [ n ] ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( ( arr [ i ] == arr [ j ] + 1 ) || ( arr [ i ] == arr [ j ] - 1 ) ) dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 ) ; int result = 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( result < dp [ i ] ) result = dp [ i ] ; return result ; }
int maxSquare ( int b , int m ) { return ( b / m - 1 ) * ( b / m ) / 2 ; }
int maxSumPairWithDifferenceLessThanK ( int arr [ ] , int N , int K ) { int dp [ N ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] = 0 ; for ( int i = 1 ; i < N ; i ++ ) dp [ i ] = dp [ i - 1 ] ; if ( arr [ i ] - arr [ i - 1 ] < K ) { dp [ i ] = dp [ i ] ; } else { dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ; } } return dp [ N - 1 ] ; }
int minOperation ( int arr [ ] , int n ) { int Hash [ n ] ; for ( int i = 0 ; i < n ; i ++ ) Hash [ arr [ i ] ] ++ ; int max_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max_count < Hash [ i ] ) { max_count = Hash [ i ] ; } } return n - max_count ; }
void kSmallestPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 , int k ) { if ( k > n1 * n2 ) cout << " k ▁ pairs ▁ don ' t ▁ exist " << endl ; int index2 [ n1 ] ; for ( int i = 0 ; i < n1 ; i ++ ) index2 [ i ] = 0 ; while ( k > 0 ) { int min_sum = INT_MAX ; int min_index = 0 ; for ( int i1 = 0 ; i1 < n1 ; i1 ++ ) { if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] < min_sum ) { min_index = i1 ; min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ; } } cout << " ( " << arr1 [ min_index ] << " , ▁ " << arr2 [ index2 [ min_index ] << " ) " << endl ; }
void spiralPrint ( int m , int n , int a [ R ] [ C ] ) { int i , k = 0 , l = 0 ; while ( k < m && l < n ) { for ( i = l ; i < n ; ++ i ) { cout << a [ k ] [ i ] << " ▁ " ; } k ++ ; for ( i = k ; i < m ; ++ i ) { cout << a [ i ] [ n - 1 ] << " ▁ " ; } n -- ; if ( k < m ) { for ( i = n - 1 ; i >= l ; -- i ) { cout << a [ m - 1 ] [ i ] << " ▁ " ; } m -- ; } if ( l < n ) { for ( i = m - 1 ; i >= k ; -- i ) { cout << a [ i ] [ l ] << " ▁ " ; } l ++ ; } }
int findSum ( string str ) { string temp = " " ; int sum = 0 ; for ( char ch = 0 ; ch < str . length ( ) ; ++ ch ) { if ( ch . isdigit ( ) ) temp += ch ; else sum += int ( temp ) ; temp = "0" ; } return sum + int ( temp ) ; }
int pentagonalNum ( int n ) { return ( 3 * n * n - n ) / 2 ; }
int countNonDecreasing ( int n ) { int N = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) count = count * ( N + i - 1 ) ; count = count / i ; return count ; }
int mostFrequent ( int arr [ ] , int n ) { unordered_map < int , int > Hash ; for ( int i = 0 ; i < n ; i ++ ) Hash [ arr [ i ] ] ++ ; int max_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Hash [ arr [ i ] ] ) Hash [ arr [ i ] ] ++ ; else Hash [ arr [ i ] ] = 1 ; } int res = - 1 ; for ( int i = 0 ; i < Hash . size ( ) ; i ++ ) { if ( max_count < Hash [ i ] ) res = i ; max_count = Hash [ i ] ; } return res ; }
int kth ( int arr1 [ ] , int arr2 [ ] , int m , int n , int k ) { int sorted1 [ m + n ] ; int i = 0 , j = 0 , d = 0 ; while ( i < m && j < n ) { if ( arr1 [ i ] < arr2 [ j ] ) sorted1 [ d ] = arr1 [ i ] ; i ++ ; } else { sorted1 [ d ] = arr2 [ j ] ; j ++ ; } d ++ ; } while ( i < m ) { sorted1 [ d ] = arr1 [ i ] ; d ++ ; i ++ ; } while ( j < n ) { sorted1 [ d ] = arr2 [ j ] ; d ++ ; j ++ ; } return sorted1 [ k - 1 ] ; }
int binomialCoeff ( int n , int k ) { if ( k == 0 || k == n ) return 1 ; return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n - 1 , k ) ; }
string firstLetterWord ( string str ) { string result = " " ; bool v = true ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == ' ▁ ' ) v = true ; else if ( str [ i ] != ' ▁ ' && v == true ) result += ( str [ i ] ) ; v = false ; } return result ; }
void assign ( int a [ ] , int n ) { sort ( a , a + n ) ; int ans [ n ] ; int p = 0 , q = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q ] ; q = q - 1 ; else ans [ i ] = a [ p ] ; p = p + 1 ; } }
void printDistinct ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int d = 0 ; for ( int j = 0 ; j < i ; j ++ ) if ( arr [ i ] == arr [ j ] ) d = 1 ; break ; if ( d == 0 ) cout << arr [ i ] ; } }
int countSolutions ( int n ) { int res = 0 ; int x = 0 ; while ( x * x < n ) { int y = 0 ; while ( x * x + y * y < n ) { res ++ ; y = y + 1 ; } x = x + 1 ; } return res ; }
void relativeComplement ( int arr1 [ ] , int arr2 [ ] , int n , int m ) { int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( arr1 [ i ] < arr2 [ j ] ) cout << arr1 [ i ] << " ▁ " ; else if ( arr1 [ i ] > arr2 [ j ] ) { j ++ ; } else if ( arr1 [ i ] == arr2 [ j ] ) i ++ ; j ++ ; } } while ( i < n ) cout << arr1 [ i ++ ] << " ▁ " ; }
int findFourElements ( int arr [ ] , int n ) { map < int , int > mp ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) mp [ arr [ i ] + arr [ j ] ] = ( i , j ) ; int d = INT_MIN ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int abs_diff = abs ( arr [ i ] - arr [ j ] ) ; if ( abs_diff < 0 ) { int p = mp [ abs_diff ] ; if ( p [ 0 ] != i && p [ 0 ] != j ) d = max ( d , max ( arr [ i ] , arr [ j ] ) ) ; } } return d ; }
int findTrailingZeros ( int n ) { int count = 0 ; int i = 5 ; while ( n / i >= 1 ) count += n / i ; return count ; }
bool isPrime ( int p ) { int checkNumber = 2 ** p - 1 ; int nextval = 4 % checkNumber ; for ( int i = 1 ; i <= p - 2 ; i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber ; if ( nextval == 0 ) return true ; else return false ; }
int CountSubString ( char str [ ] , int n ) { int ans = ( n * ( n + 1 ) ) / 2 ; int a_index = 0 , b_index = 0 , c_index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str [ i ] == ' a ' ) a_index = i + 1 ; ans -= min ( b_index , c_index ) ; else if ( str [ i ] == ' b ' ) b_index = i + 1 ; ans -= min ( a_index , b_index ) ; else c_index = i + 1 ; } return ans ; }
bool isPalindrome ( string str ) { int l = 0 , h = str . length ( ) - 1 ; while ( h > l ) { l ++ ; h -- ; if ( str [ l - 1 ] != str [ h + 1 ] ) return false ; } return true ; }
int maxNumOfChocolates ( int arr [ ] , int n , int k ) { int um [ MAX ] , curr_rem , maxSum ; int sm [ n ] ; sm [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) sm [ i ] = sm [ i - 1 ] + arr [ i ] ; for ( int i = 1 ; i < n ; i ++ ) { curr_rem = sm [ i ] % k ; if ( ! curr_rem && maxSum < sm [ i ] ) { maxSum = sm [ i ] ; } else if ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) maxSum = sm [ i ] - sm [ um [ curr_rem ] ] ; } return maxSum / k ; }
void decode ( string str ) { int integerstack [ MAX ] ; int stringstack [ MAX ] ; string temp ; string result ; for ( int i = 0 ; str [ i ] ; i ++ ) { count = 0 ; if ( str [ i ] >= '0' && str [ i ] <= '9' ) { while ( str [ i ] >= '0' && str [ i ] <= '9' ) { ++ count ; } i -- ; integerstack . push ( count ) ; } else if ( str [ i ] == ' [ ' ) { temp = " " ; count = 0 ; if ( stringstack . size ( ) != 0 && stringstack [ - 1 ] != ' [ ' ) { stringstack . pop ( ) ; for ( int j = 0 ; j < count ; j ++ ) { result . push ( result [ j ] ) ; } result = " " ; } } else if ( str [ i ] == ' [ ' ) { if ( str [ i - 1 ] >= '0' && str [ i - 1 ] <= '9' ) { stringstack . push ( str [ i ] ) ; integerstack . push ( 1 ) ; } else { stringstack . push ( str [ i ] ) ; } } }
int minSum ( int A [ ] ) { int min_val = min ( A ) ; return min_val * ( len ( A ) - 1 ) ; }
bool isPower ( double x , double y ) { double res1 = log ( y ) / log ( x ) ; double res2 = log ( y ) / log ( x ) ; return 1 if ( res1 == res2 ) else 0 ; }
int countWords ( char str [ ] , int n ) { map < char , int > m ; for ( int i = 0 ; i < n ; i ++ ) m [ str [ i ] ] ++ ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res += m [ str [ i ] ] ; return res ; }
int findLargestd ( int S [ ] , int n ) { bool found = false ; sort ( S , S + n ) ; for ( int i = 0 ; i <= n - 2 ; i -- ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( i == j ) continue ; for ( int l = 0 ; l <= n ; l ++ ) { if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) found = true ; return S [ i ] ; } } } if ( found == false ) return - 1 ; }
void minMaxValues ( int arr [ ] , int n , int m ) { int sum = 0 ; int INF = 1000000 ; int MAX = 50 ; for ( int i = 0 ; i < n + m ; i ++ ) sum += arr [ i ] ; int dp [ MAX ] [ MAX + 1 ] ; for ( int i = 0 ; i < MAX ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int k = 0 ; k < MAX ; k ++ ) { for ( int j = 0 ; j < MAX * MAX + 1 ; j ++ ) { if ( dp [ k - 1 ] [ j ] ) dp [ k ] [ j + arr [ i ] ] = 1 ; } } int max_value = INT_MIN ; int min_value = INT_MAX ; for ( int i = 0 ; i <= MAX * MAX + 1 ; i ++ ) { if ( dp [ n ] [ i ] ) { temp = i - 50 * n ; max_value = max ( max_value , temp * ( sum - temp ) ) ; min_value = min ( min_value , temp * ( sum - temp ) ) ; } } cout << " Maximum ▁ Value : ▁ { } \n Minimum ▁ Value : ▁ { } " ; }
int constructTree ( int n , int d , int h ) { if ( d == 1 ) cout << " 1 ▁ 2 " << endl ; if ( d > 2 * h ) cout << " - 1" ; return 0 ; } for ( int i = 1 ; i <= h ; i ++ ) cout << i << " ▁ " << i + 1 << endl ; for ( int i = h + 1 ; i <= n ; i ++ ) { cout << i << " ▁ " << i + 1 << endl ; if ( d > h ) cout << 1 << " ▁ ▁ " << h + 2 << endl ; for ( int i = d + 1 ; i <= n ; i ++ ) cout << k << " ▁ " << i + 1 << endl ; }
int rectCount ( int n , int m ) { return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ; }
void sortUsingHash ( int a [ ] , int n ) { int Max = max ( a ) ; int Hash [ Max + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) Hash [ a [ i ] ] ++ ; for ( int i = 0 ; i < Max ; i ++ ) for ( int j = 0 ; j < Hash [ i ] ; j ++ ) cout << i << " ▁ " ; }
void subarrayDivisibleByK ( int arr [ ] , int n , int k ) { int mp [ 1000 ] ; int s = 0 , e = 0 , maxs = 0 , maxe = 0 ; for ( int i = 1 ; i < n ; i ++ ) { mp [ arr [ 0 ] % k ] = mp [ arr [ 0 ] % k ] + 1 ; for ( int i = 1 ; i < n ; i ++ ) { int mod = arr [ i ] % k ; while ( mp [ k - mod ] != 0 || ( mod == 0 && mp [ mod ] != 0 ) { mp [ arr [ s ] % k ] = mp [ arr [ s ] % k ] - 1 ; s = s + 1 ; } mp [ mod ] = mp [ mod ] + 1 ; e = e + 1 ; if ( ( e - s ) > ( maxe - maxs ) ) { maxe = e ; maxs = s ; } } cout << " The ▁ maximum ▁ size ▁ is ▁ { } ▁ and ▁ the ▁ " << ( maxe - maxs + 1 ) << " \n " ; }
bool isDivisible ( string str , int k ) { int n = str . length ( ) ; int c = 0 ; for ( int i = 0 ; i < k ; i ++ ) if ( str [ n - i - 1 ] == '0' ) c ++ ; return ( c == k ) ; }
int divisible ( int num [ ] ) { int n = num . size ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += num [ i ] ; if ( sum % 3 == 0 ) return 0 ; if ( n == 1 ) return - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum % 3 == int ( num [ i ] ) % 3 ) return 1 ; if ( n == 2 ) return - 2 ; } return 2 ; }
int superSeq ( int X [ ] , int Y [ ] , int m , int n ) { if ( ! m ) return n ; if ( ! n ) return m ; if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + superSeq ( X , Y , m - 1 , n - 1 ) ; return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) ) ; }
void swapUpperToLower ( int arr [ ] [ MAX ] , int n ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { int temp = arr [ i ] [ j ] ; arr [ i ] [ j ] = arr [ j ] [ i ] ; arr [ j ] [ i ] = temp ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) cout << arr [ i ] [ j ] << " ▁ " ; cout << " ▁ " ; } cout << endl ; }
int kthgroupsum ( int k ) { int cur = ( k * ( k - 1 ) ) + 1 ; int sum = 0 ; while ( k ) { sum += cur ; cur += 2 ; k = k - 1 ; } return sum ; }
bool isMagicSquare ( int mat [ N ] [ N ] ) { int s = 0 ; for ( int i = 0 ; i < N ; i ++ ) s = s + mat [ i ] [ i ] ; int s2 = 0 ; for ( int i = 0 ; i < N ; i ++ ) s2 = s2 + mat [ i ] [ N - i - 1 ] ; if ( s != s2 ) return false ; for ( int i = 0 ; i < N ; i ++ ) { int rowSum = 0 ; for ( int j = 0 ; j < N ; j ++ ) rowSum += mat [ i ] [ j ] ; if ( rowSum != s ) return false ; } for ( int i = 0 ; i < N ; i ++ ) { int colSum = 0 ; for ( int j = 0 ; j < N ; j ++ ) colSum += mat [ j ] [ i ] ; if ( s != colSum ) return false ; } return true ; }
bool isScalarMatrix ( int mat [ N ] [ N ] ) { int i , j ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j < N ; j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false ; for ( i = 0 ; i < N - 1 ; i ++ ) { if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) return false ; } return true ; }
int longSubarrWthSumDivByK ( int arr [ ] , int n , int k ) { int um [ 8 ] ; int mod_arr [ n ] ; int max = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; mod_arr [ i ] = ( curr_sum % k ) + k ; } for ( int i = 0 ; i < n ; i ++ ) { if ( mod_arr [ i ] == 0 ) max = i + 1 ; else if ( mod_arr [ i ] in um ) um [ mod_arr [ i ] ] = i ; else { if ( max < ( i - um [ mod_arr [ i ] ] ) ) max = i - um [ mod_arr [ i ] ] ; } } return max ; }
void reverse ( string str ) { if ( str . length ( ) == 0 ) return ; char temp = str [ 0 ] ; reverse ( str ) ; printf ( " % c " , temp ) ; }
int arrangeBraces ( int n , int pos [ ] , int k ) { bool h [ N ] ; int dp [ N ] [ k ] ; memset ( h , false , sizeof ( h ) ) ; for ( int i = 0 ; i < k ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { h [ pos [ i ] ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 2 * n + 1 ; j <= k ; j ++ ) { if ( h [ i ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 0 ; } } } return dp [ 2 * n ] [ 0 ] ; }
bool isDvisibleBy12 ( string num ) { if ( num . length ( ) >= 3 ) { int d1 = num [ len ( num ) - 1 ] ; if ( d1 % 2 != 0 ) return false ; int d2 = num [ len ( num ) - 2 ] ; int sum = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) sum += num [ i ] ; return ( sum % 3 == 0 && ( d2 * 10 + d1 ) % 4 == 0 ) ; } else { int number = num . charCodeAt ( 0 ) ; return ( number % 12 == 0 ) ; } }
int maxDiff ( int arr [ ] , int n ) { int SubsetSum_1 = 0 , SubsetSum_2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { bool isSingleOccurance = true ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { isSingleOccurance = false ; arr [ i ] = arr [ j ] = 0 ; break ; } } if ( isSingleOccurance == true ) { if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ] ; else SubsetSum_2 += arr [ i ] ; } } return abs ( SubsetSum_1 - SubsetSum_2 ) ; }
string lexSmallest ( int a [ ] , int n ) { sort ( a , a + n ) ; string answer = " " ; for ( int i = 0 ; i < n ; i ++ ) answer += a [ i ] ; return answer ; }
int maxCost ( int mat [ ] [ N ] ) { int dp [ N ] [ N ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j <= min ( i + 1 , N ) ; j ++ ) dp [ i ] [ j ] = mat [ i ] [ j ] + \ NEW_LINE INDENT max ( dp [ i - 1 ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } int result = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( result < dp [ N - 1 ] [ i ] ) result = dp [ N - 1 ] [ i ] ; return result ; }
int xorZero ( string str ) { int one_count = 0 , zero_count = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( str [ i ] == '1' ) one_count ++ ; else zero_count ++ ; } if ( one_count % 2 == 0 ) return zero_count ; return one_count ; }
double nthRoot ( double A , int N ) { int xPre = random . randint ( 1 , 101 ) % 10 ; double eps = 0.001 ; double delX = 2147483647 ; double xK = 0.0 ; while ( delX > eps ) { xK = ( N - 1.0 ) * xPre + A / pow ( xPre , N - 1 ) ) / N ; delX = abs ( xK - xPre ) ; xPre = xK ; } return xK ; }
string findLeft ( string str ) { int n = str . length ( ) ; while ( n > 0 ) { if ( str [ n ] == ' d ' ) str = str [ 0 : n ] + ' c ' + str [ n + 1 ] ; break ; if ( str [ n ] == ' a ' ) str = str [ 0 : n ] + ' a ' + str [ n + 1 ] ; break ; if ( str [ n ] == ' b ' ) str = str [ 0 : n ] + ' b ' + str [ n + 1 ] ; else if ( str [ n ] == ' c ' ) str = str [ 0 : n ] + ' d ' + str [ n + 1 : ] ; } n -- ; } return str ; }
int subset ( int ar [ ] , int n ) { int res = 0 ; sort ( ar , ar + n ) ; for ( int i = 0 ; i < n ; i ++ ) { int count = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( ar [ i ] == ar [ i + 1 ] ) count ++ ; else break ; res = max ( res , count ) ; } return res ; }
void minRange ( int arr [ ] , int n , int k ) { int l = 0 , r = n ; for ( int i = 0 ; i < n ; i ++ ) { int s [ n ] ; for ( int j = i ; j < n ; j ++ ) { s . push_back ( arr [ j ] ) ; if ( s . length ( ) == k ) { if ( ( j - i ) < ( r - l ) ) { r = j ; l = i ; } break ; } if ( j == n ) break ; if ( l == 0 && r == n ) cout << " Invalid ▁ k " ; } else cout << l << r << endl ; }
int findSum ( int A [ ] , int B [ ] , int n ) { int Hash [ n ] ; for ( int i = 0 ; i < n ; i ++ ) Hash [ A [ i ] ] ++ ; Hash [ B [ i ] ] ++ ; int sum = 0 ; for ( int x = 0 ; x < n ; x ++ ) if ( Hash [ x ] == 1 ) sum += x ; return sum ; }
string printSubStr ( char str [ ] , int low , int high ) { strcpy ( str , str ) ; strcat ( str , str ) ; return ' \n ' ; }
int evenSum ( int n ) { int C [ n ] [ n + 1 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) C [ i ] [ 0 ] = 1 ; for ( j = 0 ; j < min ( i , n + 1 ) ; j ++ ) C [ 0 ] [ j ] = 0 ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) sum = sum + C [ n ] [ i ] ; return sum ; }
int getMinSquares ( int n ) { int dp [ 4 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] = 0 ; for ( int x = 1 ; x <= sqrt ( i ) ; x ++ ) { int temp = x * x ; if ( temp > i ) break ; else dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] ) ; } } return dp [ n ] ; }
void arrayEvenAndOdd ( int arr [ ] , int n ) { int i = - 1 , j = 0 ; while ( j != n ) { if ( arr [ j ] % 2 == 0 ) { i ++ ; arr [ j ] = arr [ j ] ; } j ++ ; } for ( int i = 0 ; i < n ; i ++ ) cout << str ( i ) + " ▁ " ; }
void diagonalsquare ( int mat [ ] [ MAX ] , int row , int column ) { cout << " Diagonal ▁ one ▁ : ▁ " << endl ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( i == j ) cout << " { } ▁ " << mat [ i ] [ j ] * mat [ i ] [ j ] << endl ; } cout << " ▁ \n " ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( i + j == column - 1 ) cout << " { } ▁ " << mat [ i ] [ j ] * mat [ i ] [ j ] << endl ; } } cout << " ▁ \n \n " ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( i + j == column - 1 ) cout << " { } ▁ " << mat [ i ] [ j ] * mat [ i ] [ j ] << endl ; } }
int areSumSame ( int a [ ] [ MAX ] , int n , int m ) { int sum1 = 0 , sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum1 = 0 , sum2 = 0 ; for ( int j = 0 ; j < m ; j ++ ) { sum1 += a [ i ] [ j ] ; sum2 += a [ j ] [ i ] ; } if ( sum1 == sum2 ) return 1 ; } return 0 ; }
void printClosest ( int arr [ ] , int n , int x ) { int res_l , res_r = 0 , l = 0 , r = 0 , diff = 0 ; while ( r > l ) { if ( abs ( arr [ l ] + arr [ r ] - x ) < diff ) { res_l = l ; res_r = r ; diff = abs ( arr [ l ] + arr [ r ] - x ) ; } else { l ++ ; } } cout << ' The ▁ closest ▁ pair ▁ is ▁ ' << arr [ res_l ] << arr [ res_r ] << ' \n ' ; }
int countSubStr ( char str [ ] ) { int m = 0 ; for ( int i = 0 ; str [ i ] != ' \0' ; i ++ ) if ( str [ i ] == '1' ) m ++ ; return m * ( m - 1 ) / 2 ; }
int countSubstringWithEqualEnds ( string s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( s [ i ] == s [ j ] ) result ++ ; } return result ; }
int calcMaxValue ( string str ) { int res = str [ 0 ] - 48 ; for ( int i = 1 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == '0' || str [ i ] == '1' || res < 2 ) res += ( str [ i ] == '0' || str [ i ] == '1' || res < 2 ) res *= ( str [ i ] - 48 ) ; else res *= ( str [ i ] ) - 48 ; } return res ; }
void bestFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) { int allocation [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int bestIdx = - 1 ; for ( int j = 0 ; j < m ; j ++ ) { if ( blockSize [ j ] >= processSize [ i ] ) { if ( bestIdx == - 1 ) bestIdx = j ; else if ( blockSize [ bestIdx ] > blockSize [ j ] ) { bestIdx = j ; } } } if ( bestIdx != - 1 ) cout << " Process ▁ No . ▁ Process ▁ Size ▁ ▁ ▁ ▁ Block ▁ no . " << processSize [ i ] << " ▁ ▁ ▁ ▁ " << allocation [ i ] << " ▁ ▁ ▁ " << endl ; if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; }
void countFreq ( int a [ ] , int n ) { map < int , int > hm ; for ( int i = 0 ; i < n ; i ++ ) hm [ a [ i ] ] ++ ; int cumul = 0 ; for ( int i = 0 ; i < n ; i ++ ) cumul += hm [ a [ i ] ] ; if ( hm [ a [ i ] ] > 0 ) cout << a [ i ] << " - > " << cumul ; hm [ a [ i ] ] = 0 ; }
bool isSubSeqDivisible ( bool st [ ] ) { int l = strlen ( st ) ; int arr [ l ] ; for ( int i = 0 ; i < l ; i ++ ) { for ( int j = 0 ; j < l ; j ++ ) { for ( int k = 0 ; k < l ; k ++ ) { if ( arr [ i ] % 8 == 0 ) return true ; else if ( arr [ i ] * 10 + arr [ j ] % 8 == 0 && i != j ) return true ; else if ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 && i != k ) return true ; else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 && i != j && j != k && i != k ) return true ; } } } return false ; }
int getAbs ( int n ) { int mask = n >> ( SIZE_INT * CHARBIT - 1 ) ; return ( n + mask ) ^ mask ; }
int countPairs ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int product = arr [ i ] * arr [ j ] ; for ( int k = 0 ; k < n ; k ++ ) if ( arr [ k ] == product ) result ++ ; break ; } } return result ; }
int minCost ( int a [ ] , int n , int k ) { int dp [ k + 1 ] [ n + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) dp [ i ] [ 0 ] = 0 ; for ( int j = 1 ; j <= n ; j ++ ) dp [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { for ( int j = 1 ; j <= k ; j ++ ) { for ( int m = i - 1 ; m >= 0 ; m -- ) dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ; } } return dp [ k ] [ n ] ; }
bool containsOdd ( int G [ ] [ MAX ] , int src ) { int colorArr [ V ] ; queue < int > q ; q . push ( src ) ; while ( ! q . empty ( ) ) { int u = q . front ( ) ; q . pop ( ) ; if ( G [ u ] [ u ] == 1 ) return true ; for ( int v = 0 ; v < V ; v ++ ) { if ( G [ u ] [ v ] && colorArr [ v ] == - 1 ) colorArr [ v ] = 1 - colorArr [ u ] ; q . push ( v ) ; } else if ( G [ u ] [ v ] && colorArr [ v ] == colorArr [ u ] ) return true ; } } return false ; }
unsigned int countSetBits ( unsigned int n ) { if ( n == 0 ) return 0 ; else return 1 + countSetBits ( n & ( n - 1 ) ) ; }
bool isAnBn ( string str ) { int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( str [ i ] != ' a ' ) break ; if ( i * 2 != n ) return false ; for ( int j = i + 1 ; j < n ; j ++ ) if ( str [ j ] != ' b ' ) return false ; } return true ; }
int getMinSquares ( int n ) { if ( n <= 3 ) return n ; int res = n ; for ( int x = 1 ; x <= n ; x ++ ) { int temp = x * x ; if ( temp > n ) break ; else res = min ( res , 1 + getMinSquares ( n - temp ) ) ; } return res ; }
int maxDistance ( int arr [ ] , int n ) { map < int , int > mp ; int maxDict = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == ' \0' ) mp [ arr [ i ] ] = i ; else maxDict = max ( maxDict , i - mp [ arr [ i ] ] ) ; } return maxDict ; }
int maxSumWO3Consec ( int arr [ ] , int n ) { int sum [ n ] ; if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ; if ( n >= 2 ) sum [ 1 ] = arr [ 1 ] + arr [ 2 ] ; if ( n > 1 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ; if ( n > 2 ) sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) ) ; for ( int i = 3 ; i < n ; i ++ ) sum [ i ] = max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] ) ; return sum [ n - 1 ] ; }
int checkEulerFourSquareIdentity ( int a , int b ) { int ab = a * b ; bool flag = false ; int i = 0 ; while ( i * i <= ab ) { int j = i ; while ( i * i + j * j <= ab ) { int k = j ; while ( i * i + j * j + k * k <= ab ) { int l = ( ab - ( i * i + j * j + k * k ) ) ** ( 0.5 ) ; if ( l == int ) && l >= k ) { flag = true ; cout << " i ▁ = ▁ " << i << " j << " ▁ k << " ▁ l " << endl ; } else { cout << " Solution ▁ doesn't ▁ exist ! " ; return ; } } if ( flag == false ) cout << " Solution ▁ doesn't ▁ exist ! " ; return ; }
int nobleInteger ( int arr [ ] ) { int n = arr . size ( ) ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) continue ; if ( arr [ i ] == n - i - 1 ) return arr [ i ] ; if ( arr [ i ] == n - i - 1 ) return arr [ i ] ; } return - 1 ; }
int countIslands ( char mat [ M ] [ N ] ) { int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( mat [ i ] [ j ] == ' X ' ) { if ( i == 0 || mat [ i - 1 ] [ j ] == ' O ' ) count = count + 1 ; } } } return count ; }
int selectRandom ( int x ) { int res = 0 ; int count = 0 ; while ( count < 1 ) { count ++ ; if ( count == 1 ) res = x ; else { int i = random . randrange ( count ) ; if ( i == count - 1 ) res = x ; } } return res ; }
int productArray ( int arr [ ] , int n ) { if ( n == 1 ) cout << 0 << " ▁ " ; return 0 ; } int i , temp = 1 ; for ( i = 0 ; i < n ; i ++ ) prod [ i ] = temp ; temp = 1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { prod [ i ] *= temp ; temp *= arr [ i ] ; } for ( i = 0 ; i < n - 1 ; i ++ ) { prod [ i ] *= temp ; temp *= arr [ i ] ; } for ( i = 0 ; i < n ; i ++ ) cout << prod [ i ] << " ▁ " ; }
bool sortedAfterSwap ( int A [ ] , int B [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( B [ i ] == 1 ) { int j = i ; while ( B [ j ] == 1 ) j ++ ; A [ i ] = A [ j + 1 ] ; i = j ; } } for ( int i = 0 ; i < n ; i ++ ) if ( A [ i ] != i + 1 ) return false ; return true ; }
int maxSubarrayXOR ( int arr [ ] , int n ) { int ans = - 2147483648 ; for ( int i = 0 ; i < n ; i ++ ) { int curr_xor = 0 ; for ( int j = i ; j < n ; j ++ ) curr_xor = curr_xor ^ arr [ j ] ; ans = max ( ans , curr_xor ) ; } return ans ; }
int cost ( int a , int n ) { return ( n - 1 ) * min ( a ) ; }
int minRemovalsDP ( int arr [ ] , int n ) { int longest_start = - 1 , longest_end = 0 ; for ( int start = 0 ; start < n ; start ++ ) { int min = INT_MAX ; int max = INT_MAX ; for ( int end = start ; end < n ; end ++ ) { int val = arr [ end ] ; if ( val < min ) min = val ; if ( val > max ) max = val ; if ( 2 * min <= max ) break ; if ( end - start > longest_end - longest_start || longest_start == - 1 ) return n ; } } if ( longest_start == - 1 ) return n ; return ( n - ( longest_end - longest_start + 1 ) ) ; }
int getInvCount ( int arr [ ] , int n ) { int invcount = 0 ; for ( int i = 1 ; i <= n - 2 ; i ++ ) { int small = 0 ; for ( int j = i + 1 ; j <= n ; j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ; int great = 0 ; for ( int i = i - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] < arr [ j ] ) great ++ ; } invcount += small * small ; } return invcount ; }
int surface_area_octahedron ( int side ) { return ( 2 * ( pow ( side , 3 ) ) * ( side * side ) ) ; }
int gnomeSort ( int arr [ ] , int n ) { int index = 0 ; while ( index < n ) { if ( index == 0 ) index ++ ; if ( arr [ index ] >= arr [ index - 1 ] ) index ++ ; else { arr [ index ] , arr [ index - 1 ] = arr [ index - 1 ] , arr [ index ] ; index = index - 1 ; } } return arr ; }
int find ( int n , int k ) { if ( n + 1 >= k ) return ( k - 1 ) ; else return ( 2 * n + 1 - k ) ; }
int countUnique ( int mat [ ] [ MAX ] , int n , int m ) { int rowsum [ n ] ; int colsum [ m ] ; for ( int i = 0 ; i < n ; i ++ ) colsum [ i ] = 0 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) if ( mat [ i ] [ j ] != 0 ) rowsum [ i ] ++ ; colsum [ j ] ++ ; int uniquecount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) if ( mat [ i ] [ j ] != 0 && rowsum [ i ] == 1 && colsum [ j ] == 1 ) uniquecount ++ ; } return uniquecount ; }
void generate ( int ones , int zeroes , string str , int len1 ) { if ( len1 == str . length ( ) ) cout << str << " ▁ " ; return ; } generate ( ones + 1 , zeroes , str + "1" , len1 ) ; if ( ones > zeroes ) generate ( ones , zeroes + 1 , str + "0" , len1 ) ; if ( ones > zeroes ) generate ( ones , zeroes + 1 , str + "0" , len1 ) ; }
void midPointCircleDraw ( int x_centre , int y_centre , int r ) { int x = r ; int y = 0 ; cout << " ( " << x + x_centre << " , ▁ " << y + y_centre << " ) " << endl ; if ( r > 0 ) cout << " ( " << x + x_centre << " , ▁ " << y + y_centre << " ) " << endl ; else { int P = 1 - r ; while ( x > y ) { y ++ ; if ( P <= 0 ) P = P + 2 * y + 1 ; else { x -- ; P = P + 2 * y - 2 * x + 1 ; } } cout << " ( " << " , - x + x_centre << " , ▁ " << y + y_centre << " ) " << endl ; if ( x < y ) break ; cout << " ( " << " , - x + x_centre << " , ▁ " << y + y_centre << " ) " << endl ; }
void printFactorialNums ( int n ) { int fact = 1 ; int x = 2 ; while ( fact <= n ) { cout << fact << x << endl ; fact = fact * x ; x ++ ; } }
int countFriendsPairings ( int n ) { int dp [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i <= 2 ) dp [ i ] = i ; else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; } return dp [ n ] ; }
int remainder ( char str [ ] ) { int ln = str . length ( ) ; int rem = 0 ; for ( int i = 0 ; i < ln ; i ++ ) { int num = rem * 10 + ( int ) ( str [ i ] ) ; rem = num % 11 ; } return rem ; }
int findNth ( int n ) { int count = 0 ; for ( int curr = 0 ; curr < n ; curr ++ ) { int sum = 0 ; int x = curr ; while ( x ) { sum = sum + x % 10 ; x = x / 10 ; if ( sum == 10 ) count ++ ; if ( count == n ) return curr ; } return - 1 ; }
bool sortedAfterSwap ( int A [ ] , int B [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( B [ i ] ) { if ( A [ i ] != i + 1 ) A [ i ] , A [ i + 1 ] = A [ i + 1 ] ; } } for ( int i = 0 ; i < n ; i ++ ) if ( A [ i ] != i + 1 ) return false ; return true ; }
int maximumSum ( int arr [ ] , int n , int k ) { for ( int i = 1 ; i <= k ; i ++ ) { int min = INT_MAX ; int index = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] < min ) { min = arr [ j ] ; index = j ; } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; } return sum ; }
void printSquares ( int n ) { int square = 0 , odd = 1 ; for ( int x = 0 ; x < n ; x ++ ) { cout << square << odd << 2 ; } }
bool checkReverse ( int arr [ ] , int n ) { if ( n == 1 ) return true ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) if ( i == n ) return true ; } int j , k ; for ( j = i ; j < n ; j ++ ) { if ( i > 1 && arr [ j ] < arr [ i - 2 ] ) return false ; while ( k > 1 && k < n ) { if ( arr [ k ] < arr [ k - 1 ] ) return false ; k ++ ; } if ( j == n ) return true ; } return false ; }
int vol_of_octahedron ( int side ) { return ( side * side * side ) * ( std :: sqrt ( 2 ) / 3 ) ; }
int numberOfPaths ( int m , int n ) { if ( m == 1 || n == 1 ) return 1 ; return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n - 1 ) ; }
int binarySearch ( int * arr , int l , int r , int x ) { if ( r >= l ) { int mid = ( l + r ) / 2 ; if ( arr [ mid ] == x ) return mid ; else if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 1 , x ) ; else if ( arr [ mid ] > x ) return binarySearch ( arr , mid + 1 , r , x ) ; else return - 1 ; }
int numberOfPaths ( int m , int n ) { int count [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) count [ i ] [ 0 ] = 1 ; for ( int j = 0 ; j < n ; j ++ ) count [ 0 ] [ j ] = 1 ; for ( int i = 1 ; i < m ; i ++ ) for ( int j = 1 ; j < n ; j ++ ) count [ 0 ] [ j ] = 1 ; for ( int i = 1 ; i < m ; i ++ ) for ( int j = 1 ; j < n ; j ++ ) count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [ i ] [ j - 1 ] ; return count [ m - 1 ] [ n - 1 ] ; }
int answer ( int n ) { int dp [ n + 1 ] [ 10 ] ; if ( n == 1 ) return 10 ; for ( int j = 0 ; j <= 9 ; j ++ ) dp [ 1 ] [ j ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= 9 ; j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ; else if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ; } } int sum = 0 ; for ( int j = 1 ; j <= n ; j ++ ) sum = sum + dp [ n ] [ j ] ; return sum ; }
int maxDifference ( int arr [ ] , int N , int k ) { int S = 0 , S1 = 0 ; int max_difference = 0 ; for ( int i = 0 ; i < N ; i ++ ) S += arr [ i ] ; sort ( arr , arr + N ) ; int M = max ( k , N - k ) ; for ( int i = 0 ; i < M ; i ++ ) S1 += arr [ i ] ; max_difference = S1 - ( S - S1 ) ; return max_difference ; }
int maxSumSubarrayRemovingOneEle ( int arr [ ] , int n ) { int fw [ n ] ; int bw [ n ] ; int cur_max , max_so_far ; memset ( fw , 0 , sizeof ( fw ) ) ; for ( int i = 0 ; i < n ; i ++ ) { cur_max = arr [ i ] ; max_so_far = max ( max_so_far , cur_max ) ; bw [ i ] = cur_max ; } cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { cur_max = max ( arr [ i ] , cur_max + arr [ i ] ) ; max_so_far = max ( max_so_far , cur_max ) ; bw [ i ] = cur_max ; } fans = max_so_far ; for ( int i = 1 ; i <= n - 1 ; i ++ ) { fans = max ( fans , fw [ i - 1 ] + bw [ i + 1 ] ) ; } return fans ; }
string moveSpaceInFront ( string s ) { int i = s . length ( ) - 1 ; for ( int j = i ; j >= 0 ; j -- ) { if ( s [ j ] != ' ▁ ' ) { s = s [ : i ] + s [ j ] + s [ i + 1 ] ; i -- ; } } while ( i >= 0 ) { s = s [ : i ] + ' ▁ ' + s [ i + 1 ] ; i -- ; } return s ; }
void recaman ( int n ) { int arr [ n ] ; arr [ 0 ] = 0 ; cout << arr [ 0 ] << " ▁ " ; for ( int i = 1 ; i < n ; i ++ ) { int curr = arr [ i - 1 ] - i ; for ( int j = 0 ; j < i ; j ++ ) { if ( ( arr [ j ] == curr ) || curr < 0 ) { curr = arr [ i - 1 ] + i ; break ; } } arr [ i ] = curr ; cout << arr [ i ] << " , ▁ " ; } }
int findMaxPoints ( int A [ ] [ N ] ) { int i , j ; int P1S [ N ] [ M + 2 ] ; int P1E [ N ] [ M + 2 ] ; int P2S [ N ] [ M + 2 ] ; int P2E [ N ] [ M + 2 ] ; memset ( P1S , 0 , sizeof ( P1S ) ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < M ; j ++ ) { P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ; } for ( i = 0 ; i <= N ; i ++ ) { for ( j = 0 ; j <= M ; j ++ ) { P1E [ i ] [ j ] = max ( P1E [ i - 1 ] [ j ] , P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ; } } for ( i = 0 ; i <= N ; i ++ ) { for ( j = 0 ; j <= M ; j ++ ) { P2S [ i ] [ j ] = max ( P2S [ i - 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ; } } int ans = 0 ; for ( i = 2 ; i <= N ; i ++ ) { for ( j = 0 ; j <= M ; j ++ ) { P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ; } } return ans ; }
int KnapSack ( int val [ ] , int wt [ ] , int n , int W ) { int mat [ W ] [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < W ; j ++ ) { if ( wt [ i ] <= j ) mat [ 1 ] [ j ] = max ( val [ i ] + mat [ 0 ] [ j - wt [ i ] ] , mat [ 1 ] [ j ] ) ; else mat [ 1 ] [ j ] = mat [ 0 ] [ j ] ; } } if ( n % 2 == 0 ) return mat [ 0 ] [ W ] ; else { mat [ 0 ] [ j ] = mat [ 1 ] [ j ] ; } } if ( n % 2 == 0 ) return mat [ 0 ] [ W ] ; else { return mat [ 1 ] [ W ] ; } }
int modInverse ( int a , int m ) { a = a % m ; for ( int x = 1 ; x < m ; x ++ ) if ( ( a * x ) % m == 1 ) return x ; return 1 ; }
int lenghtOfLongestAP ( int * set , int n ) { if ( n <= 2 ) return n ; int L [ n ] [ n - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] [ n - 1 ] = 2 ; for ( int j = n - 2 ; j >= 0 ; j -- ) { int i = j - 1 ; int k = j + 1 ; while ( i >= 0 && k <= n - 1 ) { if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++ ; else L [ i ] [ j ] = L [ j ] [ k ] + 1 ; llap = max ( llap , L [ i ] [ j ] ) ; i -- ; k ++ ; } } return llap ; }
int countOfBinaryNumberLessThanN ( int N ) { queue < int > q ; q . push ( 1 ) ; int cnt = 0 ; while ( q . empty ( ) ) { int t = q . front ( ) ; q . pop ( ) ; if ( t <= N ) { cnt ++ ; q . push ( t * 10 ) ; q . push ( t * 10 + 1 ) ; } } return cnt ; }
int findIndex ( int n ) { if ( n <= 1 ) return n ; int a = 0 , b = 1 , c = 1 ; int res = 1 ; while ( c < n ) { c = a + b ; res = res + 1 ; a = b ; b = c ; } return res ; }
void substringConversions ( string str , int k , int b ) { for ( int i = 0 ; i <= k ; i ++ ) { string sub = str [ i ] ; int sum = 0 ; int counter = 0 ; for ( int i = 0 ; i < sub . length ( ) ; i ++ ) { sum += ( sub [ i ] - '0' ) * pow ( b , counter ) ) ; counter ++ ; } cout << sum << " ▁ ▁ " ; }
int maxSumPairWithDifferenceLessThanK ( int arr [ ] , int N , int k ) { int maxSum = 0 ; sort ( arr , arr + N ) ; for ( int i = N - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] - arr [ i - 1 ] < k ) maxSum += arr [ i ] ; maxSum += arr [ i - 1 ] ; } return maxSum ; }
string longestRepeatedSubSeq ( string str ) { int n = strlen ( str ) ; int dp [ n ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) dp [ 0 ] [ i + 1 ] = str [ i ] [ 0 ] ; for ( int j = 0 ; j <= n ; j ++ ) dp [ 0 ] [ j ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } string res = ' ' ; for ( int i = n ; i > 0 && j > 0 ; i -- ) { if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) res += str [ i - 1 ] ; i -- ; j -- ; } res = ' \0' ; } return res ; }
bool isHeap ( int arr [ ] , int n ) { for ( int i = 0 ; i <= ( n - 2 ) / 2 ; i ++ ) { if ( arr [ 2 * i + 1 ] > arr [ i ] ) return false ; if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) return false ; } return true ; }
int calculateEnergy ( int mat [ ] [ MAX ] , int n ) { int tot_energy = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int q = mat [ i ] [ j ] / n ; int i_des = q ; int j_des = q ; tot_energy += ( abs ( i_des - i ) + abs ( j_des - j ) ) ; } } return tot_energy ; }
void rearrange ( int a [ ] , int size ) { int positive = 0 , negative = 1 ; while ( true ) { while ( positive < size && a [ positive ] >= 0 ) positive ++ ; while ( negative < size && a [ negative ] <= 0 ) negative ++ ; if ( positive < size && a [ positive ] >= 0 ) positive ++ ; if ( negative < size ) { int temp = a [ positive ] ; a [ positive ] = a [ negative ] ; a [ negative ] = temp ; } else break ; } }
void antiSpiralTraversal ( int m , int n , int a [ R ] [ C ] ) { int i , k = 0 , l = 0 ; vector < int > stk ; for ( i = l ; i <= n ; ++ i ) { stk . push ( a [ k ] [ i ] ) ; } k ++ ; for ( i = k ; i <= m ; ++ i ) { stk . push ( a [ i ] [ n ] ) ; } n -- ; if ( k <= m ) { for ( i = n ; i <= l ; -- i ) { stk . push ( a [ m ] [ i ] ) ; m -- ; } if ( l <= n ) { for ( i = m ; i >= k ; -- i ) { stk . push ( a [ i ] [ l ] ) ; } l ++ ; } } while ( stk . empty ( ) ) cout << " ▁ " ; }
void maxProduct ( int arr [ ] , int n ) { if ( n < 2 ) cout << " No ▁ pairs ▁ exists " << endl ; if ( n == 2 ) cout << arr [ 0 ] << " ▁ " << arr [ 1 ] << endl ; return ; } int posa = 0 , posb = 0 , nega = 0 , negb = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > posa ) { posb = posa ; posa = arr [ i ] ; } else if ( arr [ i ] < 0 && abs ( arr [ i ] ) > abs ( nega ) ) { negb = nega ; nega = arr [ i ] ; } } if ( nega * negb > posa * posb ) cout << " Max ▁ product ▁ pair ▁ is ▁ " << nega << " , ▁ " << negb << " } " ; else cout << " Max ▁ product ▁ pair ▁ is ▁ { " << posa << " , ▁ " << posb << " } " ; }
int findMaxVal ( int arr [ ] , int n , int num , int maxLimit ) { int ind = - 1 , val = - 1 ; int dp [ n ] [ maxLimit + 1 ] ; for ( ind = 0 ; ind < n ; ind ++ ) dp [ 0 ] [ i ] = 1 ; for ( val = 0 ; val < maxLimit ; val ++ ) dp [ 0 ] [ val ] = 0 ; for ( ind = 1 ; ind < n ; ind ++ ) { for ( val = 1 ; val < maxLimit ; val ++ ) { if ( num - arr [ ind ] == val || num + arr [ ind ] == val ) dp [ ind ] [ val ] = 1 ; else dp [ ind ] [ val ] = 0 ; } } for ( val = maxLimit ; val >= 0 && val + arr [ ind ] <= maxLimit ; val ++ ) { if ( dp [ ind - 1 ] [ val - arr [ ind ] ] == 1 || dp [ ind - 1 ] [ val + arr [ ind ] ] == 1 ) dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ ind ] ] ; else dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ ind ] ] ; } } return - 1 ; }
int Resources ( int process , int need ) { int minResources = 0 ; minResources = process * ( need - 1 ) + 1 ; return minResources ; }
void bubbleSort ( int arr [ ] ) { int n = arr . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n - i - 1 ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { swap ( arr [ j ] , arr [ j + 1 ] ) ; } } }
int superSeq ( int X [ ] , int Y [ ] , int m , int n ) { int dp [ m + 2 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) dp [ i ] [ 0 ] = i ; for ( int j = 0 ; j <= n ; j ++ ) dp [ 0 ] [ j ] = j ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( ! i ) dp [ i ] [ j ] = i ; else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } return dp [ m ] [ n ] ; }
int countIntegralSolutions ( int n ) { int result = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) if ( i + j + k == n ) result ++ ; } } return result ; }
int minJumps ( int arr [ ] , int n ) { int jumps [ n ] ; memset ( jumps , 0 , sizeof ( jumps ) ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] == 0 ) jumps [ i ] = float ( ' inf ' ) ; else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ; else { int min = float ( ' inf ' ) ; for ( int j = i + 1 ; j <= n ; j ++ ) { if ( min > jumps [ j ] ) min = jumps [ j ] ; } } } return jumps [ 0 ] ; }
int minAdjustmentCost ( int A [ ] , int n , int M ) { int dp [ M + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= M ; i ++ ) dp [ 0 ] [ i ] = abs ( j - A [ 0 ] ) ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 0 ; j <= M ; j ++ ) dp [ 0 ] [ j ] = abs ( j - A [ 0 ] ) ; for ( int i = 1 ; i <= M ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { int k ; for ( k = max ( j - target , 0 ) ; min ( M , j + target ) ; k ++ ) dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ i - 1 ] [ k ] + abs ( A [ i ] - j ) ) ; } } int res = 10000000 ; for ( int j = 0 ; j <= M ; j ++ ) res = min ( res , dp [ n - 1 ] [ j ] ) ; return res ; }
int kthSmallest ( int arr [ ] , int n , int k ) { sort ( arr , arr + n ) ; return arr [ k - 1 ] ; }
int minCost ( int cost [ ] [ N ] ) { int dist [ N ] ; memset ( dist , 0 , sizeof dist ) ; for ( int i = 0 ; i < N ; i ++ ) dist [ i ] = INF ; dist [ 0 ] = 0 ; for ( int i = 1 ; i < N ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) { if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ] ; } } return dist [ N - 1 ] ; }
string reversingString ( string str , int start , int end ) { for ( start = 0 ; start < end ; start ++ ) { str = str [ : start ] + ( char ) ( str [ start ] ^ str [ end ] ) + str [ start + 1 : ] ; str = str [ : end ] + ( char ) ( str [ start ] ^ str [ end ] ) + str [ end + 1 : ] ; str = str [ : start ] + ( char ) ( str [ start ] ^ str [ end ] ) + str [ start + 1 : ] ; } return str ; }
int minimalSteps ( string s , int n ) { int dp [ n ] ; s1 = " " , s2 = " " ; dp [ 0 ] = 1 ; s1 += s [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { s1 += s [ i ] ; s2 = s [ i + 1 : i + 1 + i + 1 ] ; dp [ i ] = min ( dp [ i ] , dp [ i - 1 ] + 1 ) ; if ( s1 == s2 ) dp [ i * 2 + 1 ] = min ( dp [ i ] + 1 , dp [ i * 2 + 1 ] ) ; } return dp [ n - 1 ] ; }
int MinimumCost ( int cost [ ] , int n , int W ) { int val [ n ] ; int wt [ W ] ; int size = 0 ; for ( int i = 0 ; i < n ; i ++ ) { val . push_back ( cost [ i ] ) ; wt . push_back ( i + 1 ) ; size ++ ; } int min_cost [ W + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < W ; i ++ ) { min_cost [ i ] [ 0 ] = INF ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= W ; j ++ ) { if ( wt [ i - 1 ] > j ) { min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] ) ; } } if ( min_cost [ n ] [ W ] == INF ) return - 1 ; else return min_cost [ n ] [ W ] ; }
void bitonicGenerator ( int arr [ ] , int n ) { int evenArr [ n ] ; int oddArr [ n ] ; for ( int i = 0 ; i < n ; i ++ ) evenArr . push ( arr [ i ] ) ; else oddArr . push ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i % 2 ) == 0 ) evenArr . push ( arr [ i ] ) ; else oddArr . push ( arr [ i ] ) ; } sort ( evenArr , evenArr + n ) ; for ( int j = 0 ; j < n ; j ++ ) { arr [ i ] = evenArr [ j ] ; i ++ ; } for ( int j = 0 ; j < n ; j ++ ) { arr [ i ] = evenArr [ j ] ; i ++ ; } }
int countDivisibles ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [ i ] == 0 ) res ++ ; } return res ; }
int lis ( int arr [ ] ) { int n = arr . length ( ) ; int maximum = 1 ; _lis ( arr , n ) ; return maximum ; }
void printFirstRepeating ( int arr [ ] , int n ) { int Min = - 1 ; map < int , int > myset ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] == myset . end ( ) ) { Min = i ; } else myset [ arr [ i ] ] = 1 ; } } if ( Min != - 1 ) cout << " The ▁ first ▁ repeating ▁ element ▁ is ▁ " << arr [ Min ] ; else cout << " There ▁ are ▁ no ▁ repeating ▁ elements " ; }
int minCoins ( int coins [ ] , int m , int V ) { if ( V == 0 ) return 0 ; int res = INT_MAX ; for ( int i = 0 ; i < m ; i ++ ) { if ( coins [ i ] <= V ) { int sub_res = minCoins ( coins , m , V - coins [ i ] ) ; if ( sub_res != sys . maxsize && sub_res + 1 < res ) res = sub_res + 1 ; } } return res ; }
void pairSum ( int mat [ ] [ MAX ] , int n , int sum ) { for ( int i = 0 ; i < n ; i ++ ) sort ( mat [ i ] , mat [ i + 1 ] ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int left = 0 , right = n - 1 ; while ( left < n && right >= 0 ) { if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) cout << " ( " << mat [ i ] [ left ] << " , ▁ " << mat [ j ] [ right ] << " ) << ▁ " ; left ++ ; right -- ; } else { if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++ ; else right -- ; } } }
int minimum_cost ( int a [ ] , int n ) { int mn = INT_MAX ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mn = min ( a [ i ] , mn ) ; sum += a [ i ] ; } return mn * ( sum - mn ) ; }
int lps ( char str [ ] ) { int n = strlen ( str ) ; int L [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] [ i ] = 1 ; for ( int cl = 2 ; cl <= n ; cl ++ ) { for ( int i = 0 ; i < n - cl + 1 ; i ++ ) { int j = i + cl - 1 ; if ( str [ i ] == str [ j ] && cl == 2 ) L [ i ] [ j ] = 2 ; else if ( str [ i ] == str [ j ] ) L [ i ] [ j ] = 2 ; else L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ; } } return L [ 0 ] [ n - 1 ] ; }
string censor ( string text , string word ) { string word_list [ ] ; string result = ' ' ; string stars = ' * ' ; int count = 0 ; int index = 0 ; for ( int i = 0 ; i < word_list . size ( ) ; i ++ ) { if ( i == word ) word_list [ index ] = stars ; index ++ ; } result = ' ▁ ' . join ( word_list ) ; return result ; }
bool isPowerOfFour ( int n ) { if ( n == 0 ) return false ; while ( n != 1 ) { if ( n % 4 != 0 ) return false ; n = n / 4 ; } return true ; }
float getArea ( float a ) { float area = ( pi * a * a ) / 4 ; return area ; }
int distancesum ( int x [ ] , int y [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) ) ; } return sum ; }
void findMax ( int arr [ ] [ N ] ) { int row = 0 , j = N - 1 ; for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] [ j ] == 1 ) { row = i ; j -- ; } } cout << " Row ▁ number ▁ = ▁ " << row + 1 << " , ▁ MaxCount ▁ = ▁ " << N - 1 - j << endl ; }
int lastNon0Digit ( int n ) { if ( n < 10 ) return dig [ n ] ; if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ; else return 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ; }
int evenFibSum ( int limit ) { if ( limit < 2 ) return 0 ; int ef1 = 0 , ef2 = 2 ; int sm = ef1 + ef2 ; while ( ef2 <= limit ) { int ef3 = 4 * ef2 + ef1 ; if ( ef3 > limit ) break ; ef1 = ef2 ; ef2 = ef3 ; sm = sm + ef2 ; } return sm ; }
int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) return i ; i += abs ( arr [ i ] - x ) ; } cout << " number ▁ is ▁ not ▁ present ! " ; return - 1 ; }
bool isRotated ( string str1 , string str2 ) { if ( str1 . length ( ) != str2 . length ( ) ) return false ; string clock_rot = " " , anticlock_rot = " " ; int l = str2 . length ( ) ; anticlock_rot = ( anticlock_rot + str2 [ l - 2 : ] + str2 [ 0 : l - 2 ] ) ; clock_rot = clock_rot + str2 [ 2 : ] + str2 [ 0 : 2 ] ; return ( str1 == clock_rot || str1 == anticlock_rot ) ; }
void printHosoya ( int n ) { int dp [ N ] [ N ] ; memset ( dp , 0 , sizeof ( dp ) ) ; dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 0 ] [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] ; } } for ( int i = 0 ; i <= n ; i ++ ) cout << dp [ i ] [ j ] << ' ▁ ' ; cout << endl ; }
int findSubArray ( int arr [ ] , int n ) { int sum = 0 , maxsize = - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum = sum + ( - 1 ) if ( arr [ i ] == 0 ) else sum + 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1 ; if ( sum == 0 && maxsize < j - i + 1 ) { maxsize = j - i + 1 ; startindex = i ; } } } if ( maxsize == - 1 ) cout << " No ▁ such ▁ subarray " ; else cout << startindex << " to ▁ " << startindex + maxsize - 1 ; }
void insertionSortRecursive ( int arr [ ] , int n ) { if ( n <= 1 ) return ; insertionSortRecursive ( arr , n - 1 ) ; int j , last = arr [ n - 1 ] ; for ( j = n - 2 ; j >= 0 && arr [ j ] > last ; j -- ) arr [ j + 1 ] = arr [ j ] ; arr [ j + 1 ] = last ; }
int findDiff ( int arr [ ] , int n ) { map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; int max_count = 0 , min_count = n ; for ( int key = 0 ; key < mp . size ( ) ; key ++ ) { max_count = max ( max_count , values ) ; min_count = min ( min_count , values ) ; } return max_count - min_count ; }
int playGame ( int arr [ ] , int n ) { unordered_set < int > s ; for ( int i = 0 ; i < n ; i ++ ) s . insert ( arr [ i ] ) ; return 1 if ( s . size ( ) % 2 == 0 ) 2 ; }
int subset ( int arr [ ] , int n ) { map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; int res = 0 ; for ( int key = 0 ; key < 10 ; key ++ ) res = max ( res , value ) ; return res ; }
bool isProduct ( int arr [ ] , int n , int x ) { if ( n < 2 ) return false ; unordered_set < int > S ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) if ( x % arr [ i ] == 0 ) return true ; S . insert ( arr [ i ] ) ; } return false ; }
int largestSumOfAverages ( int A [ ] , int K ) { int n = A . size ( ) ; int pre_sum [ n + 1 ] ; pre_sum [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ; int dp [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n - i ) ; for ( int k = 0 ; k <= K - 1 ; k ++ ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - pre_sum [ i ] ) / ( j - i ) + dp [ j ] ) ; } } return int ( dp [ 0 ] ) ; }
int getMinSteps ( int n ) { int table [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) table [ i ] = n - i ; for ( int i = 0 ; i <= n ; i ++ ) { if ( ! ( i % 2 ) ) table [ i / 2 ] = min ( table [ i ] + 1 , table [ i / 2 ] ) ; if ( ! ( i % 3 ) ) table [ i / 3 ] = min ( table [ i ] + 1 , table [ i / 3 ] ) ; } return table [ 1 ] ; }
int nthTerm ( int n ) { return ( n * n ) + ( n * n * n ) ; }
int findMaxAverage ( int arr [ ] , int n , int k ) { if ( k > n ) return - 1 ; int sum = arr [ 0 ] ; for ( int i = 1 ; i < k ; i ++ ) sum += arr [ i ] ; int max_sum = sum ; int max_end = k - 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + arr [ i ] - arr [ i - k ] ; if ( sum > max_sum ) { max_sum = sum ; max_end = i ; } } return max_end - k + 1 ; }
int eggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) return k ; if ( n == 1 ) return k ; int min = INT_MAX ; for ( int x = 1 ; x <= k ; x ++ ) { int res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
int count ( string s , char c ) { int res = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s [ i ] == c ) res ++ ; return res ; }
int findRotations ( char str [ ] ) { char tmp [ 2 * n + 1 ] ; int n = str . length ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { char substring = tmp [ i : n ] ; if ( str == substring ) return i ; } return n ; }
int randomize ( int arr [ ] , int n ) { for ( int i = n - 1 ; i >= 0 ; i -- ) { int j = i + 1 ; arr [ i ] , arr [ j ] = arr [ j ] ; } return arr ; }
int findLength ( char str [ ] , int n ) { int sum [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = str [ i - 1 ] ; int ans = 0 ; for ( int length = 2 ; length <= n ; length ++ ) { for ( int i = 0 ; i <= n - length + 1 ; i ++ ) { int j = i + length - 1 ; if ( sum [ i + length / 2 ] - sum [ i ] == sum [ i + length ] - sum [ i + length / 2 ] ) ans = max ( ans , length ) ; } } return ans ; }
void translate ( char str [ ] ) { int l = str . length ( ) ; if ( l < 2 ) return ; int i = 0 , j = 0 ; while ( j < l - 1 ) { if ( str [ j ] == ' A ' && str [ j + 1 ] == ' B ' ) { j ++ ; st [ i ] = ' C ' ; i ++ ; continue ; } if ( j == l - 1 ) { st [ i ] = st [ j ] ; i ++ ; } st [ i ] = ' ▁ ' ; st [ l - 1 ] = ' ▁ ' ; } }
int maximumNumberDistinctPrimeRange ( int m , int n ) { int factorCount [ n + 1 ] ; bool prime [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) factorCount [ i ] = 0 ; prime [ i ] = true ; for ( int i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] == true ) factorCount [ i ] = 1 ; for ( int j = i * 2 ; j <= n ; j ++ ) factorCount [ j ] ++ ; prime [ j ] = false ; } } int max = factorCount [ m ] ; int num = m ; for ( int i = 0 ; i <= n ; i ++ ) { if ( factorCount [ i ] > max ) max = factorCount [ i ] ; num = i ; } } return num ; }
int catalan ( int n ) { if ( n <= 1 ) return 1 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res += catalan ( i ) * catalan ( n - i - 1 ) ; return res ; }
int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ; return sum ; }
int minRevolutions ( int r , int x1 , int y1 , int x2 , int y2 ) { double d = ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ; return d / ( 2 * r ) ; }
void printString ( char str [ ] , char ch , int count ) { int occ = 0 ; if ( count == 0 ) cout << str << " \n " ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == ch ) ++ occ ; if ( occ == count ) break ; if ( i < str . length ( ) - 1 ) cout << str [ i + 1 ] ; else cout << " Empty ▁ string " ; } }
int largestKSubmatrix ( int a [ ] [ COL ] ) { int dp [ Row ] [ Col ] ; int result = 0 ; for ( int i = 0 ; i < Row ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int j = 0 ; j < Col ; j ++ ) dp [ 0 ] [ j ] = 1 ; for ( int i = 1 ; i < Row ; i ++ ) { for ( int j = 0 ; j < Col ; j ++ ) { if ( a [ i ] [ j ] == a [ i - 1 ] [ j ] ) dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; else dp [ i ] [ j ] = 1 ; } } result = max ( result , dp [ i ] [ j ] ) ; } return result ; }
void printPascal ( int n ) { int arr [ n ] [ n ] ; for ( int line = 0 ; line < n ; line ++ ) { for ( int i = 0 ; i < line ; i ++ ) { if ( i is 0 || i is line ) { arr [ line ] [ i ] = 1 ; cout << arr [ line ] [ i ] << " ▁ " ; } else { arr [ line ] [ i ] = ( arr [ line - 1 ] [ i - 1 ] + arr [ line - 1 ] [ i ] ) ; cout << arr [ line ] [ i ] << " ▁ " ; } } cout << " \n " ; }
int answer_query ( char a [ ] , int n , int l , int r ) { int count = 0 ; for ( int i = l ; i < r ; i ++ ) if ( a [ i ] == a [ i + 1 ] ) count ++ ; return count ; }
int cassini ( int n ) { return n & 1 ; }
int compute_average ( int a , int b ) { return ( a + b ) / 2 ; }
int waysToArrange ( int N , int K , int k ) { int C [ N ] [ N + 1 ] ; memset ( C , 0 , sizeof ( C ) ) ; for ( int i = 0 ; i <= N ; i ++ ) C [ i ] [ 0 ] = 1 ; for ( int j = 0 ; j <= i ; j ++ ) C [ 0 ] [ j ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ) ; } } int dp [ K ] ; for ( int i = 0 ; i < K ; i ++ ) dp [ i + 1 ] = dp [ i ] * C [ count + k [ i ] - 1 ] [ k [ i ] - 1 ] ; count += k [ i ] ; return dp [ K ] ; }
int findDimen ( int H , int A ) { if ( H * H < 4 * A ) cout << " Not ▁ Possible " ; return 0 ; } int apb = sqrt ( H * H + 4 * A ) ; int asb = sqrt ( H * H - 4 * A ) ; cout << " P ▁ = ▁ " << " % .2f " % ( ( apb - asb ) / 2.0 ) ; cout << " B ▁ = ▁ " << " % .2f " % ( ( apb + asb ) / 2.0 ) ; }
int maxTripletSum ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ) ; }
int MaxDotProduct ( int A [ ] , int B [ ] , int m , int n ) { int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) dp [ 0 ] [ i + 1 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i ; j <= m ; j ++ ) dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) , dp [ i ] [ j - 1 ] ) ; return dp [ n ] [ m ] ; }
int findMinDiff ( int arr [ ] , int n ) { int diff = INT_MAX ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [ i + 1 ] - arr [ i ] ; } return diff ; }
int findLastIndex ( string str , int x ) { for ( int i = str . length ( ) - 1 ; i >= 0 ; i -- ) if ( str [ i ] == x ) return i ; return - 1 ; }
int maxLower ( string & str ) { int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( str [ i ] >= ' A ' && str [ i ] <= ' Z ' ) break ; int maxCount = 0 ; int count [ MAX_CHAR ] ; for ( int j = 0 ; j < MAX_CHAR ; j ++ ) { count . push ( 0 ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( str [ j ] >= ' A ' && str [ j ] <= ' Z ' ) { int currCount = 0 ; for ( int k = 0 ; k < MAX_CHAR ; k ++ ) if ( count [ k ] > 0 ) currCount ++ ; maxCount = max ( maxCount , currCount ) ; } } return maxCount ; }
void findElements ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr [ j ] > arr [ i ] ) ++ count ; if ( count >= 2 ) cout << arr [ i ] << " ▁ " ; } }
int evenlength ( int n ) { int res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; j -- ) res += n [ j ] ; return res ; }
int maxLen ( int arr [ ] , int n ) { map < int , int > hash_map ; int i ; int curr_sum = 0 ; int max_len = 0 ; int ending_index = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) arr [ i ] = - 1 ; else arr [ i ] = 1 ; } for ( i = 0 ; i < n ; i ++ ) { curr_sum = curr_sum + arr [ i ] ; if ( curr_sum == 0 ) { max_len = i + 1 ; ending_index = i ; } else hash_map [ curr_sum ] = i ; } } for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == - 1 ) arr [ i ] = 0 ; else arr [ i ] = 1 ; } } cout << ending_index - max_len + 1 << " ▁ " ; cout << endl ; }
int possibleStrings ( int n , int r , int b , int g ) { int fact [ n + 1 ] ; fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i - 1 ] * i ; int left = n - ( r + g + b ) ; int sum = 0 ; for ( int i = 0 ; i <= left ; i ++ ) { for ( int j = 0 ; j < left - i ; j ++ ) { int k = left - ( i + j ) ; sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) ; } } return sum ; }
int numberofways ( int A , int B [ ] , int N , int M ) { int pos [ MAX ] ; for ( int i = 0 ; i < M ; i ++ ) pos [ B [ i ] ] . push_back ( i + 1 ) ; int dpl [ N ] [ M ] ; for ( int i = 1 ; i <= N ; i ++ ) dpl [ i ] [ 0 ] = A [ i - 1 ] [ B [ j - 1 ] + 1 ; for ( int i = 1 ; i <= M ; i ++ ) { for ( int j = 1 ; j <= M ; j ++ ) { if ( A [ i - 1 ] == B [ j - 1 ] ) dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1 ; else dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ] , dpl [ i ] [ j - 1 ] ) ; } } int ans = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= M ; j ++ ) { if ( A [ i - 1 ] == B [ j - 1 ] ) dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1 ; else dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ] , dpr [ i ] [ j + 1 ] ) ; } } return ans ; }
float circumference ( float r ) { return ( 2 * pi * r ) ; }
void substringConversions ( string s , int k , int b ) { int l = s . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( ( i + k ) < l + 1 ) { string sub = s [ i : i + k ] ; int sum = 0 ; int counter = 0 ; for ( i = 0 ; i < sub . length ( ) - 1 ; i -- ) { sum += ( sub [ i ] - ' 0' ) * pow ( b , counter ) ; counter ++ ; } cout << sum << " ▁ " ; } }
int maxPathSum ( int tri [ ] [ MAX ] , int m , int n ) { for ( int i = m - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) { tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ; else { tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ; } } } return tri [ 0 ] [ 0 ] ; }
int sumOfKsubArray ( int arr [ ] , int n , int k ) { int sum = 0 ; queue < int > S ; queue < int > G ; for ( int i = 0 ; i < k ; i ++ ) S . push ( arr [ i ] ) ; while ( ! S . empty ( ) && ! G . empty ( ) ) { while ( ! S . empty ( ) && arr [ G [ - 1 ] ] <= arr [ i ] ) G . pop ( ) ; } sum += arr [ S [ 0 ] ] + arr [ G [ 0 ] ] ; for ( int i = 0 ; i < n ; i ++ ) { while ( ! S . empty ( ) && S [ 0 ] <= i - k ) { S . pop ( ) ; } while ( ! G . empty ( ) && ! G . empty ( ) ) { G . push ( i ) ; S . push ( i ) ; } sum += arr [ S [ 0 ] ] + arr [ G [ 0 ] ] ; } return sum ; }
int fun ( int n ) { return n & ( n - 1 ) ; }
int mirrorImage ( int a , int b , int c , int x1 , int y1 ) { int temp = ( a * x1 + b * y1 + c ) / ( a * a + b * b ) ; int x = temp * a + x1 ; int y = temp * b + y1 ; return ( x , y ) ; }
void printDistinct ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) break ; else if ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) cout << arr [ i ] << " ▁ " ; else cout << arr [ i ] << " ▁ " ; }
int printIntersection ( int arr1 [ ] , int arr2 [ ] , int m , int n ) { int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( arr1 [ i ] < arr2 [ j ] ) i ++ ; else if ( arr2 [ j ] < arr1 [ i ] ) j ++ ; else cout << arr2 [ j ++ ] << " ▁ " ; } }
int search ( int arr [ ] , int n , int x , int k ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) return i ; i = i + max ( 1 , abs ( arr [ i ] - x ) / k ) ; } cout << " number ▁ is ▁ not ▁ present ! " ; return - 1 ; }
string arrangeString ( string str ) { int char_count [ MAX_CHAR ] = { 0 } ; int s = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] >= " A " && str [ i ] <= " Z " ) char_count [ str [ i ] - " A " ] ++ ; else s += str [ i ] - " 0" ; } string res = " " ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { char ch = ( char ) ( " A " + i ) ; while ( char_count [ i ] ) res += ch ; char_count [ i ] -- ; } return res ; }
int countStrings ( int n ) { int a [ n ] , b [ n ] ; a [ 0 ] = b [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) b [ i ] = a [ i - 1 ] ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i - 1 ] + b [ i - 1 ] ; b [ i ] = a [ i - 1 ] ; } return a [ n - 1 ] + b [ n - 1 ] ; }
int minSum ( int arr [ ] , int n ) { int dp [ n ] ; if ( n == 1 ) return arr [ 0 ] ; if ( n == 2 ) return min ( arr [ 0 ] , arr [ 1 ] ) ; if ( n == 3 ) return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) ) ; if ( n == 4 ) return min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) ; for ( int i = 4 ; i < n ; i ++ ) dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) ) ; dp [ 0 ] = arr [ 0 ] ; dp [ 1 ] = arr [ 1 ] ; dp [ 2 ] = arr [ 2 ] ; dp [ 3 ] = arr [ 3 ] ; for ( int i = 4 ; i < n ; i ++ ) dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) ) ; return min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) ) ; }
string printSequence ( int arr [ ] , string input ) { int n = arr . size ( ) ; string output = " " ; for ( int i = 0 ; i < n ; i ++ ) { if ( input [ i ] == ' ▁ ' ) output = output + "0" ; else { int position = ( input [ i ] ) - ' A ' ; output = output + arr [ position ] ; } } return output ; }
int rotateMatrix ( int mat [ R ] [ C ] ) { if ( mat == NULL ) return ; int top = 0 , bottom = mat . size ( ) - 1 ; int left = 0 , right = mat [ 0 ] [ C ] ; int prev = mat [ top + 1 ] [ left ] ; while ( left < right && top < bottom ) { for ( int i = left ; i <= right ; i ++ ) { int curr = mat [ top ] [ i ] ; mat [ top ] [ i ] = prev ; prev = curr ; } top ++ ; for ( int i = top ; i <= bottom ; i ++ ) { int curr = mat [ i ] [ right ] ; mat [ i ] [ right ] = prev ; prev = curr ; } right -- ; for ( int i = bottom ; i >= top - 1 ; i -- ) { curr = mat [ bottom ] [ i ] ; mat [ bottom ] [ i ] = prev ; prev = curr ; } } return mat ; }
int maxcoefficientvalue ( int n ) { int C [ n ] [ n + 1 ] ; memset ( C , 0 , sizeof ( C ) ) ; for ( int i = 0 ; i <= n ; i ++ ) C [ 0 ] [ i ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = min ( i , n ) ; j <= i ; j ++ ) C [ i ] [ j ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = min ( j , n ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ) ; } } int maxvalue = 0 ; for ( int i = 0 ; i <= n ; i ++ ) maxvalue = max ( maxvalue , C [ n ] [ i ] ) ; return maxvalue ; }
int gcd ( int a , int b ) { if ( a < b ) return gcd ( b , a ) ; if ( abs ( b ) < 0.001 ) return a ; else if ( abs ( b ) < 0.001 ) return a ; else return gcd ( b , a - math . floor ( a / b ) * b ) ; }
string sortByPattern ( string str , string pat ) { int count [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) count [ str [ i ] - 97 ] ++ ; int index = 0 ; str = " " ; for ( int i = 0 ; i < pat . length ( ) ; i ++ ) { int j ; for ( j = 0 ; j < count [ pat [ i ] - ' a ' ] ; j ++ ) str += pat [ i ] ; index ++ ; } return str ; }
void rearrange ( int arr [ ] , int n ) { int max_idx = n - 1 ; int min_idx = 0 ; int max_elem = arr [ n - 1 ] + 1 ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem ; max_idx -- ; else { arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem ; min_idx ++ ; } } for ( i = 0 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] / max_elem ; } }
int minJumps ( int arr [ ] , int n ) { int jumps [ n ] ; if ( n == 0 ) return float ( ' inf ' ) ; jumps [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { jumps [ i ] = float ( ' inf ' ) ; for ( int j = 0 ; j < i ; j ++ ) { if ( i <= j + arr [ j ] ) { jumps [ i ] = min ( jumps [ i ] , jumps [ j ] + 1 ) ; break ; } } } return jumps [ n - 1 ] ; }
int find_prob ( int n , int P ) { int dp [ n + 1 ] ; dp [ 0 ] = 1 , dp [ 1 ] = 0 , dp [ 2 ] = P ; dp [ 3 ] = 1 - P ; for ( int i = 4 ; i <= N ; i ++ ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ] ; return dp [ N ] ; }
void waysToIncreaseLCSBy1 ( string str1 , string str2 ) { int m = strlen ( str1 ) , n = strlen ( str2 ) ; int position [ M ] ; for ( int i = 1 ; i <= M ; i ++ ) position [ i - 1 ] = ' \0' ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m + 2 ; j ++ ) { if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) lcsl [ i ] [ j ] = 1 + lcsl [ i - 1 ] [ j - 1 ] ; else lcsl [ i ] [ j ] = max ( lcsl [ i - 1 ] [ j ] , lcsl [ i ] [ j - 1 ] ) ; } } for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) lcsr [ i ] [ j ] = 1 + lcsr [ i + 1 ] [ j + 1 ] ; else lcsr [ i ] [ j ] = max ( lcsr [ i ] [ j ] , lcsr [ i ] [ j + 1 ] ) ; } } int ways = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int C = 0 ; C < 26 ; C ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( lcsl [ i ] [ j ] == 1 ) lcsl [ i ] [ j ] = 1 + lcsl [ i ] [ j ] ; } else { lcsl [ i ] [ j ] = max ( lcsl [ i ] [ j ] , position [ C ] [ j ] ) ; } } }
int lis ( int arr [ ] ) { int n = arr . size ( ) ; int lis [ n ] ; for ( int i = 1 ; i < n ; i ++ ) lis [ i ] = 1 ; for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ; } } int maximum = 0 ; for ( int i = 0 ; i < n ; i ++ ) maximum = max ( maximum , lis [ i ] ) ; return maximum ; }
void SternSequenceFunc ( char BrocotSequence [ ] , int n ) { for ( int i = 1 ; i < n ; i ++ ) { char considered_element = BrocotSequence [ i ] ; int precedent = BrocotSequence [ i - 1 ] ; BrocotSequence . push ( considered_element + precedent ) ; BrocotSequence . pop ( ) ; } for ( int i = 0 ; i < 15 ; i ++ ) cout << BrocotSequence [ i ] << " ▁ ▁ " ; }
void printTreeEdges ( int prufer [ ] , int m ) { int vertices = m + 2 ; int vertex_set [ vertices ] ; for ( int i = 0 ; i < vertices - 2 ; i ++ ) vertex_set [ prufer [ i ] - 1 ] ++ ; cout << " The ▁ edge ▁ set ▁ E ( G ) ▁ is ▁ : \n " ; for ( int i = 0 ; i < vertices - 2 ; i ++ ) { for ( int j = 0 ; j < vertices ; j ++ ) { if ( vertex_set [ j ] == 0 ) vertex_set [ j ] = - 1 ; cout << " ( " << ( j + 1 ) << " , ▁ " << prufer [ i ] << " ) ▁ " << endl ; break ; } } int j = 0 ; for ( int i = 0 ; i < vertices ; i ++ ) { if ( vertex_set [ i ] == 0 && j == 0 ) cout << " ( " << ( i + 1 ) << " , ▁ " << prufer [ i ] << " ) ▁ " << endl ; } }
int countDecodingDP ( char digits [ ] , int n ) { int count [ n + 1 ] ; count [ 0 ] = 1 , count [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { count [ i ] = 0 ; if ( digits [ i - 1 ] > '0' ) count [ i ] = count [ i - 1 ] ; if ( digits [ i - 2 ] == '1' || ( digits [ i - 2 ] == '2' && digits [ i - 1 ] < '7' ) count [ i ] += count [ i - 2 ] ; } return count [ n ] ; }
int countStrings ( int n ) { int a [ n ] , b [ n ] ; a [ 0 ] = b [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) a [ i ] = a [ i - 1 ] + b [ i - 1 ] ; b [ i ] = a [ i - 1 ] ; return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ; }
int maximumSegments ( int n , int a , int b , int c ) { int dp [ n + 10 ] ; dp [ 0 ] = 0 ; int i ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( i + a <= n ) dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] ) ; if ( i + b <= n ) dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] ) ; if ( i + c <= n ) dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] ) ; } } return dp [ n ] ; }
void printBracketNumber ( char exp [ ] , int n ) { int left_bnum = 1 , right_bnum = list ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( exp [ i ] == ' ( ' ) { cout << left_bnum << " ▁ " ; right_bnum . push ( left_bnum ) ; left_bnum ++ ; } else if ( exp [ i ] == ' ) ' { cout << right_bnum . top ( ) << " ▁ " ; right_bnum . pop ( ) ; } } }
int countWords ( char str [ ] , int l ) { int count = 1 ; if ( l == 1 ) return count ; if ( str [ 0 ] == str [ 1 ] ) count *= 1 ; else count *= 2 ; for ( int j = 1 ; j < l - 1 ; j ++ ) { if ( str [ j ] == str [ j - 1 ] && str [ j ] == str [ j + 1 ] ) count *= 1 ; else if ( str [ j ] == str [ j - 1 ] || str [ j ] == str [ j + 1 ] ) count *= 2 ; else count *= 3 ; } if ( str [ l - 1 ] == str [ l - 2 ] ) count *= 1 ; else count *= 2 ; } return count ; }
int largest ( int arr [ ] , int n ) { int max = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } return max ; }
int findMinDiff ( int arr [ ] , int n ) { int diff = INT_MAX ; for ( int i = 0 ; i <= n - 2 ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { if ( abs ( arr [ i ] - arr [ j ] ) < diff ) diff = abs ( arr [ i ] - arr [ j ] ) ; } } return diff ; }
int maxSum ( int arr [ ] , int n ) { int res = - sys . maxsize ; for ( int i = 0 ; i < n ; i ++ ) { int curr_sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { int index = ( i + j ) % n ; curr_sum += j * arr [ index ] ; res = max ( res , curr_sum ) ; } } return res ; }
double volumeOfEllipsoid ( double r1 , double r2 , double r3 ) { return 1.33 * math . pi * r1 * r2 * r3 ; }
int lcsOf3 ( int X [ ] , int Y [ ] , int Z [ ] , int m , int n , int o ) { int L [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) L [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j <= n ; j ++ ) L [ 0 ] [ j ] [ k ] = 0 ; for ( int k = 0 ; k < o ; k ++ ) { if ( i == 0 || j == 0 || k == 0 ) L [ i ] [ j ] [ k ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] && X [ i - 1 ] == Z [ k - 1 ] ) L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 ] + 1 ; else L [ i ] [ j ] [ k ] = max ( L [ i - 1 ] [ j ] [ k ] , L [ i ] [ j - 1 ] [ k ] ) ; } } return L [ m ] [ n ] [ o ] ; }
int countEndless ( int input_mat [ ] [ MAX ] , int n ) { int row [ n ] [ n ] ; int col [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( input_mat [ i ] [ j ] == 0 ) isEndless = false ; row [ i ] [ j ] = isEndless ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( input_mat [ i ] [ j ] == 0 ) isEndless = false ; row [ i ] [ j ] = isEndless ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) if ( row [ i ] [ j ] && col [ i ] [ j ] ) ans ++ ; } return ans ; }
void NextFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) { int allocation [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { allocation [ i ] = - 1 ; } j = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( blockSize [ j ] >= processSize [ i ] ) { allocation [ i ] = j ; blockSize [ j ] -= processSize [ i ] ; break ; } j ++ ; } cout << " Process ▁ No . ▁ Process ▁ Size ▁ Block ▁ no . " << endl ; for ( i = 0 ; i < n ; i ++ ) cout << " ▁ ▁ ▁ ▁ ▁ ▁ ▁ " << processSize [ i ] << " ▁ " << endl ; if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1 ; else cout << " Not ▁ Allocated " ; }
int lenOfLongestGP ( int sett [ ] , int n ) { if ( n < 2 ) return n ; if ( n == 2 ) return sett [ 1 ] % sett [ 0 ] == 0 ) ; int L [ n ] [ n - 1 ] ; int llgp = 1 ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] [ n - 1 ] = 2 ; for ( int i = 0 ; i < n ; i ++ ) { int k = j + 1 ; while ( i >= 0 && k <= n - 1 ) { if ( sett [ i ] * sett [ k ] < sett [ j ] * sett [ j ] ) ++ k ; else L [ i ] [ j ] = L [ j ] [ k ] + 1 ; if ( L [ i ] [ j ] > llgp ) { llgp = L [ i ] [ j ] ; } i -- ; k ++ ; } } return llgp ; }
bool checkValidity ( int a , int b , int c ) { if ( ( a + b <= c ) || ( a + c <= b ) || ( b + c <= a ) ) return false ; else return true ; }
bool isDDM ( int m [ ] [ MAX ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) sum = sum + abs ( m [ i ] [ j ] ) ; sum = sum - abs ( m [ i ] [ i ] ) ; if ( abs ( m [ i ] [ i ] ) < sum ) return false ; } return true ; }
void transpose ( int A [ ] [ N ] , int B [ ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ; }
int returnMaxSum ( int A [ ] , int B [ ] , int n ) { unordered_set < int > mp ; int result = 0 ; int curr_sum = 0 ; int curr_begin = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( A [ i ] in mp ) mp . remove ( A [ curr_begin ] ) ; curr_sum -= B [ curr_begin ] ; curr_begin ++ ; } mp . insert ( A [ i ] ) ; result = max ( result , curr_sum ) ; } return result ; }
int sumEqualProduct ( int a [ ] , int n ) { int zero = 0 , two = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) zero ++ ; if ( a [ i ] == 2 ) two ++ ; } int cnt = ( zero * ( zero - 1 ) ) / 2 + \ NEW_LINE INDENT ( two * ( two - 1 ) ) / 2 ; return cnt ; }
int shortestDist ( int graph [ ] [ N ] ) { int dist [ N ] ; memset ( dist , 0 , sizeof dist ) ; dist [ N - 1 ] = 0 ; for ( int i = N - 2 ; i >= 0 ; i -- ) { dist [ i ] = INF ; for ( int j = 0 ; j < N ; j ++ ) { if ( graph [ i ] [ j ] == INF ) continue ; dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] ) ; } } return dist [ 0 ] ; }
int calculateSum ( int n ) { int sum = 0 ; sum = 1 << n ; return sum - 1 ; }
bool isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }
void fib ( int n ) { int a = 0 , b = 1 ; if ( n >= 0 ) cout << a << ' ▁ ' ; if ( n >= 1 ) cout << b << ' ▁ ' ; for ( int i = 2 ; i <= n ; i ++ ) cout << a + b << ' ▁ ' ; if ( n >= 2 ) cout << b << a << ' ▁ ' ; }
int kthdigit ( int a , int b , int k ) { int p = a ** b ; int count = 0 ; while ( p > 0 && count < k ) { int rem = p % 10 ; count ++ ; if ( count == k ) return rem ; p = p / 10 ; } }
bool isEven ( int n ) { return ( n & 1 ) ; }
void printPath ( string str ) { int i = 0 ; int curX = 0 , curY = 0 ; while ( str [ i ] != ' \0' ) { int nextX = ( str [ i ] - ' A ' ) / 5 ; int nextY = ( str [ i ] - ' B ' ) + 1 ; % 5 ; while ( curX > nextX ) { cout << " Move ▁ Up " << ( str [ i ] - ' A ' ) << 5 ; while ( curY > nextY ) { cout << " Move ▁ Left " << curY << " \n " ; } cout << " Press ▁ OK " ; i ++ ; } }
bool checkcircle ( int r , int R , int r1 , int x1 , int y1 ) { int dis = ( sqrt ( x1 * x1 + y1 * y1 ) ) ; return ( dis - r1 >= R && dis + r1 <= r ) ; }
bool isMinHeap ( int level [ ] , int n ) { for ( int i = n / 2 ; i >= 0 ; i -- ) { if ( level [ i ] > level [ 2 * i + 1 ] ) return false ; if ( 2 * i + 2 < n ) { if ( level [ i ] > level [ 2 * i + 2 ] ) return false ; } } return true ; }
void thirdLargest ( int arr [ ] , int arr_size ) { if ( arr_size < 3 ) cout << " ▁ Invalid ▁ Input ▁ " << endl ; int first = arr [ 0 ] ; for ( int i = 1 ; i < arr_size ; i ++ ) first = arr [ i ] ; int second = INT_MIN ; for ( int i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ] ; } int third = INT_MAX ; for ( int i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ] ; } cout << " The ▁ Third ▁ Largest " << " element ▁ is ▁ " << third ; }
int maxHamming ( int arr [ ] , int n ) { int brr [ n ] ; for ( int i = 0 ; i < n ; i ++ ) brr [ i ] = arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) brr [ n + i ] = arr [ i ] ; for ( int i = 1 ; i < n ; i ++ ) { int currHam = 0 , k = 0 ; for ( int j = i ; j < n ; j ++ ) if ( brr [ j ] != arr [ k ] ) currHam ++ ; k ++ ; } if ( currHam == n ) return n ; maxHam = max ( maxHam , currHam ) ; } return maxHam ; }
int findSum ( int n , int K ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) ans += ( i % K ) ; return ans ; }
double seriesSum ( int n ) { int i = 1 ; double res = 0.0 ; bool sign = true ; while ( n > 0 ) { n -- ; if ( sign ) { sign = false ; res = res + ( i + 1 ) / ( i + 2 ) ; i = i + 2 ; } else { sign = true ; res = res - ( i + 1 ) / ( i + 2 ) ; i = i + 2 ; } } return res ; }
int countSetBits ( int n ) { int i = 0 ; int ans = 0 ; while ( ( 1 << i ) <= n ) { int k = 0 , change = 1 << i ; for ( int j = 0 ; j <= n ; j ++ ) { ans += k ; if ( change == 1 ) k = ! k ; else change -- ; } i ++ ; } return ans ; }
int getPairsCount ( int arr [ ] , int n , int sum ) { int m [ 1000 ] ; for ( int i = 0 ; i < n ; i ++ ) m [ arr [ i ] ] = 1 ; int twice_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { twice_count += m [ sum - arr [ i ] ] ; if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ; } return int ( twice_count / 2 ) ; }
bool isDiagonalMatrix ( int mat [ ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false ; } } return true ; }
void printSorted ( int a , int b , int c ) { int get_max = max ( a , max ( b , c ) ) ; int get_min = max ( - a , max ( - b , - c ) ) ; int get_mid = ( a + b + c ) - ( get_max + get_min ) ; cout << get_min << " ▁ " << get_mid << " ▁ " << get_max << endl ; }
bool isDivisible ( int n ) { while ( n / 100 ) { int last_digit = n % 10 ; n = n / 10 ; n += last_digit * 3 ; } return ( n % 29 == 0 ) ; }
int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; }
int minSumPath ( int A [ ] [ MAX ] ) { int memo [ MAX ] ; int n = A . size ( ) - 1 ; for ( int i = 0 ; i < n ; i ++ ) memo [ i ] = A [ n ] [ i ] ; for ( int i = 0 ; i < A . size ( ) - 2 ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) memo [ j ] = A [ i ] [ j ] + min ( memo [ j ] , memo [ j + 1 ] ) ; } return memo [ 0 ] ; }
void rearrange ( int arr [ ] , int n ) { int i = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] < 0 ) i ++ ; arr [ i ] , arr [ j ] = arr [ j ] ; } int pos = i + 1 , neg = 0 ; while ( pos < n && neg < pos && arr [ neg ] < 0 ) { arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ] ; pos ++ ; neg ++ ; } }
int countNum ( int arr [ ] , int n ) { int count = 0 ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1 ; } return count ; }
int largestGCDSubsequence ( int arr [ ] , int n ) { int ans = 0 ; int maxele = max ( arr ) ; for ( int i = 2 ; i <= maxele ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr [ j ] % i == 0 ) count ++ ; ans = max ( ans , count ) ; } return ans ; }
bool isNumber ( string s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s [ i ] . isdigit ( ) != true ) return false ; return true ; }
int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) { int count = 0 ; unordered_set < int > us ; for ( int i = 0 ; i < m ; i ++ ) us . insert ( arr1 [ i ] ) ; for ( int j = 0 ; j < n ; j ++ ) if ( x - arr2 [ j ] in us ) count ++ ; return count ; }
int CountSquares ( int a , int b ) { int cnt = 0 ; for ( int i = a ; i <= b ; i ++ ) { int j ; for ( j = 1 ; j * j <= i ; j ++ ) if ( j * j == i ) cnt ++ ; } return cnt ; }
int minSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += ( n % 10 ) ; n /= 10 ; if ( sum == 1 ) return 10 ; return sum ; }
int nonFibonacci ( int n ) { int prevPrev = 1 , prev = 2 , curr = 3 ; while ( n > 0 ) { prevPrev = prev ; prev = curr ; curr = prevPrev + prev ; n = n - ( curr - prev - 1 ) ; } return prev + n ; }
int lis ( int arr [ ] ) { int n = arr . size ( ) ; int lis [ n ] ; for ( int i = 1 ; i < n ; i ++ ) lis [ i ] = 1 ; for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ; } } int maximum = 0 ; for ( int i = 0 ; i < n ; i ++ ) maximum = max ( maximum , lis [ i ] ) ; return maximum ; }
void leftRotate ( int arr [ ] , int n , int k ) { for ( int i = k ; i < k + n ; i ++ ) cout << arr [ i % n ] << " ▁ " ; }
string repeat ( string s , int n ) { string s1 = s ; for ( int i = 1 ; i < n ; i ++ ) s += s1 ; return s ; }
string findSubString ( string str ) { int n = str . length ( ) ; int dist_count = strlen ( str ) ; int count = 0 , start = 0 , min_len = INT_MAX ; map < char , int > curr_count ; for ( int j = 0 ; j < n ; j ++ ) { curr_count [ str [ j ] ] ++ ; if ( curr_count [ str [ j ] ] == 1 ) count ++ ; if ( count == dist_count ) { while ( curr_count [ str [ start ] ] > 1 ) { if ( curr_count [ str [ start ] ] > 1 ) curr_count [ str [ start ] ] -- ; start ++ ; } len_window = j - start + 1 ; if ( min_len > len_window ) { min_len = len_window ; start_index = start ; } } return str [ start_index : start_index + min_len ] ; }
int findStep ( int n ) { if ( n == 1 || n == 0 ) return 1 ; else if ( n == 2 ) return 2 ; else return findStep ( n - 3 ) + findStep ( n - 2 ) + findStep ( n - 1 ) ; }
void printSubsequences ( char arr [ ] , int n ) { unsigned int opsize = pow ( 2 , n ) ; for ( int counter = 1 ; counter <= opsize ; counter ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( counter & ( 1 << j ) ) cout << arr [ j ] << " ▁ " ; } cout << endl ; } }
int minXOR ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int minXor = INT_MAX ; int val = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { val = arr [ i ] ^ arr [ i + 1 ] ; minXor = min ( minXor , val ) ; } return minXor ; }
void luDecomposition ( int mat [ ] [ MAX ] , int n ) { int lower [ n ] [ n ] ; int upper [ n ] [ n ] ; memset ( lower , 0 , sizeof ( lower ) ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int k = 0 ; k < n ; k ++ ) { int sum = 0 ; for ( int j = 0 ; j < i ; j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ; upper [ i ] [ k ] = mat [ i ] [ k ] - sum ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ; sum += ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ; } lower [ k ] [ i ] = 1 ; } } cout << " Lower ▁ Triangular\t\tUpper ▁ Triangular " << endl ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cout << lower [ i ] [ j ] << " \t " ; } cout << " \n " ; }
void bin ( int n ) { if ( n > 1 ) bin ( n >> 1 ) ; cout << n & 1 ; }
int CountPS ( char * str , int n ) { int dp [ n ] [ n ] ; bool P [ n ] [ n ] ; int i , j , k , L ; for ( i = 0 ; i < n ; i ++ ) { P [ i ] [ i ] = true ; dp [ i ] [ i + 1 ] = 1 ; } for ( gap = 2 ; gap < n ; gap ++ ) { for ( i = 0 ; i < n - gap ; i ++ ) { if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] ; } } return dp [ 0 ] [ n - 1 ] ; }
void modularEquation ( int a , int b ) { if ( a < b ) cout << " No ▁ solution ▁ possible ▁ " << endl ; if ( a == b ) cout << " Infinite ▁ Solution ▁ possible ▁ " << endl ; return ; } int count = 0 ; for ( int i = 1 ; i <= y ; i ++ ) { if ( n % i == 0 ) { if ( n / i > b ) count ++ ; if ( i > b ) count ++ ; } } if ( y * y == n && y > b ) count -- ; cout << count ; }
int minimumSquare ( int a , int b ) { int result = 0 ; int rem = 0 ; if ( a < b ) a , b = b , a ; while ( b > 0 ) { result += ( a / b ) ; rem = ( a % b ) ; a = b ; b = rem ; } return result ; }
int maxSum ( int mat [ ] [ MAX ] , int n ) { if ( n == 1 ) return mat [ 0 ] [ 0 ] ; int dp [ n ] [ n ] ; int maxSum = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) dp [ 0 ] [ i ] = mat [ 0 ] [ i ] ; for ( int i = 1 ; i < n - 2 ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) { int maxi = INT_MIN ; if ( ( ( j - 1 ) >= 0 ) && ( maxi < dp [ i + 1 ] [ j - 1 ] ) ) maxi = dp [ i + 1 ] [ j - 1 ] ; if ( ( ( j + 1 ) < n ) maxi = dp [ i + 1 ] [ j + 1 ] ; dp [ i ] [ j ] = mat [ i ] [ j ] + maxi ; } } for ( int j = 0 ; j < n ; j ++ ) { if ( maxSum < dp [ 0 ] [ j ] ) maxSum = dp [ 0 ] [ j ] ; } } return maxSum ; }
int findMinSum ( int a [ ] , int b [ ] , int n ) { sort ( a , a + n ) ; sort ( b , b + n ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += abs ( a [ i ] - b [ i ] ) ; return sum ; }
void deleteElements ( int arr [ ] , int n , int k ) { vector < int > st ; int top = 0 ; int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { st . push ( arr [ 0 ] ) ; top ++ ; count ++ ; for ( int i = 1 ; i < n ; i ++ ) { while ( ! st . empty ( ) && count < k && st [ top ] < arr [ i ] ) { st . pop ( ) ; count ++ ; top -- ; } st . push ( arr [ i ] ) ; top ++ ; } } for ( int i = 0 ; i < len ( st ) ; i ++ ) cout << st [ i ] << " ▁ " ; }
string first ( string str ) { for ( int i = 0 ; i < str . length ( ) ; i ++ ) if ( str [ i ] . istitle ( ) ) return str [ i ] ; return 0 ; }
int minDist ( int arr [ ] , int n , int x , int y ) { int min_dist = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( ( x == arr [ i ] && y == arr [ j ] || y == arr [ i ] && x == arr [ j ] ) && min_dist > abs ( i - j ) ) min_dist = abs ( i - j ) ; } } return min_dist ; }
double arcLength ( double diameter , double angle ) { if ( angle >= 360 ) cout << " Angle ▁ cannot ▁ be ▁ formed " ; else arc = ( 3.142857142857143 * diameter ) * ( angle / 360.0 ) ; return arc ; }
void findSymPairs ( int arr [ ] [ MAX ] , int row ) { map < int , int > hM ; for ( int i = 0 ; i < row ; i ++ ) { int first = arr [ i ] [ 0 ] ; int sec = arr [ i ] [ 1 ] ; if ( sec in hM . keys ( ) && hM [ sec ] == first ) cout << " ( " << sec << " , " << first << " ) " ; else hM [ first ] = sec ; } }
bool isValidString ( string str ) { int freq [ CHARS ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) freq [ str [ i ] - ' a ' ] ++ ; int freq1 = 0 , count_freq1 = 0 , freq2 = 0 ; for ( int i = 0 ; i < CHARS ; i ++ ) { if ( freq [ i ] != 0 ) { freq1 = freq [ i ] ; count_freq1 = 1 ; break ; } freq2 = 0 ; for ( int j = i + 1 ; j < CHARS ; j ++ ) { if ( freq [ j ] == freq1 ) count_freq1 ++ ; else count_freq2 = 1 ; freq2 = freq [ j ] ; break ; } } if ( count_freq1 > 1 && count_freq2 > 1 ) return false ; } return true ; }
bool isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }
int findMaxAverage ( int arr [ ] , int n , int k ) { if ( k > n ) return - 1 ; int csum [ n ] ; csum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ; int max_sum = csum [ k - 1 ] ; int max_end = k - 1 ; for ( int i = 0 ; i < k ; i ++ ) { int curr_sum = csum [ i ] - csum [ i - k ] ; if ( curr_sum > max_sum ) { max_sum = curr_sum ; max_end = i ; } } return max_end - k + 1 ; }
void maximizecube ( int l , int b , int h ) { int side = gcd ( l , gcd ( b , h ) ) ; int num = ( l / side ) ; num = ( num * b / side ) ; num = ( num * h / side ) ; cout << side << num ; }
int horner ( int poly [ ] , int n , int x ) { int result = poly [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) result = result * x + poly [ i ] ; return result ; }
void rotate ( int arr [ ] , int n ) { int x = arr [ n - 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) arr [ i ] = arr [ i - 1 ] ; arr [ 0 ] = x ; }
void bonacciseries ( long n , int m ) { int a [ m ] = { 0 } ; a [ n - 1 ] = 1 , a [ n ] = 1 ; for ( int i = n ; i <= m ; i ++ ) a [ i ] = 2 * a [ i - 1 ] - a [ i - n - 1 ] ; for ( int i = 0 ; i < m ; i ++ ) cout << a [ i ] << " ▁ ▁ " ; }
int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) return 1 ; else return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ; }
int findoptimal ( int N ) { if ( N <= 6 ) return N ; int screen [ N ] ; for ( int n = 1 ; n <= 7 ; n ++ ) screen [ n - 1 ] = n ; for ( int n = 7 ; n <= N ; n ++ ) { screen [ n - 1 ] = n ; } for ( int n = N + 1 ; n <= N ; n ++ ) screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ; return screen [ N - 1 ] ; }
int maxRowDiff ( int mat [ ] [ MAX ] , int m , int n ) { int rowSum [ m ] ; for ( int i = 0 ; i < m ; i ++ ) sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) sum += mat [ i ] [ j ] ; rowSum [ i ] = sum ; int max_diff = rowSum [ 1 ] - rowSum [ 0 ] ; int min_element = rowSum [ 0 ] ; for ( int i = 1 ; i < m ; i ++ ) { if ( rowSum [ i ] - min_element > max_diff ) max_diff = rowSum [ i ] - min_element ; if ( rowSum [ i ] < min_element ) min_element = rowSum [ i ] ; } return max_diff ; }
int isPossible ( int n , int index , int modulo , int M , int arr [ ] , int dp [ ] [ MAX ] ) { if ( index == n ) return 1 ; if ( modulo == 0 ) return 0 ; if ( dp [ index ] [ modulo ] != - 1 ) return dp [ index ] [ modulo ] ; bool placeAdd = isPossible ( n , index + 1 , modulo + arr [ index ] , M , arr , dp ) ; bool placeMinus = isPossible ( n , index + 1 , modulo - arr [ index ] , M , arr , dp ) ; bool res = bool ( placeAdd || placeMinus ) ; dp [ index ] [ modulo ] = res ; return res ; }
int fib ( int n ) { if ( n < 6 ) return f [ n ] ; int t = 5 , fn = 5 ; while ( t < n ) { fn = round ( fn * PHI ) ; t ++ ; } return fn ; }
int minCost ( int cost [ ] [ C ] , int m , int n ) { int tc [ R ] [ C ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( int i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( int j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; } return tc [ m ] [ n ] ; }
void amendSentence ( string & str ) { strcpy ( str , str ) ; strcat ( str , str ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] >= ' A ' && str [ i ] <= ' Z ' ) { string [ i ] = ' ▁ ' << str [ i ] ; } else { cout << str [ i ] << " ▁ " ; } }
int countWays ( int arr [ ] , int m , int N ) { int count [ N + 1 ] ; count [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) count [ i ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ; } return count [ N ] ; }
int count_of_ways ( int n ) { int count = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) if ( i + j + k == n ) count ++ ; } } return count ; }
double sumOfSeries ( int n ) { return ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ; }
void findDivision ( char str [ ] , int a , int b ) { int len = strlen ( str ) ; int lr [ len ] ; lr [ 0 ] = str [ 0 ] ; lr [ 1 ] = str [ 1 ] ; for ( int i = 1 ; i < len ; i ++ ) lr [ i ] = ( lr [ i - 1 ] * 10 ) % a + \ int ( str [ i ] ) % a ; int rl [ lenn - 1 ] = str [ lenn - 1 ] ; int power10 = 10 ; for ( int i = 0 ; i < lenn - 2 ; i ++ ) { rl [ i ] = ( rl [ i + 1 ] + str [ i ] ) * power10 ; power10 = ( power10 * 10 ) % b ; } for ( int i = 0 ; i <= lenn - 1 ; i ++ ) { if ( lr [ i ] != 0 ) continue ; if ( rl [ i + 1 ] == 0 ) cout << " YES \n " ; for ( int k = 0 ; k < i ; k ++ ) cout << str [ k ] << " ▁ " ; for ( int i = 0 ; i <= len ; i ++ ) cout << " ▁ " ; } cout << " NO " ; }
int countCommon ( int mat [ ] [ MAX ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ; return res ; }
int hexagonalNum ( int n ) { return n * ( 2 * n - 1 ) ; }
int findGreatest ( int arr [ ] , int n ) { int result = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n - 1 ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = max ( result , arr [ i ] ) ; } } return result ; }
int squareRoot ( int n , int p ) { n = n % p ; for ( int x = 2 ; x < p ; x ++ ) { if ( ( x * x ) % p == n ) cout << " Square ▁ root ▁ is ▁ " << x ; return ; } cout << " Square ▁ root ▁ doesn't exist " ; }
int count ( int a [ ] , int b [ ] ) { int m = strlen ( a ) , n = strlen ( b ) ; int lookup [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) lookup [ 0 ] [ i ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) lookup [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( a [ i - 1 ] == b [ j - 1 ] ) lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] + lookup [ i - 1 ] [ j ] ; else lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ] ; } } return lookup [ m ] [ n ] ; }
int find_extra_element_index ( int arrA [ ] , int arrB [ ] ) { int extra_element = sum ( arrA ) - sum ( arrB ) ; return arrA . index ( extra_element ) ; }
int find ( int a [ ] , int b [ ] , int k , int n1 , int n2 ) { unordered_set < int > S ; for ( int i = 0 ; i < n2 ; i ++ ) S . insert ( b [ i ] ) ; int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( S . find ( a [ i ] ) == S . end ( ) ) missing ++ ; if ( missing == k ) return a [ i ] ; } return - 1 ; }
int sumNodes ( int l ) { int leafNodeCount = pow ( 2 , l - 1 ) ; int sumLastLevel = 0 ; sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ; int sum = sumLastLevel * l ; return sum ; }
int leonardo ( int n ) { int dp [ n + 1 ] ; dp . push ( 1 ) ; dp . push ( 1 ) ; for ( int i = 2 ; i <= n ; i ++ ) dp . push ( dp [ i - 1 ] + dp [ i - 2 ] + 1 ) ; return dp [ n ] ; }
int countNumber ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { vector < int > s ; if ( i <= n ) s . push ( i ) ; result ++ ; } while ( ! s . empty ( ) ) { int tp = s . top ( ) ; s . pop ( ) ; for ( int j = 0 ; j < 10 ; j ++ ) { int x = tp * 10 + j ; if ( x <= n ) s . push ( x ) ; result ++ ; } } return result ; }
bool check ( int degree [ ] , int n ) { int deg_sum = sum ( degree ) ; if ( 2 * ( n - 1 ) == deg_sum ) return true ; else return false ; }
unsigned long evenbinomialCoeffSum ( int n ) { return ( 1 << ( n - 1 ) ) ; }
int findMin ( int * arr , int low , int high ) { if ( high < low ) return arr [ 0 ] ; if ( high == low ) { printf ( " The ▁ required ▁ element ▁ is ▁ % d ▁ " , arr [ low ] ) ; return arr [ low ] ; } int mid = ( low + high ) / 2 ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ] ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return findMin ( arr , low , mid - 1 ) ; if ( arr [ high ] > arr [ mid ] ) return findMin ( arr , low , mid + 1 , high ) ; }
int findS ( int s ) { int _sum = 0 ; int n = 1 ; while ( _sum < s ) { _sum += n * n ; n ++ ; } if ( _sum == s ) return n ; return - 1 ; }
char getMaxOccuringChar ( string str ) { int count [ ASCII_SIZE ] ; int max = INT_MIN ; char c = ' ' ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) count [ i ] = 1 ; for ( int i = 0 ; i < ASCII_SIZE ; ++ i ) for ( int i = 0 ; i < str . length ( ) ; ++ i ) { if ( max < count [ i ] ) { max = count [ i ] ; c = i ; } } return c ; }
int countStr ( int n ) { return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ; }
void printSumSimple ( int mat [ ] [ MAX ] , int k , int n ) { if ( k > n ) return ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= n - k ; j ++ ) { int sum = 0 ; for ( int p = 0 ; p <= i ; p ++ ) for ( int q = 0 ; q <= j ; q ++ ) sum += mat [ p ] [ q ] ; cout << sum << " ▁ " ; } cout << endl ; } }
int findCount ( int n , int sum ) { int start = pow ( 10 , n - 1 ) ; int end = pow ( 10 , n ) - 1 ; int count = 0 ; for ( int i = start ; i <= end ; i ++ ) { int cur = 0 , temp = i ; while ( temp != 0 ) { cur += temp % 10 ; temp = temp / 10 ; if ( cur == sum ) count ++ ; i ++ ; } else { count ++ ; } } cout << count << endl ; }
int countGroups ( int position , int previous_sum , int length , int num [ ] ) { if ( position == length ) return 1 ; if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [ position ] [ previous_sum ] ; int res = 0 ; int sum = 0 ; for ( int i = position ; i < length ; i ++ ) { sum += ( num [ i ] - '0' ) ; if ( sum >= previous_sum ) res += countGroups ( i + 1 , sum , length , num ) ; } dp [ position ] [ previous_sum ] = res ; } return res ; }
int intersection ( int n ) { return n * ( n - 1 ) ; }
int findSum ( int n ) { n -- ; int sum = 0 ; sum += n * ( n + 1 ) * ( 2 * n + 1 ) ; sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; return sum ; }
int findRepeatingElement ( int * arr , int low , int high ) { if ( low > high ) return - 1 ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] != mid + 1 ) { if ( mid > 0 && arr [ mid ] == arr [ mid - 1 ] ) return mid ; return findRepeatingElement ( arr , low , mid - 1 ) ; } return findRepeatingElement ( arr , mid + 1 , high ) ; }
int smallest ( int x , int y , int z ) { int c = 0 ; while ( x && y && z ) { x = x - 1 ; y = y - 1 ; z = z - 1 ; c = c + 1 ; } return c ; }
int maxAverageOfPath ( int cost [ ] [ N ] ) { int dp [ N ] [ N + 1 ] ; dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( int i = 1 ; i <= N ; i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( int j = 1 ; j <= N ; j ++ ) dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( int i = 1 ; i <= N ; i ++ ) for ( int j = 1 ; j <= N ; j ++ ) dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( int i = 1 ; i <= N ; i ++ ) for ( int j = 1 ; j <= N ; j ++ ) dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 ) ; }
int countPairsWithDiffK ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr [ i ] == k ) count ++ ; } return count ; }
int longLenSub ( int arr [ ] , int n ) { int um [ n ] ; int longLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int len1 = 0 ; if ( arr [ i - 1 ] in um && len1 < um [ arr [ i ] - 1 ] ) len1 = um [ arr [ i ] - 1 ] ; if ( arr [ i ] + 1 in um && len1 < um [ arr [ i ] + 1 ] ) len1 = um [ arr [ i ] + 1 ] ; um [ arr [ i ] ] = len1 + 1 ; if ( longLen < um [ arr [ i ] ] ) { longLen = um [ arr [ i ] ] ; } } return longLen ; }
bool isPrime ( int n , int i = 2 ) { if ( n <= 2 ) return true if ( n == 2 ) else false ; if ( n % i == 0 ) return false ; if ( i * i > n ) return true ; return isPrime ( n , i + 1 ) ; }
int computeLastDigit ( int A , int B ) { int variable = 1 ; if ( A == B ) return 1 ; else if ( ( B - A ) >= 5 ) return 0 ; else { for ( int i = A + 1 ; i <= B ; i ++ ) variable = ( variable * ( i % 10 ) ) % 10 ; return variable % 10 ; } }
int minOperation ( int arr [ ] [ MAX ] ) { int ans = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { for ( int j = M - 1 ; j >= 0 ; j -- ) { if ( arr [ i ] [ j ] == 0 ) ans ++ ; for ( int k = 0 ; k <= i ; k ++ ) { for ( int h = 0 ; h <= j ; h ++ ) { if ( arr [ k ] [ h ] == 1 ) arr [ k ] [ h ] = 0 ; else arr [ k ] [ h ] = 1 ; } } } return ans ; }
int nextPowerOf2 ( int n ) { int p = 1 ; if ( n && ! ( n & ( n - 1 ) ) ) return n ; while ( p < n ) p <<= 1 ; return p ; }
int getMinDiff ( int arr [ ] , int n , int k ) { if ( n == 1 ) return 0 ; sort ( arr , arr + n ) ; int ans = arr [ n - 1 ] - arr [ 0 ] ; int small = arr [ 0 ] + k ; int big = arr [ n - 1 ] - k ; if ( small > big ) { small , big = big , small ; } for ( int i = 1 ; i <= n - 1 ; i ++ ) { int subtract = arr [ i ] - k ; int add = arr [ i ] + k ; if ( subtract >= small || add <= big ) continue ; if ( big - subtract <= add - small ) small = subtract ; else big = add ; } } return min ( ans , big - small ) ; }
int numberofways ( int n , int m ) { int dp [ n + 2 ] [ n + 2 ] ; dp [ 0 ] [ n + 1 ] = 1 ; for ( int k = n ; k <= m - 2 ; k -- ) dp [ 0 ] [ n + 1 ] = 1 ; for ( int i = n ; i <= m ; i ++ ) { dp [ i ] [ k ] = dp [ i ] [ k + 1 ] ; if ( i - k >= 0 ) dp [ i ] [ k ] = dp [ i ] [ k ] + dp [ i - k ] [ k ] ; } } return dp [ n ] [ m ] ; }
bool check ( int n ) { return 1162261467 % n == 0 ; }
int sequence ( int n ) { if ( n == 1 || n == 2 ) return 1 ; else return sequence ( n - 1 ) ) + sequence ( n - sequence ( n - 1 ) ) ; }
void generate_derangement ( int N ) { int S [ N + 1 ] ; int D [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) S [ i ] = i ; for ( int i = 1 ; i <= N ; i ++ ) D [ i ] = i ; for ( int i = 1 ; i <= N ; i ++ ) { if ( i == N ) D [ N ] = S [ N - 1 ] ; D [ N - 1 ] = S [ N ] ; } else { D [ i ] = i + 1 ; D [ i + 1 ] = i ; } } for ( int i = 1 ; i <= N ; i ++ ) cout << D [ i ] << " ▁ ▁ " ; cout << endl ; }
int countTriangle ( int g [ ] [ MAX ] , bool isDirected ) { int nodes = g . size ( ) ; int count_Triangle = 0 ; for ( int i = 0 ; i < nodes ; i ++ ) { for ( int j = 0 ; j < nodes ; j ++ ) { for ( int k = 0 ; k < nodes ; k ++ ) { if ( i != j && i != k && j != k && g [ i ] [ j ] && g [ j ] [ k ] && g [ k ] [ i ] ) count_Triangle ++ ; } } } return count_Triangle / 3 if ( isDirected ) count_Triangle / 6 ; }
int findHeight ( int parent [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = i ; int current = 1 ; while ( parent [ p ] != - 1 ) current ++ ; res = max ( res , current ) ; } return res ; }
int leonardo ( int n ) { if ( n == 0 || n == 1 ) return 1 ; return leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ; }
int findLargestPlus ( int mat [ N ] [ N ] ) { int left [ N ] [ N ] ; int right [ N ] ; int bottom [ N - 1 ] [ N ] ; int top [ N ] [ N ] ; int bottom [ N - 1 ] [ i ] ; int left [ N ] [ N ] ; int right [ N ] [ N - 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { top [ 0 ] [ i ] = mat [ 0 ] [ i ] ; bottom [ N - 1 ] [ i ] = mat [ N - 1 ] [ i ] ; left [ i ] [ 0 ] = mat [ i ] [ 0 ] ; right [ i ] [ N - 1 ] = mat [ i ] [ N - 1 ] ; } for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j < N ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) top [ i ] [ j ] = top [ i ] [ j - 1 ] + 1 ; else top [ i ] [ j ] = 0 ; } } int n = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = N - 1 ; j >= 0 ; j -- ) { if ( mat [ i ] [ j ] == 1 ) bottom [ j ] [ i ] = bottom [ j + 1 ] [ i ] + 1 ; else bottom [ i ] [ j ] = 0 ; } } } return n ; }
int HalfDiagonalSums ( int mat [ ] [ MAX ] , int n ) { int diag1_left = 0 , diag1_right = 0 , diag2_left = 0 , diag2_right = 0 ; int i = 0 , j = n - 1 ; while ( i < n ) { if ( i < n / 2 ) { diag1_left += mat [ i ] [ i ] ; diag2_left += mat [ j ] [ i ] ; } else if ( i > n / 2 ) { diag1_right += mat [ i ] [ i ] ; diag2_right += mat [ j ] [ i ] ; } i ++ ; j -- ; } return ( diag1_left == diag2_right && diag2_left == diag2_left && diag1_right == diag2_right && diag1_right == diag2_left && diag2_right == mat [ n / 2 ] [ n / 2 ] ) ; }
int sumAtKthLevel ( string tree , int k ) { int level = - 1 ; int sum = 0 ; int n = tree . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tree [ i ] == ' ( ' ) level ++ ; else if ( tree [ i ] == ' ) ' level -- ; else if ( level == k ) sum += ( tree [ i ] - ' 0' ) ; } return sum ; }
void LeibnizHarmonicTriangle ( int n ) { int C [ n ] [ n + 1 ] ; int i , j ; for ( i = 0 ; i <= n ; i ++ ) C [ i ] [ 0 ] = 1 ; for ( j = 0 ; j <= min ( i , n ) ; j ++ ) C [ 0 ] [ j ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) cout << " 1 / " << endl ; for ( j = 1 ; j <= i ; j ++ ) cout << i * C [ i - 1 ] [ j - 1 ] << " ▁ " ; cout << endl ; }
int countWays ( string s ) { int count [ 26 ] = { 0 } ; for ( int x = 0 ; x < s . length ( ) ; ++ x ) count [ x - ' a ' ] ++ ; count [ s [ 0 ] - ' a ' ] = 1 ; int ans = 1 ; for ( int i = 0 ; i < 26 ; ++ i ) if ( count [ i ] != 0 ) ans *= count [ i ] ; return ans ; }
int countWays ( int n , int m ) { int count [ n + 2 ] ; for ( int i = 0 ; i <= n ; i ++ ) count [ i + 1 ] = 0 ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ] ; else if ( i < m ) count [ i ] = 1 ; else count [ i ] = 2 ; } return count [ n ] ; }
void printCommonElements ( int mat [ M ] [ N ] ) { map < int , int > mp ; for ( int i = 1 ; i < M ; i ++ ) mp [ mat [ 0 ] [ i ] ] = 1 ; for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( mp [ mat [ i ] [ j ] ] == i ) mp [ mat [ i ] [ j ] ] = i + 1 ; if ( i == M - 1 ) cout << mat [ i ] [ j ] << " ▁ " ; } } }
int floorSearch ( int * arr , int low , int high , int x ) { if ( low > high ) return - 1 ; if ( x >= arr [ high ] ) return high ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( mid > 0 && arr [ mid - 1 ] <= x && x < arr [ mid ] ) return mid - 1 ; if ( x < arr [ mid ] ) return floorSearch ( arr , low , mid - 1 , x ) ; return floorSearch ( arr , low , mid + 1 , high , x ) ; }
int nextPowerOf2 ( int n ) { int p = 1 ; if ( n && ! ( n & ( n - 1 ) ) ) return n ; while ( p < n ) p <<= 1 ; return p ; }
void printkthnode ( int adj [ ] [ MAX ] , int wt , int n , int k ) { sort ( adj , adj + n ) ; for ( int i = 0 ; i < n ; i ++ ) adj [ i ] [ 0 ] = wt ; for ( int i = 0 ; i < n ; i ++ ) { if ( adj [ i ] [ len ( adj [ i ] ) - k ] [ 1 ] ) cout << adj [ i ] [ len ( adj [ i ] ) - k ] [ 1 ] << " ▁ " ; else cout << - 1 << " ▁ " ; } }
void longest ( int a [ ] , int n , int k ) { int freq [ n ] ; int start = 0 , end = 0 , now = 0 , l = 0 ; for ( int i = 0 ; i < n ; i ++ ) freq [ a [ i ] ] ++ ; if ( freq [ a [ i ] ] == 1 ) now ++ ; while ( now > k ) { freq [ a [ l ] ] -- ; if ( freq [ a [ l ] ] == 0 ) now -- ; l ++ ; } if ( i - l + 1 >= end - start + 1 ) end = i ; start = l ; } }
int minimumflip ( int mat [ ] [ MAX ] , int n ) { int flip = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ; } return flip ; }
int breakSum ( int n ) { if ( n == 0 || n == 1 ) return n ; return max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 ) + breakSum ( n / 4 ) ) ; }
int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) { int count = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) if ( arr1 [ i ] + arr2 [ j ] == x ) count ++ ; } return count ; }
void alternateSubarray ( bool arr [ ] , int n ) { int len [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) len . push_back ( 0 ) ; len [ n - 1 ] = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] ^ arr [ i + 1 ] == true ) len [ i ] = len [ i + 1 ] + 1 ; else len [ i ] = 1 ; } }
void subsequence ( char s [ ] , char t [ ] , int n , int k ) { int i , cnt = 0 ; int new_last = 0 , size = 0 ; string str = ' zyxwvutsrqponmlkjihgfedcba ' ; for ( ch = ' \0' ; ch < s . length ( ) ; ++ ch ) { cnt ++ ; for ( i = last ; i < n ; ++ i ) { if ( s [ i ] == ch ) ++ cnt ; if ( cnt >= k ) { for ( i = last ; i < n ; ++ i ) { if ( s [ i ] == ch ) ++ cnt ; } } last = new_last ; } }
int maxLen ( int arr [ ] ) { int max_len = 0 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int curr_sum = 0 ; for ( int j = i ; j < arr . size ( ) ; j ++ ) { curr_sum += arr [ j ] ; if ( curr_sum == 0 ) max_len = max ( max_len , j - i + 1 ) ; } } return max_len ; }
long findWays ( int m , int n , int x ) { long table [ n + 1 ] [ x + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) table [ i ] [ 0 ] = 1 ; for ( int j = 1 ; j <= x ; j ++ ) table [ 1 ] [ j ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= x ; j ++ ) { for ( int k = 1 ; k <= min ( m + 1 , j ) ; k ++ ) table [ i ] [ j ] += table [ i - 1 ] [ j - k ] ; } } return table [ - 1 ] [ - 1 ] ; }
bool checkCorrectOrNot ( string s ) { int count [ MAX_CHAR ] = { 0 } ; int n = s . length ( ) ; if ( n == 1 ) return true ; int i = 0 , j = n - 1 ; while ( i < j ) { count [ s [ i ] - ' a ' ] ++ ; count [ s [ j ] - ' a ' ] -- ; i ++ ; j -- ; } for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( count [ i ] != 0 ) return false ; } return true ; }
int findnumberofTriangles ( int arr [ ] ) { int n = arr . size ( ) ; sort ( arr , arr + n ) ; int count = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { int k = i + 2 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( k < n && arr [ i ] + arr [ j ] > arr [ k ] ) k ++ ; if ( k > j ) count += k - j - 1 ; } } return count ; }
int countWays ( int n ) { int A [ n + 1 ] ; int B [ n + 1 ] ; A [ 0 ] = 1 , A [ 1 ] = 0 ; B [ 0 ] = 0 , B [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ; B [ i ] = A [ i - 1 ] + B [ i - 2 ] ; } return A [ n ] ; }
int lcs ( int X [ ] , int Y [ ] , int m , int n ) { if ( m == 0 || n == 0 ) return 0 ; else if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y , m - 1 , n - 1 ) ; else if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y , m - 1 , n - 1 ) ; else return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y , m - 1 , n ) ) ; } }
int minValue ( int A [ ] , int B [ ] , int n ) { sort ( A , A + n ) ; sort ( B , B + n ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) result += ( A [ i ] * B [ n - i - 1 ] ) ; return result ; }
bool isOneFlip ( string str ) { int sum = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) sum += str [ i ] - ' 0' ; return ( sum == n - 1 || sum == 1 ) ; }
int MatrixChainOrder ( int p [ ] , int i , int j ) { if ( i == j ) return 0 ; int _min = INT_MAX ; for ( int k = 0 ; k < i ; k ++ ) { int count = ( MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] ) ; if ( count < _min ) _min = count ; } return _min ; }
int multiply ( int x , int y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return x + multiply ( x , y - 1 ) ; if ( y < 0 ) return - multiply ( x , - y ) ; }
int countP ( int n , int k ) { int dp [ k + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= k ; i ++ ) dp [ i ] [ 0 ] = 0 ; for ( int i = 0 ; i <= n ; i ++ ) dp [ 0 ] [ i ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) dp [ 0 ] [ k ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= k ; j ++ ) dp [ i ] [ j ] = 1 ; else dp [ i ] [ j ] = ( j * dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) ; } } return dp [ n ] [ k ] ; }
void worstFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) { int allocation [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int wstIdx = - 1 ; for ( int j = 0 ; j < m ; j ++ ) { if ( blockSize [ j ] >= processSize [ i ] ) { wstIdx = j ; } else if ( blockSize [ wstIdx ] < blockSize [ j ] ) { wstIdx = j ; } } if ( wstIdx != - 1 ) cout << " Process ▁ No . ▁ Process ▁ Size ▁ Block ▁ no . " << wstIdx << " ▁ " << processSize [ i ] << " ▁ ▁ ▁ " << blockSize [ wstIdx ] -= processSize [ i ] ; } cout << " Not ▁ Allocated " ; }
int maxvolume ( int s ) { int length = s / 3 ; s -= length ; int breadth = s / 2 ; int height = s - breadth ; return length * breadth * height ; }
int findLength ( string & str ) { int n = str . length ( ) ; int maxlen = 0 ; int sum [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) sum [ i ] [ i ] = str [ i ] ; for ( int length = 2 ; length <= n ; length ++ ) { for ( int i = 0 ; i < n - length + 1 ; i ++ ) { int j = i + length - 1 ; int k = length / 2 ; sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ] ; if ( length % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] ) ; if ( length % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] ) { maxlen = length ; } } } return maxlen ; }
int subArraySum ( int arr [ ] , int n , int sum ) { int curr_sum = arr [ 0 ] ; int start = 0 ; int i ; for ( i = 1 ; i <= n ; i ++ ) { while ( curr_sum > sum && start < i - 1 ) { curr_sum = curr_sum - arr [ start ] ; start ++ ; } if ( curr_sum == sum ) cout << " sum ▁ found ▁ between ▁ indexes " << endl ; if ( i < n ) curr_sum = curr_sum + arr [ i ] ; } cout << " No ▁ subarray ▁ found " ; return 0 ; }
void commonCharacters ( char str [ ] , int n ) { bool prim [ MAX_CHAR ] ; bool sec [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) prim [ i ] [ 0 ] = true ; for ( int j = 0 ; j < str [ i ] . length ( ) ; j ++ ) sec [ str [ i ] [ j ] - ' a ' ] = false ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( prim [ str [ i ] [ j ] - ' a ' ] ) { sec [ str [ i ] [ j ] - ' a ' ] = true ; } } for ( int i = 0 ; i < 26 ; i ++ ) cout << " % c ▁ % ( i + ' a ' ) << " \n " ; }
bool canMakeStr2 ( string s1 , string s2 ) { int count [ s1 . length ( ) ] ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) count [ s1 [ i ] ] ++ ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) if ( count [ s2 [ i ] ] == 0 ) return false ; count [ s2 [ i ] ] -- ; return true ; }
void generateSquare ( int n ) { int magicSquare [ n ] [ n ] ; int i = n / 2 ; int j = n - 1 ; int num = 1 ; while ( num <= ( n * n ) ) { if ( i == - 1 && j == n ) { i = 0 ; } else { if ( i < 0 ) { i = n - 1 ; continue ; } else { magicSquare [ int ( i ) ] [ int ( j ) ] = num ; num = num + 1 ; } } cout << " Magic ▁ Squre ▁ for ▁ n ▁ = " << n << " \n " ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cout << ' % 2d ▁ ' << magicSquare [ i ] [ j ] ) << ' ▁ ' ; if ( j == n - 1 ) cout << endl ; } }
int count ( int a [ ] , int b [ ] , int m , int n ) { if ( ( m == 0 && n == 0 ) || n == 0 ) return 1 ; if ( m == 0 ) return 0 ; if ( b [ n - 1 ] == a [ m - 1 ] ) return count ( a , b , m - 1 , n - 1 ) + count ( a , b , m - 1 , n ) ; else if ( a [ m - 1 ] == b [ n - 1 ] ) return count ( a , b , m - 1 , n - 1 ) + count ( a , b , m - 1 , n ) ; else return count ( a , b , m - 1 , n ) ; }
int numofArray ( int n , int m ) { int dp [ MAX ] [ MAX ] ; int di [ MAX ] ; int mu [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) di [ i ] . push_back ( i ) ; mu [ i ] . push_back ( i ) ; for ( int i = 1 ; i <= m ; i ++ ) for ( int j = 2 * i ; j <= m + 1 ; j ++ ) { dp [ 1 ] [ i ] = 1 ; for ( int i = 2 * i ; j <= i ; j ++ ) { di [ j ] . push ( i ) ; mu [ i ] . push ( j ) ; } di [ i ] . push_back ( i ) ; } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) ans += dp [ n ] [ i ] ; for ( int i = 1 ; i <= m ; i ++ ) { ans += dp [ m ] [ i ] ; di [ i ] . clear ( ) ; mu [ i ] . clear ( ) ; } return ans ; }
int countOnes ( int * arr , int low , int high ) { if ( high >= low ) { int mid = ( low + high ) / 2 ; if ( ( mid == high || arr [ mid + 1 ] == 0 ) && ( arr [ mid ] == 1 ) ) return mid + 1 ; if ( arr [ mid ] == 1 ) return countOnes ( arr , ( mid + 1 ) , high ) ; return countOnes ( arr , low , mid - 1 ) ; } return 0 ; }
int ceilSearch ( int * arr , int low , int high , int x ) { if ( x <= arr [ low ] ) return low ; if ( x > arr [ high ] ) return - 1 ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] == x ) return mid ; else if ( arr [ mid ] < x ) { if ( mid + 1 <= high && x <= arr [ mid + 1 ] ) return mid + 1 ; else return ceilSearch ( arr , mid + 1 , high , x ) ; } else { if ( mid - 1 >= low && x > arr [ mid - 1 ] ) return mid ; else return ceilSearch ( arr , low , mid - 1 , x ) ; } }
string decToBin ( int n ) { if ( n == 0 ) return "0" ; string bin = " " ; while ( n > 0 ) { if ( n & 1 == 0 ) bin = '0' + bin ; else bin = '1' + bin ; n = n >> 1 ; } return bin ; }
void printNos ( int n ) { if ( n > 0 ) cout << n << ' ▁ ' ; else cout << n << ' ▁ ' ; }
void prefixSum2D ( int a [ R ] [ C ] ) { int i , j ; int psa [ R ] [ C ] ; psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < C ; i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] ; for ( i = 0 ; i < R ; i ++ ) { psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ; } for ( i = 0 ; i < R ; i ++ ) { for ( j = 1 ; j < C ; j ++ ) psa [ i ] [ j ] = ( psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ) ; } } for ( i = 0 ; i < R ; i ++ ) { for ( j = 0 ; j < C ; j ++ ) cout << psa [ i ] [ j ] << " ▁ ▁ " ; cout << endl ; } }
int eulerian ( int n , int m ) { if ( m >= n || n == 0 ) return 0 ; if ( m >= n || n == 0 ) return 1 ; return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) * eulerian ( n - 1 , m ) ; }
int findSubarraySum ( int arr [ ] , int n ) { int res = 0 ; map < int , int > m ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = i ; j < n ; j ++ ) { sum += arr [ j ] ; m [ sum ] = 1 ; } } for ( int x = 0 ; x < m . size ( ) ; x ++ ) if ( m [ x ] == 1 ) res += x ; return res ; }
bool isMultipleOf3 ( int n ) { int odd_count = 0 , even_count = 0 ; if ( n < 0 ) n = - n ; if ( n == 0 ) return 1 ; if ( n == 1 ) return 0 ; while ( n ) { if ( n & 1 ) odd_count ++ ; if ( n & 2 ) even_count ++ ; n = n >> 2 ; } return isMultipleOf3 ( abs ( odd_count - even_count ) ) ; }
int longestSubsequenceCommonSegment ( int k , string s1 , string s2 ) { int n = strlen ( s1 ) , m = strlen ( s2 ) ; int lcs [ n + 1 ] [ m + 1 ] ; int cnt [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= m ; j ++ ) { lcs [ i ] [ j ] = max ( lcs [ i - 1 ] [ j ] , lcs [ i ] [ j - 1 ] ) ; if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) cnt [ i ] [ j ] = cnt [ i - 1 ] [ j - 1 ] + 1 ; if ( cnt [ i ] [ j ] >= k ) { for ( int a = 0 ; a <= cnt [ i ] [ j ] ; a ++ ) lcs [ i ] [ j ] = max ( lcs [ i ] [ j ] , lcs [ i - a ] [ j - a ] + a ) ; } } } return lcs [ n ] [ m ] ; }
int areaSquare ( int side ) { int area = side * side ; return area ; }
void findpath ( vector < int > graph [ ] ) { int n = graph . size ( ) ; int numofadj [ n ] ; int startpoint , numofodd ; for ( int i = 0 ; i < n ; i ++ ) numofadj [ i ] = sum ( graph [ i ] ) ; startpoint = 0 ; numofodd = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( numofadj [ i ] % 2 == 1 ) numofodd ++ ; startpoint = i ; } while ( stack != [ ] || sum ( graph [ cur ] ) == 0 ) { path . push ( cur + 1 ) ; cur = stack . pop ( - 1 ) ; } else { for ( int i = 0 ; i < n ; i ++ ) { if ( graph [ cur ] [ i ] == 1 ) stack . push ( cur ) ; graph [ cur ] [ i ] = 0 ; graph [ i ] [ cur ] = 0 ; cur = i ; break ; } } } cout << " No ▁ Solution " << endl ; }
int lcsOf3 ( int i , int j , int k ) { if ( i == - 1 || j == - 1 || k == - 1 ) return 0 ; if ( dp [ i ] [ j ] [ k ] != - 1 ) return dp [ i ] [ j ] [ k ] ; if ( X [ i ] == Y [ j ] && Y [ j ] == Z [ k ] ) dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1 , k - 1 ) ; else if ( X [ i ] == Y [ j ] && Y [ j ] == Z [ k ] ) dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1 , k - 1 ) ; return dp [ i ] [ j ] [ k ] ; }
void findLarger ( int arr [ ] , int n ) { int x [ n / 2 ] ; sort ( x , x + n ) ; for ( int i = 0 ; i < n / 2 ; i ++ ) cout << x [ i ] ; }
int spiralDiaSum ( int n ) { if ( n == 1 ) return 1 ; return 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ; }
int countOccurrences ( int arr [ ] , int n , int x ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( x == arr [ i ] ) res ++ ; return res ; }
int sumBetweenTwoKth ( int arr [ ] , int n , int k1 , int k2 ) { sort ( arr , arr + n ) ; int result = 0 ; for ( int i = k1 ; i <= k2 - 1 ; i ++ ) result += arr [ i ] ; return result ; }
int calculate ( int a [ ] ) { int maximum = max ( a ) ; int frequency [ maximum + 1 ] ; for ( int i = 0 ; i <= maximum ; i ++ ) frequency [ i ] ++ ; int answer = 0 ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) answer += i * ( i - 1 ) / 2 ; return answer ; }
int doublefactorial ( int n ) { int res = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( i == 0 || i == 1 ) return res ; else res *= i ; } }
int lcs ( int X [ ] , int Y [ ] , int m , int n ) { if ( m == 0 || n == 0 ) return 0 ; else if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y , m - 1 , n - 1 ) ; else if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y , m - 1 , n - 1 ) ; else return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y , m - 1 , n ) ) ; } }
int maxProductSubset ( int a [ ] , int n ) { if ( n == 1 ) return a [ 0 ] ; int max_neg = INT_MIN ; int count_neg = 0 ; int count_zero = 0 ; int prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) count_zero ++ ; continue ; if ( a [ i ] < 0 ) count_neg ++ ; max_neg = max ( max_neg , a [ i ] ) ; prod = prod * a [ i ] ; } if ( count_neg & 1 ) if ( count_neg == 1 && count_zero > 0 && count_zero + count_neg == n ) return 0 ; prod = prod / max_neg ; return prod ; }
int offeringNumber ( int n , int templeHeight [ ] ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int left = 0 , right = 0 ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( templeHeight [ j ] < templeHeight [ j + 1 ] ) left ++ ; else right ++ ; } for ( int j = i + 1 ; j < n ; j ++ ) { if ( templeHeight [ j ] < templeHeight [ j - 1 ] ) right ++ ; else break ; } sum += max ( right , left ) + 1 ; } return sum ; }
int sumNodes ( int l ) { int leafNodeCount = pow ( 2 , l - 1 ) ; int vec [ l ] [ leafNodeCount + 1 ] ; for ( int i = 1 ; i <= leafNodeCount ; i ++ ) vec [ i - 1 ] . push_back ( i ) ; for ( int i = 1 ; i <= l ; i ++ ) { vec [ l - 1 ] . push_back ( i ) ; } for ( int i = l - 2 ; i >= 0 ; i -- ) { int k ; for ( k = 0 ; k < ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] ) ; k ++ ; } int sum = 0 ; for ( int i = 0 ; i < l ; i ++ ) sum += vec [ i ] [ j ] ; return sum ; }
string constructPalin ( string str , int l ) { vector < char > str ; int i = - 1 , j = l ; while ( i < j ) { if ( str [ i ] == str [ j ] && str [ i ] != ' * ' ) continue ; if ( str [ i ] == str [ j ] && str [ i ] == ' * ' ) { string [ i ] = ' a ' ; string [ j ] = ' a ' ; continue ; } else if ( str [ i ] == str [ j ] && str [ i ] == ' * ' ) { string [ i ] = ' a ' ; string [ j ] = ' a ' ; continue ; } else if ( str [ i ] == ' * ' ) string [ i ] = string [ j ] ; continue ; } return str ; }
int countPairs ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ; } return ans ; }
int russianPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( b & 1 ) res += a ; a = a << 1 ; b = b >> 1 ; } return res ; }
string encrypt ( string text , int s ) { string result = " " ; for ( int i = 0 ; i < text . length ( ) ; i ++ ) { char = text [ i ] ; if ( char . isupper ( ) ) result += ( char ) + s - 65 ; else result += ( char ) + s - 97 ; } return result ; }
int distance ( double lat1 , double lat2 , double lon1 , double lon2 ) { lon1 = radians ( lon1 ) ; lon2 = radians ( lon2 ) ; lat1 = radians ( lat1 ) ; lat2 = radians ( lat2 ) ; dlon = lon2 - lon1 ; dlat = lat2 - lat1 ; a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( lat2 ) * sin ( dlon / 2 ) ** 2 ; c = 2 * asin ( sqrt ( a ) ) ; r = 6371 ; return ( c * r ) ; }
int evenFib ( int n ) { if ( n < 1 ) return n ; if ( n == 1 ) return 2 ; return ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ; }
int gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; int k = 0 ; while ( ( ( a | b ) & 1 ) == 0 ) { a = a >> 1 ; b = b >> 1 ; k = k + 1 ; } while ( ( a & 1 ) == 0 ) { a = a >> 1 ; b = b >> 1 ; k = k + 1 ; } while ( ( b & 1 ) == 0 ) { b = b >> 1 ; } if ( a > b ) { temp = a ; a = b ; b = temp ; } b = ( b - a ) ; } return ( a << k ) ; }
bool isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; while ( n != 1 ) { if ( n % 2 != 0 ) return false ; n = n / 2 ; } return true ; }
int findSum ( int n ) { int sm = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) sm = sm + i * j ; return sm ; }
unsigned int binomialCoeffSum ( int n ) { return 1 << n ; }
int calculateSum ( int arr [ ] , int n ) { if ( n == 0 ) return 0 ; int s = arr [ 0 ] ; int value = int ( s ) ; int sum = value ; for ( int i = 2 ; i < n ; i += 2 ) { s = arr [ i ] ; value = int ( s ) ; operation = arr [ i - 1 ] [ 0 ] ; if ( operation == ' + ' ) sum += value ; else sum -= value ; } return sum ; }
void checkPoint ( int radius , int x , int y , int percent , int startAngle ) { int endAngle = 360 / percent + startAngle ; double polarradius = ( x * x + y * y ) ; double Angle = ( x / y ) ; if ( Angle >= startAngle && Angle <= endAngle && polarradius < radius ) cout << " Point ▁ ( " , x , " , " , y , " ) ▁ " " does ▁ not exist ▁ in ▁ the ▁ circle ▁ sector " ; else { cout << " Point ▁ ( " , x , " , " , y , " ) ▁ " " does ▁ not ▁ exist ▁ in ▁ the ▁ circle ▁ sector " << " . " ; } }
int printknapSack ( int W , int wt , int val [ ] , int n ) { int K [ n ] [ W ] ; for ( int i = 0 ; i <= n ; i ++ ) K [ i ] [ 0 ] = 0 ; for ( int i = 0 ; i <= W ; i ++ ) { for ( int w = 0 ; w <= n ; w ++ ) { if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } int res = K [ n ] [ W ] ; for ( int i = 0 ; i <= n ; i ++ ) { if ( res <= 0 ) break ; if ( res == K [ i - 1 ] [ w ] ) break ; if ( res == K [ i - 1 ] [ w ] ) continue ; else { cout << wt [ i - 1 ] ) ; res = res - val [ i - 1 ] ; w = w - wt [ i - 1 ] ; } } }
int getTotalNumberOfSequences ( int m , int n ) { int T [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) T [ i ] [ 0 ] = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) T [ i ] [ j ] = 0 ; else if ( i < j ) T [ i ] [ j ] = 0 ; else if ( j == 1 ) T [ i ] [ j ] = i ; else T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i / 2 ] [ j - 1 ] ; } } return T [ m ] [ n ] ; }
int findSum ( int n ) { int arr [ n ] [ n ] ; memset ( arr , 0 , sizeof arr ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) arr [ i ] [ j ] = abs ( i - j ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) sum += arr [ i ] [ j ] ; return sum ; }
string replace ( string s , char c1 , char c2 ) { int l = s . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( s [ i ] == c1 ) s = s [ 0 : i ] + c2 + s [ i + 1 ] ; else if ( s [ i ] == c2 ) s = s [ 0 : i ] + c1 + s [ i + 1 ] ; } return s ; }
int discreteLogarithm ( int a , int b , int m ) { int n = sqrt ( m ) + 1 ; int an = 1 ; for ( int i = 0 ; i < n ; i ++ ) an = ( an * a ) % m ; int value [ n + 1 ] ; int cur = an ; for ( int i = 1 ; i <= n ; i ++ ) value [ i ] = 0 ; cur = an ; for ( int i = 1 ; i <= n ; i ++ ) { if ( value [ cur ] == 0 ) value [ cur ] = i ; cur = ( cur * an ) % m ; } cur = b ; for ( int i = 0 ; i <= n ; i ++ ) { if ( value [ cur ] > 0 ) { int ans = value [ cur ] * n - i ; if ( ans < m ) return ans ; } cur = ( cur * a ) % m ; } return - 1 ; }
int maxPrimeFactors ( int n ) { int maxPrime = - 1 ; while ( n % 2 == 0 ) maxPrime = 2 ; n >>= 1 ; for ( int i = 3 ; i <= 2 ; i ++ ) { while ( n % i == 0 ) maxPrime = i ; n = n / i ; } if ( n > 2 ) maxPrime = n ; } return int ( maxPrime ) ; }
bool isPossibleTriangle ( int arr [ ] , int N ) { if ( N < 3 ) return false ; sort ( arr , arr + N ) ; for ( int i = 0 ; i < N - 2 ; i ++ ) { if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true ; } }
int numOfIncSubseqOfSizeK ( int arr [ ] , int n , int k ) { int dp [ k ] [ n ] ; for ( int i = 0 ; i < k ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int l = 1 ; l < k ; l ++ ) { for ( int i = 0 ; i < n ; i ++ ) dp [ 1 ] [ i ] = 1 ; for ( int i = 0 ; i < l ; i ++ ) { for ( int j = l - 1 ; j < i ; j ++ ) if ( arr [ j ] < arr [ i ] ) dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ; } } int sum = 0 ; for ( int i = 0 ; i < k - 1 ; i ++ ) sum += dp [ k - 1 ] [ i ] ; return sum ; }
int solve ( int X [ ] , int Y [ ] , int l , int r , int k , int dp [ ] [ R ] [ K ] ) { if ( k == 0 ) return 0 ; if ( l < 0 || r < 0 ) return 1000000000 ; if ( dp [ l ] [ r ] [ k ] != - 1 ) return dp [ l ] [ r ] [ k ] ; int cost = ( ( X [ l ] - ' a ' ) ^ ( Y [ r ] - ' a ' ) ) ^ ( X [ l ] - ' a ' ) ; dp [ l ] [ r ] [ k ] = min ( [ cost + solve ( X , Y , l - 1 , r - 1 , k - 1 , dp ) , solve ( X , Y , l - 1 , r , k , dp ) ] ) ; return dp [ l ] [ r ] [ k ] ; }
int remainderWith7 ( int num ) { int series [ 6 ] ; int series_index = 0 ; int result = 0 ; for ( int i = 0 ; i < ( num . length ( ) - 1 ) ; i ++ ) { digit = num [ i ] - 48 ; result += digit * series [ series_index ] ; series_index = ( series_index + 1 ) % 6 ; result %= 7 ; } if ( result < 0 ) result = ( result + 7 ) % 7 ; return result ; }
bool isSubSequence ( string string1 , string string2 , int m , int n ) { if ( m == 0 ) return true ; if ( n == 0 ) return false ; if ( string1 [ m - 1 ] == string2 [ n - 1 ] ) return isSubSequence ( string1 , string2 , m - 1 , n - 1 ) ; return isSubSequence ( string1 , string2 , m , n - 1 ) ; }
int getRemainder ( int num , int divisor ) { return ( num - divisor * ( num / divisor ) ) ; }
int minProductSubset ( int a [ ] , int n ) { if ( n == 1 ) return a [ 0 ] ; int max_neg = float ( ' - inf ' ) ; int min_pos = float ( ' inf ' ) ; int prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) count_zero ++ ; continue ; if ( a [ i ] < 0 ) count_neg ++ ; max_neg = max ( max_neg , a [ i ] ) ; if ( a [ i ] > 0 ) min_pos = min ( min_pos , a [ i ] ) ; prod = prod * a [ i ] ; } if ( count_zero == n || ( count_neg == 0 && count_zero > 0 ) ) return 0 ; if ( count_neg == 0 ) return min_pos ; if ( count_neg & 1 ) return min_pos ; if ( count_neg & 1 ) == 0 && count_neg != 0 ) prod = int ( prod / max_neg ) ; return prod ; }
int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + n % 10 ; n = n / 10 ; } return sum ; }
int findDigits ( int n ) { if ( n < 0 ) return 0 ; if ( n <= 1 ) return 1 ; int digits = 0 ; for ( int i = 2 ; i <= n ; i ++ ) digits += log10 ( i ) ; return ceil ( digits ) + 1 ; }
void mergeTwoHalf ( int A [ ] , int n ) { sort ( A , A + n ) ; }
void fill0X ( int m , int n ) { int i , k = 0 , l = 0 , r = m , c = n ; int a [ m ] [ n ] ; char x = ' X ' ; while ( k < m && l < n ) { for ( i = l ; i < n ; ++ i ) { a [ k ] [ i ] = x ; } k ++ ; for ( i = k ; i < m ; ++ i ) { a [ i ] [ n - 1 ] = x ; } n -- ; if ( k < m ) { for ( i = n - 1 ; i >= l ; -- i ) { a [ m - 1 ] [ i ] = x ; } m -- ; } if ( l < n ) { for ( i = m - 1 ; i >= k ; -- i ) { a [ i ] [ l ] = x ; } l ++ ; } x = ' X ' if ( x == '0' ) cout << a [ i ] [ j ] << " ▁ " ; } cout << endl ; }
int minPerimeter ( int n ) { int l = sqrt ( n ) ; int sq = l * l ; if ( sq == n ) return l * 4 ; else { int row = n / l ; int perimeter = 2 * ( l + row ) ; if ( n % l != 0 ) perimeter += 2 ; return perimeter ; } }
void possibleOrNot ( double a1 , double a2 , double b1 , double b2 , char c1 , char c2 ) { int dis1 = ( pow ( b1 - a1 , 2 ) + pow ( b2 - a2 , 2 ) ) ; int dis2 = ( pow ( c1 - b1 , 2 ) + pow ( c2 - b2 , 2 ) ) ; if ( dis1 != dis2 ) cout << " No \n " ; else if ( b1 == ( ( a1 + c1 ) / 2.0 ) && b2 == ( ( a2 + c2 ) / 2.0 ) ) cout << " Yes " ; else cout << " No " ; }
float slope ( int x1 , int y1 , int x2 , int y2 ) { return ( float ) ( y2 - y1 ) / ( x2 - x1 ) ; }
int CountSquares ( int a , int b ) { return ( ceil ( math . sqrt ( b ) ) - ceil ( math . sqrt ( a ) ) + 1 ) ; }
int countStrings ( int n , int k ) { int dp [ k + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 , dp [ 0 ] [ 1 ] = 1 ; for ( int i = 2 ; i <= k ; i ++ ) dp [ 1 ] [ 0 ] [ 0 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int j = 2 ; j <= k ; j ++ ) dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 1 ] ; if ( j >= 1 ) dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ] ; } return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ; }
void findSmallestRange ( int arr [ ] [ MAX ] , int n , int k ) { int i , minval , maxval , minrange , minel , maxel ; int minind ; for ( i = 0 ; i <= k ; i ++ ) { ptr [ i ] = 0 ; minrange = 10 ** 9 ; while ( 1 ) { minind = - 1 ; minval = 10 ** 9 ; maxval = - 10 ** 9 ; flag = 0 ; for ( i = 0 ; i < k ; i ++ ) { if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) minval = arr [ i ] [ ptr [ i ] ] ; if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) { minind = i ; maxval = arr [ i ] [ ptr [ i ] ] ; } } if ( flag ) break ; if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minrange ) { minel = minval ; maxel = maxval ; minrange = maxel - minel ; } } cout << " The ▁ smallest ▁ range ▁ is ▁ [ ▁ " << minel << maxel << " ] " ; }
string lexicographicSubConcat ( string s ) { int n = s . length ( ) ; int sub_count = ( n * ( n + 1 ) ) / 2 ; int arr [ sub_count ] ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j <= n - i + 1 ; j ++ ) arr [ index ] = s [ i : i + j ] ; index ++ ; } sort ( arr , arr + sub_count ) ; for ( int i = 0 ; i < sub_count ; i ++ ) res += arr [ i ] ; return res ; }
void maxelement ( int arr [ ] [ MAX ] ) { int no_of_rows = arr . size ( ) ; int no_of_column = arr [ 0 ] . size ( ) ; for ( int i = 0 ; i < no_of_rows ; i ++ ) { int max1 = 0 ; for ( int j = 0 ; j < no_of_column ; j ++ ) { if ( arr [ i ] [ j ] > max1 ) max1 = arr [ i ] [ j ] ; } cout << max1 << endl ; } }
int countNegative ( int M [ ] [ MAX ] , int n , int m ) { int count = 0 ; int i = 0 , j = m - 1 ; while ( j >= 0 && i < n ) { if ( M [ i ] [ j ] < 0 ) count += ( j + 1 ) ; i ++ ; } return count ; }
int findpos ( string n ) { int i = 0 , j = n . length ( ) ; int pos = 0 ; for ( i = 0 ; i < j ; i ++ ) { if ( n [ i ] == '4' ) pos = pos * 2 + 1 ; if ( n [ i ] == '7' ) pos = pos * 2 + 2 ; } return pos ; }
int yMod ( int y , int x ) { return ( y % pow ( 2 , x ) ) ; }
int maxSumIS ( int arr [ ] , int n ) { int max = 0 ; int msis [ n ] ; for ( int i = 0 ; i < n ; i ++ ) msis [ i ] = arr [ i ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] + arr [ i ] ) msis [ i ] = msis [ j ] + arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) max = msis [ i ] ; } return max ; }
int maxLength ( string s , int n ) { int invalidOpenBraces = 0 , invalidCloseBraces = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' ( ' ) invalidOpenBraces ++ ; else if ( invalidOpenBraces == 0 ) invalidCloseBraces ++ ; else if ( invalidOpenBraces == 0 ) invalidOpenBraces -- ; else invalidOpenBraces -- ; } return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) ; }
int lis ( int arr [ ] , int n ) { int mpis [ n ] ; for ( int i = 0 ; i < n ; i ++ ) mpis [ i ] = arr [ i ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && mpis [ i ] < ( mpis [ j ] * arr [ i ] ) ) mpis [ i ] = mpis [ j ] * arr [ i ] ; } } return max ( mpis ) ; }
bool findthepath ( char * S , char v ) { int result [ MAX ] ; result [ 0 ] = v ; for ( int i = 1 ; i < S . length ( ) ; i ++ ) { if ( adj [ v ] [ S [ i ] - ' A ' ] || adj [ S [ i ] - ' A ' ] [ v ] ) { v = ( S [ i ] ) - ' A ' ; } else if ( adj [ v ] [ S [ i ] - ' A ' ] || adj [ S [ i ] - ' A ' ] [ v ] ) { v = ( S [ i ] ) - ' A ' ) + 5 ] || adj [ S [ i ] - ' A ' ] + 5 ] [ v ] ) { v = ( S [ i ] ) - ' A ' + 5 ; } else { return false ; } } return true ; }
bool checkSorted ( int n , queue < int > & q ) { int st [ MAX ] ; int expected = 1 ; int fnt = None ; while ( ! q . empty ( ) ) { fnt = q . front ( ) ; q . pop ( ) ; if ( fnt == expected ) { expected ++ ; } else { if ( st . empty ( ) ) { st . push ( fnt ) ; } else { if ( st . size ( ) != 0 && st [ - 1 ] < fnt ) return false ; else { st . push ( fnt ) ; } } } if ( expected - 1 == n && st . empty ( ) ) return true ; return false ; }
void generate ( vector < char > & st , char s [ ] ) { if ( s . length ( ) == 0 ) return ; if ( st . find ( s ) != - 1 ) return ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { string t = list ( s ) . copy ( ) ; t . remove ( s [ i ] ) ; generate ( st , t ) ; } }
void tower ( int n , int sourcePole , int destinationPole , int auxiliaryPole ) { if ( 0 == n ) return ; tower ( n - 1 , sourcePole , auxiliaryPole , destinationPole ) ; cout << " Move ▁ the ▁ disk " << sourcePole << " to ▁ " << destinationPole << " endl ; }
int findMaximumPieces ( int n ) { return 1 + n * ( n + 1 ) / 2 ; }
int minLexRotation ( string str ) { int n = strlen ( str ) ; int arr [ n ] ; string concat = str + str ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = concat [ i : n + i ] ; sort ( arr , arr + n ) ; return arr [ 0 ] ; }
int findMinInsertions ( char * str , int l , int h ) { if ( l > h ) return INT_MAX ; if ( l == h ) return 0 ; if ( l == h - 1 ) return 1 ; if ( str [ l ] == str [ h ] ) return findMinInsertions ( str , l + 1 , h - 1 ) ; else if ( str [ l ] == str [ h ] ) return findMinInsertions ( str , l + 1 , h - 1 ) ; else return min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 ; }
int octalToDecimal ( int n ) { int num = n ; int dec_value = 0 ; int base = 1 ; int temp ; num = num ; while ( temp ) { int last_digit = temp % 10 ; temp = temp / 10 ; dec_value += last_digit * base ; base = base * 8 ; } return dec_value ; }
int getMissingNo ( int A [ ] ) { int n = A . size ( ) ; int total = ( n + 1 ) * ( n + 2 ) / 2 ; int sum_of_A = sum ( A ) ; return total - sum_of_A ; }
void printSquares ( int n ) { int square = 0 , prev_x = 0 ; for ( int x = 0 ; x < n ; x ++ ) { square = ( square + x + prev_x ) ; cout << square << " ▁ " ; prev_x = x ; } }
bool isPossible ( int a [ ] , int b [ ] , int n , int k ) { sort ( a , a + n ) ; sort ( b , b + n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] + b [ i ] < k ) return false ; } return true ; }
void fitOrNotFit ( int R , int r , int x , int y , int rad ) { double val = ( pow ( x , 2 ) + pow ( y , 2 ) ) / ( pow ( R , 2 ) + pow ( x , 2 ) ) ; if ( val + rad <= R && val - rad >= R - r ) cout << " Fits \n " ; else cout << " Doesn't ' t ▁ Fit " ; }
int findPosition ( int k , int n ) { int f1 = 0 , f2 = 1 ; int i ; for ( i = 2 ; i != 0 ; i ++ ) { int f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) return n * i ; } return 0 ; }
void sequence ( int n ) { int f [ n + 1 ] ; cout << f [ 0 ] << " ▁ " << f [ 1 ] << " ▁ " << f [ 2 ] << " ▁ " << endl ; for ( int i = 3 ; i <= n ; i ++ ) { f . push ( f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ) ; cout << f [ i ] << " ▁ " ; } }
int countManipulations ( string s1 , string s2 ) { int count = 0 ; int char_count [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) char_count [ i ] = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { char_count [ s1 [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { char_count [ s2 [ i ] - ' a ' ] -- ; if ( char_count [ s2 [ i ] - ' a ' ] < 0 ) count ++ ; } return count ; }
int count ( int n ) { int table [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) table [ i ] += table [ i - 1 ] ; for ( int i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( int i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( int i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; }
int maxSubsequenceSubstring ( int x [ ] , int y [ ] , int n , int m ) { int dp [ MAX ] [ MAX + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i <= m ; i ++ ) dp [ i ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i ; j <= m ; j ++ ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) ans = max ( ans , dp [ i ] [ n ] ) ; return ans ; }
int findLongestRepeatingSubSeq ( char str [ ] ) { int n = strlen ( str ) ; int dp [ n ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) dp [ 0 ] [ i + 1 ] = str [ i ] ; for ( int j = 1 ; j <= n ; j ++ ) dp [ 0 ] [ j ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n ] [ n ] ; }
bool isCornerPresent ( string str , string corner ) { int n = str . length ( ) ; int cl = corner . length ( ) ; if ( n < cl ) return false ; return ( str [ : cl ] == corner ) && ( str [ n - cl : ] == corner ) ; }
int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) { int i = 0 , j = 0 ; int m1 = - 1 , m2 = - 1 ; int count = 0 ; while ( count < n + 1 ) { if ( i == n ) { m1 = m2 ; m2 = ar2 [ 0 ] ; break ; } else if ( j == n ) { m1 = m2 ; m2 = ar1 [ 0 ] ; break ; } else { m1 = m2 ; m2 = ar2 [ j ] ; j ++ ; } } return ( m1 + m2 ) / 2 ; }
int countZeroes ( int mat [ ROW ] [ COL ] ) { int N = mat [ N ] . size ( ) ; int row = N - 1 ; int col = 0 ; int count = 0 ; while ( col < N ) { while ( mat [ row ] [ col ] ) { if ( row < 0 ) return count ; row -- ; } count = count + ( row + 1 ) ; col ++ ; } return count ; }
int jumpSearch ( int arr [ ] , int x , int n ) { int step = sqrt ( n ) ; int prev ; for ( prev = 0 ; prev < n ; prev ++ ) { if ( arr [ int ( prev ) ] < x ) { prev ++ ; if ( prev == min ( step , n ) ) return - 1 ; } if ( arr [ int ( prev ) ] == x ) return prev ; } return - 1 ; }
int solution ( int a , int b , int n ) { int i ; for ( i = 0 ; i * a <= n ; i ++ ) { if ( ( n - ( i * a ) ) % b == 0 ) cout << " x ▁ = ▁ " << i << " , ▁ y ▁ = ▁ " << int ( ( n - ( i * a ) ) / b ; return 0 ; }
string longDivision ( string number , int divisor ) { string ans = " " ; int idx = 0 ; int temp = number [ idx ] - '0' ; while ( temp < divisor ) { temp = ( temp * 10 + number [ idx + 1 ] ) - '0' ; idx ++ ; } while ( ( number . length ( ) ) > idx ) { ans += ( temp / divisor ) + '0' ; temp = ( temp % divisor ) * 10 + ( number [ idx ] ) - '0' ; idx ++ ; } ans += ( math . floor ( temp / divisor ) + '0' ) ; if ( len ( ans ) == 0 ) return "0" ; } return ans ; }
void sort012 ( int a [ ] , int arr_size ) { int lo = 0 , hi = arr_size - 1 ; int mid = 0 ; while ( mid <= hi ) { if ( a [ mid ] == 0 ) { a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ] ; lo = lo + 1 ; mid = mid + 1 ; } else if ( a [ mid ] == 1 ) { mid ++ ; } else { a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ] ; hi = hi - 1 ; } } }
bool canRepresentBST ( int pre [ ] ) { stack < int > s ; int root = INT_MIN ; for ( int value = 0 ; value < root ; value ++ ) { if ( value < root ) return false ; } while ( ! s . empty ( ) && s [ - 1 ] < value ) { root = s . pop ( ) ; s . push ( value ) ; } return true ; }
int find ( int arr [ ] [ MAX ] ) { int n = arr . size ( ) ; int j ; int res ; for ( int i = 0 , j = n - 1 ; i < n ; i ++ , j -- ) { if ( arr [ i ] [ j ] == 0 ) { while ( j >= 0 && arr [ i ] [ j ] == 0 || i == j ) j -- ; if ( j == - 1 ) res = i ; break ; } else { while ( i < n && arr [ i ] [ j ] == 1 || i == j ) { i ++ ; } if ( i == n ) res = j ; break ; } } if ( res == - 1 ) return res ; for ( int i = 0 ; i < n ; i ++ ) { if ( res != i && arr [ i ] [ res ] != 1 ) return - 1 ; } return res ; }
void printArray ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << i << " ▁ " ; cout << endl ; }
void sortSquares ( int arr [ ] , int n ) { int K ; for ( K = 0 ; K < n ; K ++ ) { if ( arr [ K ] >= 0 ) break ; int i = K - 1 , j = K ; int temp [ n ] ; for ( i = 0 ; i >= 0 && j < n ; i ++ ) { if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) temp [ ind ] = arr [ i ] * arr [ i ] ; else temp [ ind ] = arr [ j ] * arr [ j ] ; j ++ ; } ind ++ ; } while ( i >= 0 ) { temp [ ind ] = arr [ i ] * arr [ i ] ; i -- ; ind ++ ; } for ( int i = 0 ; i < n ; i ++ ) { temp [ i ] = arr [ i ] * arr [ i ] ; j ++ ; ind ++ ; } }
int find_maximum ( int a [ ] , int n , int k ) { map < int , int > b ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; int d = min ( 1 + i , n - i ) ; if ( x not in b . keys ( ) ) b [ x ] = d ; else b [ x ] = min ( d , b [ x ] ) ; } int ans = 10 ** 9 ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; if ( x != ( k - x ) && ( k - x ) in b . keys ( ) ) ans = min ( max ( b [ x ] , b [ k - x ] ) , ans ) ; } return ans ; }
string maxRepeating ( string str ) { int n = str . length ( ) ; int count = 0 ; string res = str [ 0 ] ; int cur_count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( i < n - 1 && str [ i ] == str [ i + 1 ] ) cur_count ++ ; else if ( cur_count > count ) count = cur_count ; res = str [ i ] ; } return res ; }
int solveQuery ( int start , int end , int arr [ ] ) { map < int , int > frequency ; for ( int i = start ; i <= end ; i ++ ) frequency [ arr [ i ] ] ++ ; int count = 0 ; for ( int x = 0 ; x < frequency . size ( ) ; x ++ ) if ( x == frequency [ x ] ) count ++ ; return count ; }
int Circumference ( int a ) { return ( 4 * a ) ; }
int numberOfPaths ( int m , int n ) { int path = 1 ; for ( int i = n ; i <= ( m + n - 1 ) ; i ++ ) path *= i ; path /= ( i - n + 1 ) ; return path ; }
void pointClip ( int XY [ ] [ MAX ] , int n , int Xmin , int Ymin , int Xmax , int Ymax ) { cout << " Point ▁ inside ▁ the ▁ viewing ▁ pane : \n " ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( XY [ i ] [ 0 ] >= Xmin ) && ( XY [ i ] [ 0 ] <= Xmax ) ) cout << " [ " << XY [ i ] [ 0 ] << " , ▁ " << XY [ i ] [ 1 ] << " ] " ; } cout << " \n \n " ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( XY [ i ] [ 0 ] < Xmin ) || ( XY [ i ] [ 0 ] > Xmax ) ) cout << " [ " << XY [ i ] [ 0 ] << " , ▁ " << XY [ i ] [ 1 ] << " ] " << " ▁ " << endl ; } cout << " \n " ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( XY [ i ] [ 0 ] < Xmin ) || ( XY [ i ] [ 0 ] > Xmax ) ) cout << " [ " << XY [ i ] [ 0 ] << " , ▁ " << XY [ i ] [ 1 ] << " ] " << " ▁ " << " ▁ " << endl ; } }
int pre_compute ( int a [ ] , int n , int index , int k ) { int dp [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) dp [ 0 ] [ i ] = a [ i ] + a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ 0 ] ) dp [ 0 ] [ i ] = a [ i ] + a [ 0 ] ; else dp [ 0 ] [ i ] = a [ i ] ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] > a [ i ] && j > i ) dp [ i ] [ j ] = dp [ i - 1 ] [ i ] + a [ j ] ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } } return dp [ index ] [ k ] ; }
void splitArr ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < k ; i ++ ) { int x = arr [ 0 ] ; for ( int j = 0 ; j < n - 1 ; j ++ ) arr [ j ] = arr [ j + 1 ] ; arr [ n - 1 ] = x ; } }
int smallestSubWithSum ( int arr [ ] , int n , int x ) { int curr_sum = 0 ; int min_len = n + 1 ; int start = 0 , end = 0 ; while ( end < n ) { while ( curr_sum <= x && end < n ) { if ( curr_sum <= 0 && x > 0 ) { start = end ; curr_sum = 0 ; } curr_sum += arr [ end ] ; end ++ ; } while ( curr_sum > x && start < n ) { if ( end - start < min_len ) min_len = end - start ; curr_sum -= arr [ start ] ; start ++ ; } } return min_len ; }
int winner ( int a [ ] , int n , int k ) { if ( k >= n - 1 ) return n ; int best = 0 ; int times = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > best ) { best = a [ i ] ; if ( i == true ) times ++ ; else times ++ ; } if ( times >= k ) return best ; } return best ; }
bool divisibleBy20 ( string num ) { int lastTwoDigits = num [ - 2 ] ; return ( lastTwoDigits % 5 == 0 && lastTwoDigits % 4 == 0 ) ; }
int countSolutions ( int n ) { int x = 0 , res = 0 ; int yCount = 0 ; while ( yCount * yCount < n ) yCount ++ ; while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) yCount -- ; return res ; }
void CountTriangles ( int A [ ] ) { int n = A . size ( ) ; sort ( A , A + n ) ; int count = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { int l = 0 , r = i - 1 ; while ( l < r ) { if ( A [ l ] + A [ r ] > A [ i ] ) count += r - l ; r -- ; else l ++ ; } } cout << " No ▁ of ▁ possible ▁ solutions : ▁ " << count << endl ; }
int snoob ( int x ) { int next = 0 ; if ( x ) { int rightOne = ( x & - ( x ) ) ; int nextHigherOneBit = x + int ( rightOne ) ; int rightOnesPattern = x ^ int ( nextHigherOneBit ) ; rightOnesPattern = ( int ) rightOnesPattern / int ( rightOne ) ) ; rightOnesPattern = ( int ) rightOnesPattern / int ( rightOne ) ; next = nextHigherOneBit | rightOnesPattern ; } return next ; }
bool isInorder ( int arr [ ] , int n ) { if ( n == 0 || n == 1 ) return true ; for ( int i = 1 ; i <= n ; i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ; return true ; }
int lis ( int arr [ ] ) { int n = arr . length ( ) ; int maximum = 1 ; _lis ( arr , n ) ; return maximum ; }
int maxProduct ( int arr [ ] , int n ) { if ( n < 3 ) return - 1 ; int max_product = INT_MIN ; for ( int i = 0 ; i <= n - 2 ; i ++ ) { for ( int j = i + 1 ; j <= n - 1 ; j ++ ) { for ( int k = j + 1 ; k <= n ; k ++ ) max_product = max ( max_product , arr [ i ] * arr [ j ] * arr [ k ] ) ; } } return max_product ; }
void countFreq ( int a [ ] , int n ) { map < int , int > hm ; for ( int i = 0 ; i < n ; i ++ ) hm [ a [ i ] ] = hm [ a [ i ] ] + 1 ; unordered_set < int > st ; for ( int x = 0 ; x < hm . size ( ) ; x ++ ) { st . insert ( ( x , hm [ x ] ) ) ; cumul = 0 ; for ( int x = 0 ; x < hm . size ( ) ; x ++ ) cumul += x [ 1 ] ; cumul += x [ 0 ] ; } }
int nCrModp ( int n , int r , int p ) { int C [ r + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) C [ i ] = 1 ; for ( int i = 1 ; i <= r ; i ++ ) { for ( int j = min ( i , r ) ; j >= 0 ; j -- ) C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p ; } return C [ r ] ; }
void cocktailSort ( int a [ ] ) { int n = a . size ( ) ; bool swapped = true ; int start = 0 , end = n - 1 ; while ( swapped == true ) { swapped = false ; for ( int i = start ; i < end ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { swap ( a [ i ] , a [ i + 1 ] ) ; swapped = true ; } } while ( swapped == false ) { break ; } swapped = false ; for ( int i = end - 1 ; i >= start ; i -- ) { if ( a [ i ] > a [ i + 1 ] ) { swap ( a [ i ] , a [ i + 1 ] ) ; swapped = true ; } } start = start + 1 ; } }
void solveWordWrap ( int arr [ ] , int n , int k ) { int dp [ n ] ; int ans [ n ] ; for ( int i = 0 ; i < n - 2 ; i ++ ) dp [ i ] = 0 , ans [ n - 1 ] = n - 1 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { int currlen = - 1 ; dp [ i ] = INT_MAX ; for ( int j = i ; j < n ; j ++ ) { int cost = INT_MIN ; if ( currlen > k ) break ; if ( j == n - 1 ) cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ] ; if ( cost < dp [ i ] ) dp [ i ] = cost ; ans [ i ] = j ; } } i = 0 ; while ( i < n ) cout << i + 1 << " ▁ " ; i = ans [ i ] + 1 ; }
int binarySearch ( int arr [ ] , int l , int r , int x ) { for ( int mid = l + ( r - l ) / 2 ; if ( arr [ mid ] == x ) return mid ; else if ( arr [ mid ] < x ) l ++ ; else r -- ; } return - 1 ; }
int minXOR ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int min_xor = INT_MAX ; int val = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { val = arr [ i ] ^ arr [ j ] ; min_xor = min ( min_xor , val ) ; } } return min_xor ; }
int sumofFactors ( int n ) { if ( n % 2 != 0 ) return 0 ; int res = 1 ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { int count = 0 ; int curr_sum = 1 ; int curr_term = 1 ; while ( n % i == 0 ) ++ count ; n = n / i ; if ( i == 2 && count == 1 ) curr_sum = 0 ; curr_term = curr_term * i ; curr_sum = curr_sum + curr_term ; } if ( n >= 2 ) res = res * ( 1 + n ) ; return res ; }
int first ( char str [ ] , int i = 0 ) { if ( str [ i ] == ' \0' ) return 0 ; if ( str [ i ] . isupper ( ) ) return str [ i ] ; return first ( str , i + 1 ) ; }
int maxGameByWinner ( int N ) { int dp [ N ] ; dp [ 0 ] = 1 , dp [ 1 ] = 2 ; int i ; for ( i = 1 ; i <= N ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ; return ( i - 1 ) ; }
int equilibrium ( int arr [ ] ) { int total_sum = sum ( arr ) ; int leftsum = 0 ; for ( int i = 0 ; i < arr . length ( ) ; i ++ ) { total_sum -= num ; if ( leftsum == total_sum ) return i ; leftsum += num ; } return - 1 ; }
double procal ( double n ) { return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ; }
void rearrange ( int arr [ ] , int n ) { int temp [ n ] ; int small = 0 , large = n - 1 ; bool flag = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( flag is true ) temp [ i ] = arr [ large ] ; large -- ; else temp [ i ] = arr [ small ] ; small ++ ; } flag = ! flag ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = temp [ i ] ; } } return arr ; }
void greatest ( string s ) { int n = s . length ( ) ; int a [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = s [ i ] - '0' ; sum += a [ i ] ; if ( a [ n - 1 ] % 2 ) { if ( a [ n - 2 ] % 2 != 0 || ( sum - a [ n - 1 ] ) % 3 != 0 ) cout << " - 1" ; else cout << n ; } else { int re = sum % 3 ; int dell = - 1 ; int flag = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] % 3 == re ) { dell = i ; flag = 1 ; break ; } else { dell = i ; } } if ( flag == 0 ) { if ( a [ n - 2 ] % 2 == 0 && re == a [ n - 1 ] % 3 ) dell = n - 1 ; } }
bool isChangeable ( int notes [ ] , int n ) { int fiveCount = 0 , tenCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( notes [ i ] == 5 ) fiveCount ++ ; else if ( notes [ i ] == 10 ) { if ( fiveCount > 0 ) fiveCount -- ; tenCount ++ ; else if ( fiveCount >= 3 ) fiveCount -= 3 ; else return 0 ; } } return 1 ; }
int LCSubStr ( int X [ ] , int Y [ ] , int m , int n ) { int LCSuff [ m + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) LCSuff [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) LCSuff [ i ] [ j ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ; result = max ( result , LCSuff [ i ] [ j ] ) ; else LCSuff [ i ] [ j ] = 0 ; } } return result ; }
int maxSumWO3Consec ( int n ) { if ( sum [ n ] != - 1 ) return sum [ n ] ; if ( n == 0 ) sum [ n ] = 0 ; return sum [ n ] ; if ( n == 1 ) sum [ n ] = arr [ 0 ] ; return sum [ n ] ; if ( n == 2 ) sum [ n ] = arr [ 1 ] + arr [ 0 ] ; return sum [ n ] ; } sum [ n ] = max ( maxSumWO3Consec ( n - 1 ) , maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) ) ; return sum [ n ] ; }
int findMinZero ( int p ) { int first = 1 , second = 1 , number = 2 ; int next ; for ( next = 1 ; next ; next = next ) { first = second ; second = next ; number = number + 1 ; } return number ; }
void reorder ( int arr [ ] , int index [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { while ( index [ i ] != i ) { int oldTargetI = index [ index [ i ] ] ; int oldTargetE = arr [ index [ i ] ] ; arr [ index [ i ] ] = arr [ i ] ; index [ i ] = index [ i ] ; } }
int longestNull ( string S ) { int arr [ ] ; arr . push ( [ ' @ ' , - 1 ] ) ; int maxlen = 0 ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { arr . push ( [ S [ i ] , i ] ) ; } while ( ! arr . empty ( ) && arr [ - 3 ] [ 0 ] == '1' && arr [ - 2 ] [ 0 ] == '0' && arr [ - 1 ] [ 0 ] == '0' ) { arr . pop ( ) ; arr . pop ( ) ; } int tmp = arr [ - 1 ] ; maxlen = max ( maxlen , i - tmp [ 1 ] ) ; } return maxlen ; }
int calculateSum ( int n ) { if ( n <= 0 ) return 0 ; int fibo [ n + 1 ] ; int sm = fibo [ 0 ] + fibo [ 1 ] ; for ( int i = 2 ; i <= n ; i ++ ) fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ; sm = sm + fibo [ i ] ; return sm ; }
int shortestPath ( int graph [ ] [ V ] , int u , int v , int k ) { int V = 4 ; int INF = 999999999999 ; if ( k == 0 && u == v ) return 0 ; if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ] ; if ( k <= 0 ) return INF ; int res = INF ; for ( int i = 0 ; i < V ; i ++ ) { if ( graph [ u ] [ i ] != INF && u != i && v != i ) { int rec_res = shortestPath ( graph , i , v , k - 1 ) ; if ( rec_res != INF ) res = min ( res , graph [ u ] [ i ] + rec_res ) ; } } return res ; }
int sumofsquare ( int n ) { int C [ n ] [ n + 1 ] ; memset ( C , 0 , sizeof ( C ) ) ; for ( int i = 0 ; i < n ; i ++ ) C [ 0 ] [ i + 1 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = 0 ; j <= min ( i , n ) ; j ++ ) C [ i ] [ j ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ) ; } } int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) sum = sum + ( C [ n ] [ i ] * C [ n ] [ i ] ) ; return sum ; }
void constructArr ( int arr [ ] , int pair [ ] , int n ) { arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2 ; for ( int i = 1 ; i < n ; i ++ ) arr [ i ] = ( pair [ i - 1 ] - arr [ 0 ] ) / 2 ; }
int patternCount ( char str [ ] ) { char last = str [ 0 ] ; int i = 1 ; int counter = 0 ; while ( str [ i ] != ' \0' && last == '1' ) { if ( str [ i ] == '0' && last == '1' ) { while ( str [ i ] == '0' ) i ++ ; if ( str [ i ] == '1' ) counter ++ ; } } return counter ; }
int findFrequency ( int arr [ ] , int n , int left , int right , int element ) { int count = 0 ; for ( int i = left - 1 ; i < right ; i ++ ) if ( arr [ i ] == element ) count ++ ; return count ; }
void parabola ( int a , int b , int c ) { cout << " Vertex : ▁ ( " << ( - b / ( 2 * a ) ) << " , ▁ " << ( ( 4 * a * c ) - ( b * b ) ) / ( 4 * a ) << " ) " << endl ; cout << " Focus : ▁ ( " << ( - b / ( 2 * a ) ) << " , ▁ " << ( ( 4 * a * c ) - ( b * b ) + 1 ) / ( 4 * a ) << " ) " << endl ; cout << " Directrix : ▁ y = ▁ " << c - ( ( b * b ) + 1 ) * 4 * a << endl ; }
int minproduct ( int a [ ] , int b [ ] , int n , int k ) { int diff = 0 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int pro = a [ i ] * b [ i ] ; res = res + pro ; if ( pro < 0 && b [ i ] < 0 ) { int temp = ( a [ i ] + 2 * k ) * b [ i ] ; else if ( pro > 0 && a [ i ] > 0 ) { temp = ( a [ i ] - 2 * k ) * b [ i ] ; } int d = abs ( pro - temp ) ; if ( d > diff ) diff = d ; } return res - diff ; }
void longestSubseqWithK ( string str , int k ) { int n = str . length ( ) ; int freq [ MAX_CHARS ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) freq [ str [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str [ i ] - ' a ' ] >= k ) cout << str [ i ] ; } }
int pairsInSortedRotated ( int arr [ ] , int n , int x ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) break ; int l = ( i + 1 ) % n ; int r = i ; int cnt = 0 ; while ( l != r ) { if ( arr [ l ] + arr [ r ] == x ) { cnt ++ ; if ( l == ( r - 1 + n ) % n ) return cnt ; } l = ( l + 1 ) % n ; r = ( r - 1 + n ) % n ; } else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ; else r = ( n + r - 1 ) % n ; } return cnt ; }
int middleOfThree ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) return b ; else if ( x * z > 0 ) return a ; else return b ; }
unsigned int nextPowerOf2 ( unsigned int n ) { int count = 0 ; if ( n && ! ( n & ( n - 1 ) ) ) return n ; while ( n != 0 ) n >>= 1 ; count ++ ; return 1 << count ; }
int maxSubArraySumRepeated ( int a [ ] , int n , int k ) { int max_so_far = INT_MAX ; int max_ending_here = 0 ; for ( int i = 0 ; i < n * k ; i ++ ) { max_ending_here = max_ending_here + a [ i % n ] ; if ( max_so_far < max_ending_here ) { max_so_far = max_ending_here ; } if ( max_ending_here < 0 ) max_ending_here = 0 ; } return max_so_far ; }
string reverse ( string str ) { str = str . slice ( 0 , - 1 ) ; return str ; }
string nextWord ( string s ) { if ( s == " ▁ " ) return " a " ; int i ; for ( i = s . length ( ) - 1 ; i >= 0 ; i -- ) if ( s [ i ] == ' z ' && i >= 0 ) i -- ; if ( i == - 1 ) s = s + ' a ' ; else s = s . replace ( s [ i ] , ' ▁ ' ) ; } return s ; }
int binomialCoeffSum ( int n ) { int C [ n ] [ n + 2 ] ; memset ( C , 0 , sizeof C ) ; for ( int i = 0 ; i < n ; i ++ ) C [ 0 ] [ i + 1 ] = C [ 0 ] [ i ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < min ( i , n ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) sum += C [ n ] [ i ] ; return sum ; }
bool isEven ( int n ) { return ( n % 2 == 0 ) ; }
int binarySearch ( int * arr , int low , int high , int key ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; if ( key == arr [ int ( mid ) ] ) return mid ; if ( key > arr [ int ( mid ) ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ; return binarySearch ( arr , low , ( mid - 1 ) , key ) ; }
void MAXMIN ( int arr [ ] [ MAX ] , int n ) { int MIN = INT_MAX ; int MAX = INT_MIN ; for ( int i = 0 ; i < n / 2 ; i ++ ) { for ( int j = 0 ; j <= n / 2 ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) { if ( MIN > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ] ; if ( MAX < arr [ i ] [ j ] ) MAX = arr [ i ] [ j ] ; } else { if ( MIN > arr [ i ] [ j ] ) { MIN = arr [ i ] [ j ] ; if ( MAX < arr [ i ] [ n - j - 1 ] ) MAX = arr [ i ] [ n - j - 1 ] ; } } } cout << " MAXimum ▁ = ▁ " << MAX << " , ▁ MINimum ▁ = ▁ " << MIN << endl ; }
bool isPowerOfTwo ( int x ) { return ( x && ( ! ( x & ( x - 1 ) ) ) ; }
int countPaths ( int n , int m ) { if ( n == 0 || m == 0 ) return 1 ; return countPaths ( n - 1 , m ) + countPaths ( n , m - 1 ) ; }
bool isRectangle ( bool matrix [ ] [ MAX ] ) { int rows = matrix [ 0 ] . size ( ) ; if ( rows == 0 ) return false ; int columns = matrix [ 0 ] . size ( ) ; int table [ rows ] ; for ( int i = 1 ; i < rows ; i ++ ) { for ( int j = 0 ; j < columns - 1 ; j ++ ) { for ( int k = j + 1 ; k < columns ; k ++ ) { if ( j in table && k in table [ j ] ) return true ; if ( k in table && j in table [ k ] ) return true ; if ( k in table && j in table [ k ] ) return true ; if ( j in table && k in table [ j ] ) return true ; if ( k in table && j in table [ k ] ) return true ; if ( j in table ) table [ j ] . add ( k ) ; table [ k ] . add ( j ) ; } } } return false ; }
void decToBinary ( int n ) { int binaryNum [ n ] ; int i = 0 ; while ( n > 0 ) { binaryNum [ i ] = n % 2 ; n = n / 2 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) cout << binaryNum [ j ] ; }
int countFriendsPairings ( int n ) { int dp [ 100 ] ; if ( dp [ n ] != - 1 ) return dp [ n ] ; if ( n > 2 ) dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 ) ; else dp [ n ] = n ; }
int maximumSumSubarray ( int arr [ ] , int n ) { int min_prefix_sum = 0 ; int res = INT_MIN ; int prefix_sum [ n ] ; memset ( prefix_sum , 0 , sizeof prefix_sum ) ; for ( int i = 1 ; i < n ; i ++ ) prefix_sum . push ( arr [ i ] ) ; for ( int i = 1 ; i < n ; i ++ ) prefix_sum . push ( prefix_sum [ i - 1 ] + arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) res = max ( res , prefix_sum [ i ] - min_prefix_sum ) ; min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ] ) ; return res ; }
int countOccurrences ( string s , int K ) { int n = s . length ( ) ; int c1 = 0 , c2 = 0 , C = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' a ' ) c1 ++ ; if ( s [ i ] == ' b ' ) c2 ++ ; C += c1 ; } return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ; }
bool checkDivisibility ( string num ) { int len = num . length ( ) ; if ( len == 1 && num [ 0 ] == '0' ) return true ; if ( length % 3 == 1 ) num = num + "00" ; else if ( length % 3 == 2 ) num = num + "0" ; else if ( length % 3 == 1 ) num = num + "00" ; length ++ ; else if ( length % 3 == 2 ) num = str ( num ) + "0" ; else if ( length % 3 == 3 ) num = num . toString ( ) + "00" ; length ++ ; int sum = 0 ; int p = 1 ; for ( int i = length - 1 ; i >= 0 ; i -- ) group += ( num [ i ] - '0' ) ; sum = sum + group * p ; return ( sum % 13 == 0 ) ; }
int countRect ( int n ) { int ans = 0 ; for ( int length = 1 ; length <= n ; length ++ ) { int height = length ; while ( height * length <= n ) ans ++ ; height ++ ; } return ans ; }
int countSetBits ( int n ) { int count = 0 ; while ( n ) n &= ( n - 1 ) ; count ++ ; return count ; }
int lenOfLongSubarr ( int arr [ ] , int n ) { int um [ 10 ] ; int sum = 0 ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) sum ++ ; else sum ++ ; if ( sum == 1 ) maxLen = i + 1 ; else if ( sum == 10 ) um [ sum ] = i ; else if ( sum - 1 ) in um ) { if ( maxLen < ( i - um [ sum - 1 ] ) ) maxLen = i - um [ sum - 1 ] ; } } return maxLen ; }
unsigned int factorial ( unsigned int n ) { return n == 1 || n == 0 ? 1 : n * factorial ( n - 1 ) ; }
int minJumps ( int arr [ ] , int l , int h ) { if ( h == l ) return 0 ; if ( arr [ l ] == 0 ) return float ( ' inf ' ) ; int min = float ( ' inf ' ) ; for ( int i = l ; i <= h ; i ++ ) { if ( i < l + arr [ l ] + 1 ) { int jumps = minJumps ( arr , i , h ) ; if ( jumps != float ( ' inf ' ) && jumps + 1 < min ) min = jumps + 1 ; } } return min ; }
int minTimeForWritingChars ( int N , int insrt , int remov , int cpy ) { if ( N == 0 ) return 0 ; if ( N == 1 ) return insrt ; int dp [ N ] ; for ( int i = 1 ; i <= N ; i ++ ) dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ i / 2 ] + cpy ) ; return dp [ N ] ; }
void carveCross ( char str [ ] ) { int n = str . length ( ) ; if ( n % 2 == 0 ) cout << " Not ▁ possible . ▁ Please ▁ enter ▁ " << " odd ▁ length ▁ string . \n " ; else { int arr [ n ] [ max ] ; int m = n / 2 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { arr [ i ] [ j ] = ' X ' ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << arr [ i ] [ j ] << " ▁ " ; } cout << endl ; } }
int sumoflength ( int arr [ ] , int n ) { vector < int > S ; int j = 0 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) S . insert ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { while ( S . find ( arr [ i ] ) == S . end ( ) ) { s . push ( arr [ i ] ) ; j ++ ; } ans += ( j - i ) * ( j - i + 1 ) ; s . remove ( arr [ i ] ) ; } return ans ; }
void findTriplets ( int arr [ ] , int n ) { bool found = false ; for ( int i = 0 ; i <= n - 2 ; i ++ ) { unordered_set < int > S ; for ( int j = i + 1 ; j <= n ; j ++ ) { int x = ( arr [ i ] + arr [ j ] ) ; if ( S . find ( x ) != S . end ( ) ) cout << x << " ▁ " ; else S . insert ( arr [ j ] ) ; } } if ( found == false ) cout << " No ▁ Triplet ▁ Found " ; }
int maxPrefix ( string s , string t ) { int count = 0 ; for ( int i = 0 ; i < t . length ( ) ; i ++ ) { if ( count == s . length ( ) ) break ; if ( t [ i ] == s [ count ] ) count ++ ; } return count ; }
void segregateElements ( int arr [ ] , int n ) { int temp [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= 0 ) temp [ j ] = arr [ i ] ; j ++ ; } if ( j == n || j == 0 ) return ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) temp [ j ] = arr [ i ] ; j ++ ; } for ( k = 0 ; k < n ; k ++ ) arr [ k ] = temp [ k ] ; } }
void mergeIntervals ( int arr [ ] ) { sort ( arr , arr + 1 ) ; int m [ MAX ] ; int s = - 10000 , max = - 100000 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int a = arr [ i ] ; if ( a [ 0 ] > max ) { m . push ( [ s , max ] ) ; max = a [ 1 ] ; s = a [ 0 ] ; } else { if ( a [ 1 ] >= max ) { max = a [ 1 ] ; } } } if ( max != - 100000 && m . empty ( ) ) cout << " The ▁ Merged ▁ Intervals ▁ are ▁ : \n " ; for ( int i = 0 ; i < m . size ( ) ; i ++ ) cout << m [ i ] << " ▁ " ; }
float correlationCoefficient ( int X [ ] , int Y [ ] , int n ) { int sum_X = 0 , sum_Y = 0 , sum_XY = 0 ; int squareSum_X = 0 , squareSum_Y = 0 ; int i ; for ( i = 0 ; i < n ; i ++ ) { sum_X = sum_X + X [ i ] ; sum_Y = sum_Y + Y [ i ] ; sum_XY = sum_XY + X [ i ] * Y [ i ] ; squareSum_X = squareSum_X + X [ i ] * X [ i ] ; squareSum_Y = squareSum_Y + Y [ i ] * Y [ i ] ; i ++ ; } double corr = ( n * sum_XY - sum_X * sum_Y ) / ( n * squareSum_X - sum_X * sum_X ) * ( n * squareSum_Y - sum_Y * sum_Y ) ; return corr ; }
int findArea ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int dimension [ 2 ] ; int i = 0 , j = 0 ; while ( i < n - 1 && j < 2 ) { if ( arr [ i ] == arr [ i + 1 ] ) { dimension [ j ] = arr [ i ] ; j ++ ; i ++ ; } } return ( dimension [ 0 ] * dimension [ 1 ] ) ; }
int minOps ( int arr [ ] , int n , int k ) { int max1 = max ( arr ) ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( max1 - arr [ i ] ) % k != 0 ) return - 1 ; else res += ( max1 - arr [ i ] ) / k ; } return res ; }
int floorSqrt ( int x ) { if ( x == 0 || x == 1 ) return x ; int i = 1 , result = 1 ; while ( result <= x ) i ++ ; result = i * i ; return i - 1 ; }
bool isdivisible7 ( string num ) { int n = num . length ( ) ; if ( n == 0 && num [ 0 ] == ' \n ' ) return 1 ; if ( n % 3 == 1 ) num = num + "00" ; n += 2 ; else if ( n % 3 == 2 ) num = str ( num ) + "0" ; n ++ ; else if ( n % 3 == 1 ) num = num + "00" ; else if ( n % 3 == 2 ) num = str ( num ) + "0" ; n ++ ; else if ( n % 3 == 3 ) num = num + "00" ; n ++ ; int GSum = 0 ; p = 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) group += ( num [ i ] - '0' ) ; GSum = GSum + group * p ; return ( GSum % 7 == 0 ) ; }
void printMat ( int degseq [ ] , int n ) { int mat [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) { degseq [ i ] -- ; degseq [ j ] -- ; mat [ i ] [ j ] = 1 ; mat [ j ] [ i ] = 1 ; } } cout << " ▁ ▁ ▁ " << endl ; for ( int i = 0 ; i < n ; i ++ ) { cout << " ▁ " << " ( " << i << " ) " << endl ; for ( int j = 0 ; j < n ; j ++ ) { cout << " ▁ ▁ ▁ ▁ " << mat [ i ] [ j ] << endl ; } cout << endl ; } }
int minTime ( int arr [ ] , int n , int m ) { int t = 0 ; while ( 1 ) { int items = 0 ; for ( int i = 0 ; i < n ; i ++ ) items += ( t / arr [ i ] ) ; if ( items >= m ) return t ; t ++ ; } }
int MaximumDecimalValue ( int mat [ MAX ] [ MAX ] , int n ) { int dp [ n ] [ n ] ; if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1 ; else dp [ 0 ] [ 0 ] = dp [ 0 ] [ i - 1 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + 2 ** i ; else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( 2 ** ( i + j ) ) ; else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( 2 ** ( i + j ) ) ; } } return dp [ n - 1 ] [ n - 1 ] ; }
bool isDivisible999 ( string num ) { int n = num . length ( ) ; if ( n == 0 || num [ 0 ] == '0' ) return true ; if ( ( n % 3 ) == 1 ) num = "00" + num ; if ( ( n % 3 ) == 2 ) num = "0" + num ; int gSum = 0 ; for ( int i = 0 ; i < n ; i += 3 ) { int group = ( num [ i ] - 48 ) * 100 ; group += ( num [ i + 1 ] - 48 ) * 10 ; group += ( num [ i + 2 ] - 48 ) ; gSum += group ; } if ( gSum > 1000 ) num = str ( gSum ) ; n = num . length ( ) ; gSum = isDivisible999 ( num ) ; return ( gSum == 999 ) ; }
int maxSumBitonicSubArr ( int arr [ ] , int n ) { int msis [ n ] ; int msds [ n ] ; int max_sum = 0 ; msis [ 0 ] = arr [ 0 ] ; msds [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ] ; else msds [ i ] = arr [ i ] ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ] ; else msds [ i ] = arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] ) ; } return max_sum ; }
int findMinNumber ( int n ) { int count = 0 ; int ans = 1 ; while ( n % 2 == 0 ) count ++ ; n /= 2 ; if ( count % 2 is not 0 ) ans *= 2 ; for ( int i = 3 ; i <= sqrt ( n ) ; i ++ ) { count = 0 ; while ( n % i == 0 ) count ++ ; n /= i ; if ( count % 2 is not 0 ) ans *= i ; } if ( n > 2 ) ans *= n ; } return ans ; }
int rangeGCD ( int n , int m ) { return n if ( n == m ) return 1 ; }
int assignValue ( int a , int b , int x ) { int arr [ 2 ] ; memset ( arr , 0 , sizeof arr ) ; return arr [ x ] ; }
bool isTriangular ( int num ) { if ( num < 0 ) return false ; int sum = 0 , n = 1 ; while ( sum <= num ) { sum = sum + n ; if ( sum == num ) return true ; n ++ ; } return false ; }
bool checkPangram ( string s ) { bool list [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) list . push ( false ) ; for ( int c = 0 ; c < s . length ( ) ; c ++ ) { if ( ! c . isLetter ( ) ) list [ c - ' a ' ] = true ; else for ( char ch = list . top ( ) ; ch != false ; ch ++ ) if ( ch == true ) return false ; } return true ; }
int interpolationSearch ( int arr [ ] , int n , int x ) { int lo = 0 , hi = ( n - 1 ) ; while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) { if ( lo == hi ) if ( arr [ lo ] == x ) return lo ; return - 1 ; } int pos = lo + ( ( float ) ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ; if ( arr [ pos ] == x ) return pos ; if ( arr [ pos ] < x ) lo ++ ; else hi -- ; } return - 1 ; }
void minSpacePreferLarge ( int w , int m , int n ) { int num_m = 0 , num_n = 0 ; int rem = w ; int p = 0 , q = 0 , r = 0 ; while ( w >= n ) { p = w / m ; r = w % m ; if ( r <= rem ) { num_m = p ; num_n = q ; rem = r ; } q ++ ; w -= n ; } cout << str ( int ) << " ▁ ▁ " << num_m << " ▁ " << num_n << " ▁ " << rem << endl ; }
int findRepeating ( int arr [ ] , int n ) { int missingElement = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int element = arr [ abs ( arr [ i ] ) ] ; if ( element < 0 ) break ; arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ] ; } return abs ( missingElement ) ; }
void kLargest ( int arr [ ] , int k ) { sort ( arr , arr + k ) ; for ( int i = 0 ; i < k ; i ++ ) cout << arr [ i ] << " ▁ " ; }
int knapSack ( int W , int wt , int val [ ] , int n ) { int K [ n + 1 ] [ W + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) K [ i ] [ 0 ] = 0 ; for ( int w = 0 ; w <= W ; w ++ ) { if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } return K [ n ] [ W ] ; }
bool isPowerOfFour ( int n ) { return ( n != 0 && ( n & ( n - 1 ) ) == 0 ) && ! ( n & 0xAAAAAAAA ) ) ; }
unsigned int factorial ( unsigned int n ) { return n == 1 || n == 0 ? 1 : n * factorial ( n - 1 ) ; }
int findgroups ( int arr [ ] , int n ) { int c [ 3 ] = { 0 , 0 , 0 } ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) c [ arr [ i ] % 3 ] ++ ; res += ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 ; res += c [ 1 ] * c [ 2 ] ; res += ( c [ 0 ] * ( c [ 0 ] - 1 ) ) / 6 ; res += ( c [ 1 ] * ( c [ 1 ] - 2 ) ) / 6 ; res += ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) ) / 6 ; res += c [ 0 ] * c [ 1 ] * c [ 2 ] ; return res ; }
int kthLargestSum ( int arr [ ] , int n , int k ) { int sum [ n + 1 ] ; sum . push ( arr [ 0 ] ) ; for ( int i = 2 ; i <= n ; i ++ ) sum . push ( sum [ i - 1 ] + arr [ i - 1 ] ) ; int Q [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) Q . push ( sum [ i ] ) ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { int x = sum [ j ] - sum [ i - 1 ] ; if ( len ( Q ) < k ) heapq . push ( Q , x ) ; else { if ( Q [ 0 ] < x ) heapq . heappush ( Q , x ) ; } } } return Q [ 0 ] ; }
int findMaxValue ( int mat [ N ] [ N ] ) { int maxValue = INT_MIN ; int maxArr [ N ] [ N ] ; int i , j ; for ( i = 0 ; i < N ; i ++ ) { maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ i ] ; maxArr [ N - 1 ] [ j ] = maxv ; } maxv = mat [ N - 1 ] [ N - 1 ] ; for ( j = N - 2 ; j >= 0 ; j -- ) { if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ] ; maxArr [ N - 1 ] [ j ] = maxv ; } } for ( i = 0 ; i < N - 2 ; i ++ ) { for ( j = 0 ; j <= N - 2 ; j ++ ) { if ( maxArr [ i ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) { maxValue = ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] ) ; maxArr [ i ] [ j ] = max ( maxArr [ i ] [ j ] , max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j + 1 ] ) ) ; } } return maxValue ; }
int kPrimeFactor ( int n , int k ) { while ( n % 2 == 0 ) k = k - 1 ; n = n / 2 ; if ( k == 0 ) return 2 ; int i ; for ( i = 3 ; i <= math . sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( k == 1 ) return i ; k = k - 1 ; n = n / i ; } i = i + 2 ; } if ( n > 2 && k == 1 ) return n ; } return - 1 ; }
void printDistinct ( int arr [ ] , int n ) { map < int , int > s ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != ' \0' ) { s [ arr [ i ] ] = arr [ i ] ; cout << arr [ i ] << " ▁ " ; } } }
void decToBinary ( int n ) { for ( int i = 31 ; i >= 0 ; i -- ) { int k = n >> i ; if ( k & 1 ) cout << 1 << " " ; else cout << 0 << " " ; } }
void SieveOfEratosthenes ( int n , bool isPrime [ ] ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) isPrime [ i ] = true ; for ( int p = 2 ; p <= n ; p ++ ) { if ( p * p <= n && isPrime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i ++ ) isPrime [ i ] = false ; p ++ ; } } }
int abFree ( string s ) { int b_count = 0 ; int res = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ ~ i ] == ' a ' ) res += b_count ; b_count = ( b_count * 2 ) ; else b_count ++ ; } return res ; }
int countSubstrs ( char str [ ] , int i , int j , int n ) { if ( n == 1 ) return 1 ; if ( n <= 0 ) return 0 ; int res = countSubstrs ( str , i + 1 , j , n - 1 ) + countSubstrs ( str , i , j - 1 , n - 1 ) - countSubstrs ( str , i + 1 , j - 1 , n - 2 ) ; if ( str [ i ] == str [ j ] ) res ++ ; return res ; }
int findFirstMissing ( int array [ ] , int start , int end ) { if ( start > end ) return end + 1 ; if ( start != array [ start ] ) return start ; int mid = ( start + end ) / 2 ; if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ; return findFirstMissing ( array , start , mid ) ; }
unsigned int factorial ( unsigned int n ) { return n == 1 || n == 0 ? 1 : n * factorial ( n - 1 ) ; }
int minRotation ( int input , int unlock_code ) { int rotation = 0 ; while ( input > 0 || unlock_code > 0 ) { int input_digit = input % 10 ; int code_digit = unlock_code % 10 ; rotation += min ( abs ( input_digit - code_digit ) , 10 - abs ( input_digit - code_digit ) ) ; input = input / 10 ; unlock_code = unlock_code / 10 ; } return rotation ; }
void findFibSubset ( int arr [ ] , int n ) { int m = max ( arr ) ; int a = 0 , b = 1 ; int hash [ m ] ; hash . push_back ( a ) ; hash . push_back ( b ) ; while ( b < m ) { int c = a + b ; a = b ; b = c ; hash . push ( b ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] in hash ) cout << arr [ i ] << " ▁ " ; } }
bool checkMarkov ( int m [ ] [ MAX ] ) { for ( int i = 0 ; i < m . size ( ) ; i ++ ) { int sm = 0 ; for ( int j = 0 ; j < m [ i ] . size ( ) ; j ++ ) sm = sm + m [ i ] [ j ] ; if ( sm != 1 ) return false ; } return true ; }
int insertSorted ( int arr [ ] , int n , int key , int capacity ) { if ( n >= capacity ) return n ; int i ; for ( i = n - 1 ; i >= 0 && arr [ i ] > key ; i -- ) arr [ i + 1 ] = arr [ i ] ; arr [ i + 1 ] = key ; return ( n + 1 ) ; }
void recursiveReverse ( char str [ ] , int i = 0 ) { int n = str . length ( ) ; if ( i == n / 2 ) return ; str [ i ] , str [ n - i - 1 ] = str [ n - i - 1 ] ; recursiveReverse ( str , i + 1 ) ; }
bool areConsecutive ( int arr [ ] , int n ) { if ( n < 1 ) return false ; int Min = min ( arr ) ; int Max = max ( arr ) ; if ( Min + 1 == n ) { bool visited [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited [ arr [ i ] - Min ] != false ) return false ; visited [ arr [ i ] - Min ] = true ; } return true ; }
int findMod ( int a , int b ) { if ( a < 0 ) a = - a ; if ( b < 0 ) b = - b ; int mod = a ; while ( mod >= b ) mod = mod - b ; if ( a < 0 ) return - mod ; return mod ; }
int sumOfSubstrings ( string num ) { int n = num . length ( ) ; int sumofdigit [ n ] ; int res = sumofdigit [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { sumofdigit . push ( num [ i ] ) ; sumofdigit . push ( ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ) ; res += sumofdigit [ i ] ; } return res ; }
int findGreatest ( int arr [ ] , int n ) { map < int , int > m ; for ( int i = 0 ; i < n ; i ++ ) m [ i ] = 1 ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < i && arr [ j ] <= sqrt ( arr [ i ] ) ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) { int result = arr [ i ] / arr [ j ] ; if ( result != arr [ j ] && m [ result ] > 0 ) return arr [ i ] ; else if ( result == arr [ j ] && ( result in m . keys ( ) ) && m [ result ] > 1 ) return arr [ i ] ; } } return - 1 ; }
int getMissingNo ( int a [ ] , int n ) { int i , total = 0 ; for ( i = 2 ; i <= n + 1 ; i ++ ) total += i ; total -= a [ i - 2 ] ; return total ; }
int nextPowerOf2 ( int n ) { n -- ; n |= n >> 1 n |= n >> 2 n |= n >> 4 n |= n >> 8 n |= n >> 16 ; n ++ ; return n ; }
void add ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ; } }
int zigzag ( int n , int k ) { int dp [ k + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= k ; j ++ ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ i - j ] ; return dp [ n ] [ k ] ; }
int eggDrop ( int n , int k ) { int eggFloor [ k + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= k ; i ++ ) eggFloor [ i ] [ 1 ] = 1 ; for ( int j = 1 ; j <= n ; j ++ ) eggFloor [ 1 ] [ j ] = j ; for ( int i = 2 ; i <= k ; i ++ ) { for ( int j = 2 ; j <= n ; j ++ ) { eggFloor [ i ] [ j ] = INT_MAX ; for ( int x = 1 ; x <= j ; x ++ ) res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] ) ; if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j ] = res ; } } return eggFloor [ k ] [ n ] ; }
string noAdjacentDup ( string s ) { int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) { s [ i ] = " a " ; while ( s [ i ] == s [ i - 1 ] || ( i + 1 < n && s [ i ] == s [ i + 1 ] ) ) s [ i ] ++ ; i ++ ; } } return s ; }
int maximumDifferenceSum ( int arr [ ] , int N ) { int dp [ N ] [ N ] ; memset ( dp , 0 , sizeof ( dp ) ) ; for ( int i = 0 ; i < N ; i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) dp [ 0 ] [ 1 ] = dp [ i ] [ 2 ] = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) ) ; dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) ) ; return max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] ) ; }
int minInsertionStepToSortArray ( int arr [ ] , int N ) { int lis [ N ] ; memset ( lis , 0 , sizeof lis ) ; for ( int i = 0 ; i < N ; i ++ ) lis [ i ] = 1 ; for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ; } } int max = INT_MIN ; for ( int i = 0 ; i < N ; i ++ ) max = lis [ i ] ; return ( N - max ) ; }
bool isMultipleOf10 ( int n ) { return ( n % 15 == 0 ) ; }
int exactPrimeFactorCount ( int n ) { int count = 0 ; if ( n % 2 == 0 ) count = count + 1 ; while ( n % 2 == 0 ) n = n / 2 ; while ( i <= int . sqrt ( n ) ) { if ( n % i == 0 ) count = count + 1 ; while ( n % i == 0 ) n = n / i ; } i ++ ; if ( n > 2 ) count = count + 1 ; } return count ; }
void query ( string s , int i , int j ) { int n = s . length ( ) ; i %= n ; j %= n ; if ( s [ i ] == s [ j ] ) cout << " Yes " ; else cout << " No " ; }
int maxProduct ( int arr [ ] , int n ) { if ( n < 3 ) return - 1 ; sort ( arr , arr + n ) ; return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] ) ; }
int findMinAvgSubarray ( int arr [ ] , int n , int k ) { if ( n < k ) return 0 ; int res_index = 0 ; int curr_sum = 0 ; int min_sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) curr_sum += arr [ i ] ; if ( curr_sum < min_sum ) { min_sum = curr_sum ; res_index = ( i - k + 1 ) ; } } cout << " Subarray ▁ between ▁ [ ▁ " << res_index << " , ▁ " << ( res_index + k - 1 ) << " ] ▁ has ▁ minimum ▁ average " << endl ; }
int countwalks ( int graph [ ] [ V ] , int u , int v , int k ) { if ( k == 0 && u == v ) return 1 ; if ( k == 1 && graph [ u ] [ v ] ) return 1 ; if ( k <= 0 ) return 0 ; for ( int i = 0 ; i < V ; i ++ ) { if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph , i , v , k - 1 ) ; } return count ; }
int countPairs ( int arr [ ] , int n ) { int result = 0 ; unordered_set < int > Hash ; for ( int i = 0 ; i < n ; i ++ ) Hash . insert ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int product = arr [ i ] * arr [ j ] ; if ( product in ( Hash ) ) result ++ ; } } return result ; }
void print_sequence ( int n , int k ) { int b = n / ( k * ( k + 1 ) / 2 ) ; if ( b == 0 ) cout << " - 1 " ; else { int r = 1 ; int x = 1 ; while ( x ** 2 <= n ) { if ( n % x != 0 ) continue ; if ( x <= b && x > r ) r = x ; else if ( n / x <= b && n / x > r ) r = n / x ; else if ( n / x <= b && n / x > r ) r = n / x ; x ++ ; } } int i = 1 ; while ( i < k ) cout << r * i << " ▁ " ; last_term = n - ( r * ( k * ( k - 1 ) / 2 ) ; cout << last_term ; }
int nextPowerOf2 ( int n ) { n -- ; n |= n >> 1 n |= n >> 2 n |= n >> 4 n |= n >> 8 n |= n >> 16 ; n ++ ; return n ; }
int findMaxValue ( int arr [ ] , int n ) { if ( n < 4 ) cout << " The ▁ array ▁ should ▁ have ▁ atlest ▁ 4 ▁ elements " << endl ; int table1 [ MAX ] , table2 [ MAX ] , table3 [ MAX ] , table4 [ MAX ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] ) ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ; } for ( int i = n - 3 ; i >= 0 ; i -- ) table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ; } return table4 [ 0 ] ; }
void printInSortedOrder ( int arr [ ] , int n ) { int index [ n ] ; for ( int i = 0 ; i < n ; i ++ ) index [ i ] = i ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int min = i ; for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ index [ min ] ] > arr [ index [ j ] ] ) min = j ; if ( min != i ) index [ min ] , index [ i ] = index [ i ] , index [ min ] ; } } for ( int i = 0 ; i < n ; i ++ ) cout << arr [ index [ i ] ] << " ▁ " ; }
int findS ( int s ) { int _sum = 0 ; int n = 1 ; while ( _sum < s ) { _sum += n * n * n ; n ++ ; } if ( _sum == s ) return n ; return - 1 ; }
void printFun ( int test ) { if ( test < 1 ) return ; else { cout << test << " ▁ " ; cout << endl ; } }
void shiftMatrixByK ( int mat [ ] [ N ] , int k ) { if ( k > N ) cout << " shifting ▁ is ▁ " << " ▁ not ▁ possible " << endl ; int j = 0 ; while ( j < N ) { for ( int i = 0 ; i < k ; i ++ ) cout << " { } ▁ " << mat [ j ] [ i ] << " ▁ " << endl ; for ( int i = 0 ; i < k ; i ++ ) cout << " ▁ " << mat [ j ] [ i ] << " ▁ " << endl ; } j ++ ; }
void sortUsingHash ( int a [ ] , int n ) { int Max = max ( a ) ; int Min = abs ( min ( a ) ) ; int hashpos [ Max + 1 ] ; int hashneg [ Min + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) hashpos [ a [ i ] ] ++ ; for ( int i = 0 ; i < n ; i ++ ) hashneg [ a [ i ] ] ++ ; for ( int i = 0 ; i < Min ; i ++ ) { if ( a [ i ] >= 0 ) hashpos [ a [ i ] ] ++ ; else hashneg [ abs ( a [ i ] ) ] ++ ; } for ( int i = 0 ; i <= Max ; i ++ ) { if ( hashneg [ i ] != 0 ) cout << ( - 1 ) * i << " ▁ " ; } } for ( int i = 0 ; i <= Max ; i ++ ) { if ( hashpos [ i ] != 0 ) cout << i << " ▁ " ; } }
void findPair ( int arr [ ] , int n ) { bool found = false ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( arr [ i ] + arr [ j ] == arr [ k ] ) { printf ( " ▁ found ▁ % d " , arr [ i ] , arr [ j ] ) ; found = true ; } } } if ( found == false ) cout << " Not ▁ exist " ; }
int findMaxGCD ( int arr [ ] , int n ) { int high = 0 ; for ( int i = 0 ; i < n ; i ++ ) high = max ( high , arr [ i ] ) ; int count [ high + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) count [ arr [ i ] ] ++ ; int counter = 0 ; for ( int i = 0 ; i < high ; i ++ ) { counter ++ ; for ( int i = 0 ; i < n ; i ++ ) { int j = i ; while ( j <= high ) { if ( count [ j ] > 0 ) ++ counter ; j += i ; if ( counter == 2 ) return i ; } counter = 0 ; } }
bool squareRootExists ( int n , int p ) { n = n % p ; for ( int x = 2 ; x <= p ; x ++ ) if ( ( x * x ) % p == n ) return true ; return false ; }
int count ( int n , int x ) { int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i <= x ) if ( x / i <= n && x % i == 0 ) cnt ++ ; } return cnt ; }
int maxSubArraySum ( int a [ ] , int size ) { int max_so_far = INT_MAX ; int max_ending_here = 0 ; int start = 0 , end = 0 , s = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_ending_here += a [ i ] ; if ( max_so_far < max_ending_here ) { max_so_far = max_ending_here ; start = s ; end = i ; } if ( max_ending_here < 0 ) { max_ending_here = 0 ; s = i + 1 ; } } return ( end - start + 1 ) ; }
void smallestSubsegment ( int a [ ] , int n ) { unordered_map < int , int > left ; int count [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { left [ i ] = i ; count [ x ] = 1 ; } int mx = 0 , mn = 0 , strindex = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; if ( count [ x ] > mx ) { mx = count [ x ] ; mn = i - left [ x ] + 1 ; strindex = left [ x ] ; } else if ( count [ x ] == mx && i - left [ x ] + 1 < mn ) { mn = i - left [ x ] + 1 ; strindex = left [ x ] ; } } for ( int i = strindex ; i <= strindex + mn ; i ++ ) cout << a [ i ] << " ▁ " ; }
void findRandomIndexOfMax ( int arr [ ] , int n ) { map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; int max_element = - 323567 ; int max_so_far = - 323567 ; for ( int p = 0 ; p < mp . size ( ) ; p ++ ) { if ( mp [ p ] > max_so_far ) { max_so_far = mp [ p ] ; max_element = p ; } } int r = ( random . randrange ( 1 , max_so_far , 2 ) % max_so_far ) + 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == max_element ) count ++ ; if ( count == r ) break ; } i ++ ; } }
int minRadius ( int k , int x [ ] , int y [ ] , int n ) { int dis [ n ] ; for ( int i = 0 ; i < n ; i ++ ) dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ] ; sort ( dis , dis + k ) ; return dis [ k - 1 ] ; }
int singleNumber ( int nums [ ] ) { return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2 ; }
int countInRange ( int arr [ ] , int n , int x , int y ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ; return count ; }
void findSmallest ( int m , int s ) { if ( s == 0 ) cout << " Smallest ▁ number ▁ is ▁ 0 " ; else cout << " Not ▁ possible " ; return ; } if ( s > 9 * m ) cout << " Not ▁ possible " ; return ; }
bool isPresent ( string s , string q ) { int freq [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) freq [ s [ i ] ] ++ ; for ( int i = 0 ; i < q . length ( ) ; i ++ ) { freq [ q [ i ] ] -- ; if ( freq [ q [ i ] ] < 0 ) return false ; } return true ; }
void sortArray ( int arr [ ] , int n , int A , int B , int C ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = A * arr [ i ] * arr [ i ] + B * arr [ i ] + C ; int index = INT_MAX ; int maximum = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) { if ( maximum < arr [ i ] ) { index = i ; maximum = arr [ i ] ; } } int i = 0 , j = n - 1 ; new_arr [ k ] = 0 ; while ( i < index && j > index ) { if ( arr [ i ] < arr [ j ] ) { new_arr [ k ] = arr [ i ] ; k ++ ; i ++ ; } else { new_arr [ k ] = arr [ j ] ; k ++ ; j -- ; } } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = new_arr [ i ] ; } }
void printDistance ( int mat [ ] [ N ] ) { int ans [ N ] [ M ] ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < M ; j ++ ) ans [ i ] [ j ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int l = 0 ; l < M ; l ++ ) { if ( mat [ k ] [ l ] == 1 ) ans [ i ] [ j ] = min ( ans [ i ] [ j ] , abs ( i - k ) + abs ( j - l ) ) ; } } } for ( int i = 0 ; i < N ; i ++ ) cout << ans [ i ] [ j ] << " ▁ ▁ " ; cout << endl ; }
int findLastIndex ( string str , int x ) { int index = - 1 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) if ( str [ i ] == x ) index = i ; return index ; }
void printAllAPTriplets ( int arr [ ] , int n ) { string s [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int diff = arr [ j ] - arr [ i ] ; if ( ( arr [ i ] - diff ) in arr ) cout << " { } ▁ { } ▁ " << ( arr [ i ] - diff ) << " ▁ " << ( arr [ j ] - diff ) << " \n " ; } s . push ( arr [ i ] ) ; }
void simplify ( string str ) { int Len = str . length ( ) ; void * res = new void ( Len ) ; int index = 0 ; vector < char > s ; for ( int i = 0 ; i < Len ; i ++ ) { if ( s [ - 1 ] == 1 ) res [ index ] = ' - ' ; index ++ ; } else if ( str [ i ] == ' + ' ) { if ( s [ - 1 ] == 1 ) res [ index ] = ' + ' ; index ++ ; } else if ( str [ i ] == ' - ' ) { res [ index ] = ' - ' ; index ++ ; } else if ( str [ i ] == ' ( ' && i > 0 ) { if ( str [ i - 1 ] == ' - ' ) s . push ( s [ - 1 ] ) ; else if ( str [ i ] == ' + ' ) { s . pop ( ) ; } else { res [ index ] = str [ i ] ; index ++ ; } } } return res ; }
int vol_of_dodecahedron ( int side ) { return ( ( 15 + ( 7 * ( std :: sqrt ( 5 ) ) ) / 4 ) * ( std :: pow ( side , 3 ) ) ; }
int countTransformation ( int a [ ] , int b [ ] ) { int n = strlen ( a ) , m = strlen ( b ) ; if ( m == 0 ) return 1 ; int dp [ m ] [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int j = 0 ; j < n ; j ++ ) dp [ 0 ] [ j ] = 0 ; for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == b [ i ] ) dp [ i ] [ j ] = 1 ; else dp [ i ] [ j ] = 0 ; } } return dp [ m - 1 ] [ n - 1 ] ; }
int sumAtKthLevel ( int tree [ ] , int k , int i , int level ) { if ( tree [ i [ 0 ] ] == ' ( ' ) return 0 ; if ( tree [ i [ 0 ] ] == ' ) ' i [ 0 ] ++ ; int sum = 0 ; if ( level == k ) { sum = int ( tree [ i [ 0 ] ] ) ; i [ 0 ] ++ ; return sum ; } int leftsum = sumAtKthLevel ( tree , k , i , level + 1 ) ; i [ 0 ] ++ ; int rightsum = sumAtKthLevel ( tree , k , i , level + 1 ) ; i [ 0 ] ++ ; return sum + leftsum + rightsum ; }
void printRepeating ( int arr [ ] , int size ) { int count [ size ] ; cout << " ▁ Repeating ▁ elements ▁ are ▁ " << endl ; for ( int i = 0 ; i < size ; i ++ ) { if ( count [ arr [ i ] ] == 1 ) cout << arr [ i ] << " ▁ " ; else count [ arr [ i ] ] ++ ; } }
int countPairsWithDiffK ( int arr [ ] , int n , int k ) { int count = 0 ; sort ( arr , arr + n ) ; int l = 0 , r = 0 ; while ( r < n ) { if ( arr [ r ] - arr [ l ] == k ) count ++ ; l ++ ; r ++ ; } else if ( arr [ r ] - arr [ l ] > k ) l ++ ; else r ++ ; } return count ; }
bool isSubsetSum ( int set [ ] , int n , int sum ) { bool subset [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) subset [ i ] [ 0 ] = true ; for ( int i = 1 ; i <= sum ; i ++ ) subset [ 0 ] [ i ] = false ; for ( int i = 1 ; i <= n ; i ++ ) for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j <= sum ; j ++ ) { if ( j < set [ i - 1 ] ) subset [ i ] [ j ] = subset [ i - 1 ] [ j ] ; if ( j >= set [ i - 1 ] ) subset [ i ] [ j ] = subset [ i - 1 ] [ j - set [ i - 1 ] ] ; } } return subset [ n ] [ sum ] ; }
void findMajority ( int arr [ ] , int size ) { map < int , int > m ; for ( int i = 0 ; i < size ; i ++ ) m [ arr [ i ] ] ++ ; int count = 0 ; for ( int key = 0 ; key < m . size ( ) ; key ++ ) { if ( m [ key ] > size / 2 ) count ++ ; if ( count == 0 ) cout << " No ▁ Majority ▁ element " << key << endl ; } else if ( count == 0 ) cout << " No ▁ Majority ▁ element " << endl ; }
int knapSack ( int W , int wt , int val [ ] , int n ) { if ( n == 0 || W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else { return val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) ; } }
void replaceOriginal ( char s [ ] , int n ) { char r [ n ] ; for ( int i = 0 ; i < n ; i ++ ) r [ i ] = s [ n - 1 - i ] ; if ( s [ i ] != ' a ' && s [ i ] != ' e ' && s [ i ] != ' i ' && s [ i ] != ' o ' && s [ i ] != ' u ' ) cout << r [ i ] << " ▁ " ; else cout << endl ; }
void findPair ( int arr [ ] , int n ) { map < int , int > s ; bool found = false ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] + arr [ j ] in s . keys ( ) ) cout << arr [ i ] << arr [ j ] << " \n " ; found = true ; } } if ( found == false ) cout << " Not ▁ exist " ; }
int countNonEmptySubstr ( string str ) { int n = str . length ( ) ; return n * ( n + 1 ) / 2 ; }
int countDigits ( int a , int b ) { int count = 0 ; int p = abs ( a * b ) ; if ( p == 0 ) return 1 ; while ( p > 0 ) { count ++ ; p = p / 10 ; } return count ; }
int maxProfit ( int price [ ] , int n ) { int profit [ n ] ; int max_price = price [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) profit [ i ] = INT_MIN ; for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( price [ i ] > max_price ) max_price = price [ i ] ; profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - max_price ) ) ; } int min_price = price [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) ) ; } int result = profit [ n - 1 ] ; return result ; }
int countDer ( int n ) { int der [ n + 1 ] ; der [ 0 ] = 1 , der [ 1 ] = 0 , der [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] ) ; return der [ n ] ; }
int findMaxPath ( int mat [ M ] [ N ] ) { int res = - 1 ; for ( int i = 0 ; i < M ; i ++ ) res = max ( res , mat [ 0 ] [ i ] ) ; for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , max ( mat [ i - 1 ] [ j + 1 ] ) ) ; else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) ) ; else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] ) ; res = max ( mat [ i ] [ j ] , res ) ; } } return res ; }
bool checkIsAP ( int arr [ ] , int n ) { if ( n == 1 ) return true ; sort ( arr , arr + n ) ; int d = arr [ 1 ] - arr [ 0 ] ; for ( int i = 2 ; i < n ; i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; return true ; }
bool check ( char str [ ] ) { int n = str . length ( ) ; int oddDigSum = 0 , evenDigSum = 0 ; for ( int i = 0 ; str [ i ] != ' \0' ; i ++ ) { if ( i % 2 == 0 ) oddDigSum = oddDigSum + ( ( int ) ( str [ i ] ) ) ; else evenDigSum = evenDigSum + ( ( int ) ( str [ i ] ) ) ; } return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ; }
void swap ( int xp [ ] , int yp [ ] ) { xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ; }
float find_Area ( float r ) { return ( 2 * r * r ) ; }
int isLucky ( int n ) { int ar [ 10 ] ; while ( n > 0 ) { int digit = n % 10 ; if ( ar [ digit ] ) return 0 ; ar [ digit ] = 1 ; n = n / 10 ; } return 1 ; }
void countWaysToJump ( int arr [ ] , int n ) { int count_jump [ n ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) count_jump [ i ] = 0 ; for ( int i = 0 ; i < n - 2 ; i -- ) { if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ; int j ; for ( j = i + 1 ; j < n - 1 && j <= arr [ i ] + i ) { if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ] ; } j ++ ; if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ; } }
void zodiac_sign ( int day , int month ) { if ( month == ' december ' ) astro_sign = ' Sagittarius ' if ( day < 22 ) else ' capricorn ' ; else if ( month == ' january ' ) astro_sign = ' Aquarius ' if ( day < 19 ) else ' pisces ' ; else if ( month == ' february ' ) astro_sign = ' Aquarius ' if ( day < 21 ) else ' aries ' ; else if ( month == ' march ' ) astro_sign = ' Aquarius ' if ( day < 20 ) else ' aries ' ; else if ( month == ' june ' ) astro_sign = ' Gemini ' if ( day < 21 ) else ' cancer ' ; else if ( month == ' august ' ) astro_sign = ' Leo ' if ( day < 23 ) else ' libra ' ; else if ( month == ' october ' ) astro_sign = ' Libra ' if ( day < 23 ) else ' scorpio ' ; else if ( month == ' november ' ) astro_sign = ' scorpio ' if ( day < 22 ) else ' sagittarius ' ; else if ( month == ' november ' ) astro_sign = ' scorpio ' if ( day < 22 ) else ' sagittarius ' ; } cout << astro_sign << ' \n ' ; }
int countSol ( int coeff [ ] , int n , int rhs ) { int dp [ rhs + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) dp [ i ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = coeff [ i ] ; j <= rhs ; j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ; return dp [ rhs ] ; }
bool isSymmetric ( int mat [ MAX ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false ; } return true ; }
bool isRectangle ( bool m [ ROW ] [ COL ] ) { int rows = m [ ROW ] [ COL ] ; if ( rows == 0 ) return false ; int columns = m [ 0 ] [ COL ] ; for ( int y1 = 0 ; y1 < rows ; y1 ++ ) { for ( int x1 = 0 ; x1 < columns ; x1 ++ ) { if ( m [ y1 ] [ x1 ] == 1 ) { for ( int y2 = y1 + 1 ; y2 < rows ; y2 ++ ) { if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true ; } } } return false ; }
bool isDivBy9 ( int n ) { if ( n == 0 || n == 9 ) return true ; if ( n < 9 ) return false ; return isDivBy9 ( n >> 3 ) - ( int ) ( n & 7 ) ; }
int knapSack ( int W , int wt , int val [ ] , int n ) { if ( n == 0 || W == 0 ) return 0 ; if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n - 1 ) ; else { return val [ n - 1 ] + knapSack ( W - wt [ n - 1 ] , wt , val , n - 1 ) ; } }
void printRepeating ( int arr [ ] , int size ) { int xor = arr [ 0 ] ; int n = size - 2 ; int x = 0 , y = 0 ; for ( int i = 1 ; i < n ; i ++ ) xor ^= arr [ i ] ; int set_bit_no = xor & ~ ( xor - 1 ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( i & set_bit_no ) y = y ^ i ; } } cout << " The ▁ two ▁ repeating " << " elements ▁ are ▁ " << y << x ; }
int findSubsequenceCount ( char * S , char * T ) { int m = strlen ( S ) , n = strlen ( T ) ; if ( m > n ) return 0 ; int mat [ m + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= m ; i ++ ) mat [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j <= n ; j ++ ) mat [ 0 ] [ j ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( T [ i - 1 ] != S [ j - 1 ] ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ] ; else mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] ) ; } } return mat [ m ] [ n ] ; }
int breakSum ( int n ) { int dp [ n + 1 ] ; dp [ 0 ] = 0 , dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i / 3 ) ] + dp [ int ( i / 4 ) ] , i ) ; return dp [ n ] ; }
void decToHexa ( int n ) { char hexaDeciNum [ 100 ] ; int i = 0 ; while ( n != 0 ) { int temp = n % 16 ; if ( temp < 10 ) hexaDeciNum [ i ] = '0' ; i ++ ; else { hexaDeciNum [ i ] = ' ' ; i ++ ; } n = n / 16 ; } int j = i - 1 ; while ( j >= 0 ) { cout << ( hexaDeciNum [ j ] ) ; j -- ; } }
int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( ( ~ a & 1 ) == 1 ) return gcd ( a >> 1 , b ) ; if ( ( ~ b & 1 ) == 1 ) return gcd ( a , b >> 1 ) ; if ( ( ~ a & 1 ) == 1 ) return gcd ( a , b >> 1 ) ; if ( ( ~ b & 1 ) == 1 ) return gcd ( a , b >> 1 ) ; if ( ( a & 1 ) == 1 ) return gcd ( a >> 1 , b >> 1 ) << 1 ; if ( ( ~ a & 1 ) == 1 ) return gcd ( a , b >> 1 ) ; if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ; return gcd ( ( b - a ) >> 1 , a ) ; }
bool oppositeSigns ( int x , int y ) { return ( ( x ^ y ) < 0 ) ; }
bool arraySortedOrNot ( int arr [ ] , int n ) { if ( n == 0 || n == 1 ) return true ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ; return true ; }
string strToBinary ( string s ) { int bin_conv [ ] ; for ( char c = 0 ; c < s . length ( ) ; c ++ ) { int ascii_val = c ; int binary_val = bin ( ascii_val ) ; bin_conv . push ( binary_val [ 2 : ] ) ; } return ( ' ▁ ' . join ( bin_conv ) ) ; }
void evaluate ( int n ) { if ( n == 1 || n == 2 ) cout << " No ▁ Pythagoras ▁ Triplet ▁ exists " << endl ; else if ( n % 2 == 0 ) { var = n * n / 4 ; cout << " Pythagoras ▁ Triplets ▁ " << " ▁ exist ▁ i . e . ▁ " << endl ; cout << int ( n ) << " ▁ " << int ( var - 1 ) << " ▁ " << int ( var + 1 ) << endl ; } else if ( n % 2 != 0 ) { var = n * n + 1 ; cout << " Pythagoras ▁ Triplets ▁ " << " exist ▁ i . e . ▁ " << endl ; cout << int ( n ) << " ▁ " << int ( var / 2 - 1 ) << " ▁ " << int ( var / 2 ) << endl ; } }
bool isOverflow ( int a , int b ) { if ( a == 0 || b == 0 ) return false ; int result = ( a * b ) ; if ( result >= 9223372036854775807 || result <= - 9223372036854775808 ) result = 0 ; if ( a == ( result / b ) ) return false ; else return true ; }
bool findDuplicateparenthesis ( string str ) { stack < char > Stack ; for ( char ch = 0 ; ch < str . length ( ) ; ++ ch ) { if ( ch == ' ) ' { int top = Stack . top ( ) ; int elementsInside = 0 ; while ( top != ' ( ' ) elementsInside ++ ; top = Stack . pop ( ) ; if ( elementsInside < 1 ) return true ; else Stack . push ( ch ) ; } } return false ; }
int countRotations ( char n [ ] ) { int l = n . length ( ) ; if ( l == 1 ) return 1 ; int oneDigit = n [ 0 ] ; if ( oneDigit % 4 == 0 ) return 0 ; int count = 0 ; for ( int i = 1 ; i < l - 1 ; i ++ ) { int twoDigit = ( int ) ( n [ i ] ) * 10 + ( int ) ( n [ i + 1 ] ) ; if ( twoDigit % 4 == 0 ) count ++ ; } int twoDigit = ( int ) ( n [ l - 1 ] ) * 10 + ( int ) ( n [ 0 ] ) ; if ( twoDigit % 4 == 0 ) count = count + 1 ; } return count ; }
void findTriplets ( int x ) { int fact [ ] ; unordered_set < int > factors ; for ( int i = 2 ; i <= sqrt ( x ) ; i ++ ) fact . push ( i ) ; if ( x % i == 0 ) fact . push ( i ) ; if ( x / i != i ) fact . push ( x / i ) ; factors . add ( i ) ; } bool found = false ; for ( int i = 0 ; i < k ; i ++ ) { int b = fact [ i ] ; if ( a != b ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) cout << a << b << x / ( a * b ) ; found = true ; break ; } if ( ! found ) cout << " - 1 " ; }
void findCombinations ( string str [ ] , int index , string out ) { if ( index == 0 ) cout << str << ' \n ' ; for ( int i = 0 ; i < ( index + 1 ) ; i ++ ) findCombinations ( str , i + 1 , out + " ( " + str [ index : i + 1 ] + " ) " ; }
int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i <= n - 1 ; i ++ ) if ( arr [ i ] == x ) return i ; return - 1 ; }
void findMissing ( char a [ ] , char b [ ] , int n , int m ) { map < char , int > s ; for ( int i = 0 ; i < m ; i ++ ) s [ b [ i ] ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] not in s . keys ( ) ) cout << a [ i ] << " ▁ " ; } }
int countPairs ( string & str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j <= MAX_CHAR ; j ++ ) { if ( ( i + j ) < n ) { if ( ( abs ( str [ i + j ] ) - str [ i ] ) == j ) result ++ ; } } return result ; }
int maxSum ( int stack1 [ ] , int stack2 [ ] , int stack3 [ ] , int n1 , int n2 , int n3 ) { int sum1 = 0 , sum2 = 0 , sum3 = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) sum1 += stack1 [ i ] ; for ( int i = 0 ; i < n2 ; i ++ ) sum2 += stack2 [ i ] ; for ( int i = 0 ; i < n3 ; i ++ ) sum3 += stack3 [ i ] ; int top1 , top2 , top3 ; int ans = 0 ; while ( 1 ) { if ( sum1 == sum2 && sum2 == sum3 ) return sum1 ; if ( sum3 >= sum2 && sum3 >= sum1 ) sum3 -= stack3 [ top3 ] ; top3 = top3 + 1 ; } } while ( 1 ) { if ( sum1 >= sum2 && sum1 >= sum3 ) sum1 -= stack1 [ top1 ] ; top1 = top1 + 1 ; } else if ( sum3 >= sum2 && sum3 >= sum1 ) sum3 -= stack3 [ top3 ] ; top3 = top3 + 1 ; } }
int solve ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ; else b = b * 10 + arr [ i ] ; } return a + b ; }
int firstFactorialDivisibleNumber ( int x ) { int i = 1 , fact = 1 ; for ( i = 1 ; i <= x ; i ++ ) { fact = fact * i ; if ( fact % x == 0 ) break ; } return i ; }
int countMinOperations ( int target [ ] , int n ) { int result = 0 ; while ( true ) { int zero_count = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ( target [ i ] & 1 ) > 0 ) break ; if ( target [ i ] == 0 ) ++ zero_count ; if ( zero_count == n ) return result ; if ( i == n ) { for ( int j = 0 ; j < n ; ++ j ) { target [ j ] = target [ j ] / 2 ; result ++ ; } } } if ( result == 0 ) return result ; for ( int j = i ; j < n ; ++ j ) { if ( target [ j ] & 1 ) target [ j ] -= 1 ; result ++ ; } }
void sortit ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = i + 1 ; }
bool canMakeAllSame ( string str ) { int zeros = 0 , ones = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str [ i ] ; if ( ch == '0' ) zeros ++ ; else ones ++ ; } return ( zeros == 1 || ones == 1 ) ; }
void minheapify ( int a [ ] , int index ) { int small = index ; int l = 2 * index + 1 ; int r = 2 * index + 2 ; if ( l < n && a [ l ] < a [ small ] ) small = l ; if ( r < n && a [ r ] < a [ small ] ) small = r ; if ( l < n && a [ l ] < a [ small ] ) small = l ; if ( r < n && a [ r ] < a [ small ] ) small = r ; if ( a [ l ] < a [ small ] ) small = r ; minheapify ( a , small ) ; }
void KMP ( int m , int n , char str [ ] , char str [ ] ) { int i , j , k ; int p [ m + 1 ] ; for ( i = 2 ; i <= n ; i ++ ) p [ i ] = 0 ; for ( k = 0 ; k <= m ; k ++ ) { if ( str1 [ k ] != str [ i - 1 ] ) k ++ ; if ( str1 [ k ] == str [ i - 1 ] ) k ++ ; if ( str1 [ k ] == str [ i - 1 ] ) k ++ ; p [ i ] = k ; } } for ( i = 0 ; i < m ; i ++ ) { while ( j > 0 && j < n && str1 [ j ] != str2 [ i ] ) { j ++ ; if ( j > Len ) { Len = j ; pos = i - j + 1 ; } } cout << " Shift ▁ = ▁ " << pos << " Prefix ▁ = ▁ " << str1 [ : Len ] << " \n " ; }
void swapDiagonal ( int matrix [ ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \ EMPTY ; } }
void psuedoBinary ( int n ) { while ( n > 0 ) { int temp = n ; int m = 0 , p = 1 ; while ( temp ) { int rem = temp % 10 ; temp = temp / 10 ; if ( rem != 0 ) m += p ; p *= 10 ; } cout << m << " ▁ " ; n = n - m ; } }
int findmin ( int p [ ] [ MAX ] , int n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] [ 0 ] <= 0 ) a ++ ; if ( p [ i ] [ 0 ] >= 0 ) b ++ ; if ( p [ i ] [ 1 ] >= 0 ) c ++ ; else if ( p [ i ] [ 1 ] <= 0 ) d ++ ; } return min ( [ a , b , c , d ] ) ; }
int minCoins ( int coins [ ] , int m , int V ) { int table [ V + 1 ] ; table [ 0 ] = 0 ; for ( int i = 1 ; i <= V ; i ++ ) table [ i ] = INT_MAX ; for ( int i = 1 ; i <= V ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( coins [ j ] <= i ) { int sub_res = table [ i - coins [ j ] ] ; if ( sub_res != sys . maxsize && sub_res + 1 < table [ i ] ) table [ i ] = sub_res + 1 ; } } } return table [ V ] ; }
string maximumPalinUsingKChanges ( string str , int k ) { string palin [ MAX ] ; int l , r ; for ( l = 0 ; l <= r ; l ++ ) { if ( str [ l ] != str [ r ] ) { palin [ l ] = palin [ r ] = max ( str [ l ] , str [ r ] ) ; k -- ; } l = 0 ; r = str . length ( ) - 1 ; while ( l <= r ) { if ( k > 0 ) { palin [ l ] = '9' ; } if ( palin [ l ] < '9' ) { if ( k >= 2 && palin [ l ] == str [ l ] && palin [ r ] == str [ r ] ) { k -- ; palin [ l ] = palin [ r ] = '9' ; } else if ( k >= 1 && palin [ l ] != str [ l ] || palin [ r ] != str [ r ] ) { k -- ; palin [ l ] = palin [ r ] = '9' ; } } } return palin ; }
int findMinRooms ( char slots [ ] [ MAX ] , int n , int m ) { int counts [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) if ( slots [ i ] [ j ] == '1' ) counts [ j ] ++ ; } return max ( counts ) ; }
void printMaxSum ( int arr [ ] , int n ) { int dp [ n ] ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] = arr [ i ] ; int maxi = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= ( i + 1 ) ** 0.5 ; j ++ ) { if ( ( i + 1 ) % j == 0 && ( i + 1 ) != j ) { if ( dp [ j - 1 ] > maxi ) maxi = dp [ j - 1 ] ; if ( dp [ ( i + 1 ) / j - 1 ] > maxi && j != 1 ) maxi = dp [ ( i + 1 ) / j - 1 ] ; } } dp [ i ] += maxi ; }
int maxAlternateSum ( int arr [ ] , int n ) { if ( n == 1 ) return arr [ 0 ] ; int dec [ n + 1 ] ; int inc [ n + 1 ] ; int result ; for ( int i = 1 ; i <= n ; i ++ ) inc [ i ] = arr [ 0 ] ; int flag = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] > arr [ i ] ) { dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] ) ; flag = 1 ; } else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] ) ; } } result = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { if ( result < inc [ i ] ) result = inc [ i ] ; if ( result < dec [ i ] ) result = dec [ i ] ; } return result ; }
void printRepeating ( int arr [ ] , int size ) { cout << " Repeating ▁ elements ▁ are ▁ " << endl ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = i + 1 ; j < size ; j ++ ) if ( arr [ i ] == arr [ j ] ) cout << arr [ i ] << ' ▁ ' ; } }
int minProduct ( int arr [ ] , int n , int k ) { heap < int > heap ; int count = 0 ; int ans = 1 ; while ( arr . size ( ) && count < k ) { int x = heapq . front ( arr ) ; ans = ans * x ; count ++ ; } return ans ; }
int largest ( int arr [ ] , int n ) { return max ( arr , n ) ; }
void exponential ( int n , double x ) { double sum = 1.0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) sum = 1 + x * sum / i ; cout << " e ^ x ▁ = ▁ " << sum ; }
int firstElement ( int arr [ ] , int n , int k ) { unordered_map < int , int > count_map ; for ( int i = 0 ; i < n ; i ++ ) count_map [ arr [ i ] ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( count_map [ arr [ i ] ] == k ) count_map [ arr [ i ] ] ++ ; else count_map [ arr [ i ] ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { if ( count_map [ arr [ i ] ] == k ) return arr [ i ] ; } return - 1 ; }
int maxProd ( int n ) { if ( n == 2 || n == 3 ) return n - 1 ; int res = 1 ; while ( n > 4 ) n -- ; res *= 3 ; return ( n * res ) ; }
int maxSum ( int grid [ ] [ MAX ] , int n ) { int incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] ) ; int excl = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int excl_new = max ( excl , incl ) ; incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] ) ; excl = excl_new ; } return max ( excl , incl ) ; }
int countRotations ( int * arr , int low , int high ) { if ( high < low ) return 0 ; if ( high == low ) { printf ( " The ▁ required ▁ element ▁ is ▁ % d ▁ " , arr [ low ] ) ; return low ; } int mid = ( low + high ) / 2 ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return mid + 1 ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ; if ( arr [ high ] > arr [ mid ] ) countRotations ( arr , low , mid - 1 ) ; return countRotations ( arr , mid + 1 , high ) ; }
int findSum ( int n ) { int ans = 0 ; int temp = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( temp < n ) { temp ++ ; num = 1 ; while ( temp < n ) { if ( temp + i <= n ) ans += ( n - temp ) * num ; else temp ++ ; num ++ ; } } return ans ; }
bool checkCorrectOrNot ( string s ) { int count1 [ MAX_CHAR ] = { 0 } , count2 [ MAX_CHAR ] = { 0 } ; int n = s . length ( ) ; if ( n == 1 ) return true ; for ( int i = 0 , j = n - 1 ; i < j ; i ++ , j -- ) { count1 [ s [ i ] - ' a ' ] ++ ; count2 [ s [ j ] - ' a ' ] ++ ; } for ( int i = 0 ; i < MAX_CHAR && count1 [ i ] != count2 [ i ] ; i ++ ) return false ; } return true ; }
int divSum ( int n ) { int result = 0 ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) result = result + i ; else result = result + ( i + n / i ) ; } } return ( result + n + 1 ) ; }
void rotateMatrix ( int mat [ ] [ N ] ) { int i = N - 1 ; while ( i >= 0 ) { int j ; for ( j = N - 1 ; j >= 0 ; j -- ) { cout << mat [ i ] [ j ] << " ▁ " ; i = i - 1 ; } cout << endl ; } }
void printSpiral ( int mat [ R ] [ C ] , int r , int c ) { int i ; int a = 0 , b = 2 ; int low_row = 0 , low_column = 0 ; int high_row = r - 1 ; int high_column = c - 1 if ( ( a + 1 ) >= r ) else a + 1 ; while ( ( low_row > 0 - r && low_column > 0 - c ) ) { i = low_column + 1 ; while ( i <= high_row && i < c ) { cout << mat [ low_row ] [ i ] << " ▁ " ; i ++ ; } low_row -- ; i = low_row + 2 ; while ( i >= low_column && i >= 0 && high_row < r ) { cout << mat [ i ] [ high_column ] << " ▁ " ; i -- ; } high_row ++ ; i = high_row - 2 ; while ( i > low_row && i >= 0 && low_column >= 0 ) { cout << mat [ i ] [ low_column ] << " ▁ " ; i -- ; } low_column -- ; } cout << endl ; }
int countSeq ( int n ) { int nCr = 1 ; int res = 1 ; for ( int r = 1 ; r <= n ; r ++ ) nCr = ( nCr * ( n + 1 - r ) ) / r ; res += nCr * nCr ; return res ; }
int areaOctagon ( int side ) { return ( 2 * ( 1 + ( sqrt ( 2 ) ) ) * side * side ) ; }
int findLongestConseqSubseq ( int arr [ ] , int n ) { unordered_set < int > S ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) S . insert ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int i = 0 ; i < n ; i ++ ) { if ( S . find ( arr [ i ] ) != S . end ( ) ) { int j = arr [ i ] ; while ( S . find ( j ) != S . end ( ) ) j ++ ; ans = max ( ans , j - arr [ i ] ) ; } } return ans ; }
void printSuperSeq ( string a [ ] , string b [ ] ) { int m = strlen ( a ) , n = strlen ( b ) ; int dp [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) dp [ i ] [ 0 ] = i ; for ( int j = 0 ; j <= n ; j ++ ) dp [ 0 ] [ j ] = j ; for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( a [ i - 1 ] == b [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } int index = dp [ m ] [ n ] ; while ( i > 0 && j > 0 ) { if ( a [ i - 1 ] == b [ j - 1 ] ) res [ index - 1 ] = a [ i - 1 ] ; i -- ; index -- ; } else { res [ index - 1 ] = b [ j - 1 ] ; index -- ; } } while ( i > 0 ) { res [ index - 1 ] = a [ i - 1 ] ; i -- ; index -- ; } }
int numberOfPaths ( int p , int q ) { int dp [ q ] ; for ( int i = 0 ; i < p - 1 ; i ++ ) dp [ i ] = 1 ; for ( int i = 0 ; i < q ; i ++ ) for ( int j = 1 ; j < q ; j ++ ) dp [ j ] += dp [ j - 1 ] ; return dp [ q - 1 ] ; }
bool isPowerOfFour ( int n ) { int count = 0 ; if ( n && ( ! ( n & ( n - 1 ) ) ) { while ( n > 1 ) ) n >>= 1 ; count ++ ; if ( count % 2 == 0 ) return true ; else return false ; } }
int sumofoddFactors ( int n ) { int res = 1 ; while ( n % 2 == 0 ) n = n / 2 ; for ( int i = 3 ; i <= 9 ; i ++ ) { int count = 0 ; int curr_sum = 1 ; int curr_term = 1 ; while ( n % i == 0 ) count ++ ; n = n / i ; curr_sum += curr_term ; res *= curr_sum ; } if ( n >= 2 ) res *= ( 1 + n ) ; return res ; }
int findElement ( int arr [ ] , int n ) { int leftMax [ n ] ; leftMax [ 0 ] = ' - inf ' ; for ( int i = 1 ; i < n ; i ++ ) leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 ] ) ; int rightMin = float ( ' inf ' ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( leftMax [ i ] < arr [ i ] && rightMin > arr [ i ] ) return i ; rightMin = min ( rightMin , arr [ i ] ) ; } return - 1 ; }
int search ( int * arr , int l , int h , int key ) { if ( l > h ) return - 1 ; int mid = ( l + h ) / 2 ; if ( arr [ mid ] == key ) return mid ; if ( arr [ l ] <= arr [ mid ] ) { if ( key >= arr [ l ] && key <= arr [ mid ] ) search ( arr , l , mid - 1 , key ) ; return search ( arr , mid + 1 , h , key ) ; } if ( key >= arr [ mid ] && key <= arr [ h ] ) search ( a , mid + 1 , h , key ) ; return search ( arr , l , mid - 1 , key ) ; }
int exponentiation ( int bas , int exp ) { if ( exp == 0 ) return 1 ; if ( exp == 1 ) return bas % N ; int t = exponentiation ( bas , int ( exp / 2 ) ) ; t = ( t * t ) % N ; if ( exp % 2 == 0 ) return t ; else return ( ( bas % N ) * t ) % N ; }
void divisibilityCheck ( int arr [ ] , int n ) { map < int , int > s ; int max_ele = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) s [ arr [ i ] ] = 1 ; max_ele = max ( max_ele , arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 0 ) { for ( int j = arr [ i ] * 2 ; j < max_ele + 1 ; j ++ ) if ( s [ j ] == 1 ) res [ j ] = 1 ; } } } for ( int x = 0 ; x < res . size ( ) ; x ++ ) cout << x << " ▁ " ; }
void printRepeating ( int arr [ ] , int size ) { cout << " ▁ The ▁ repeating ▁ elements ▁ are ▁ " << endl ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ abs ( arr [ i ] ) ] > 0 ) arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( arr [ i ] ) ; else cout << abs ( arr [ i ] ) << " ▁ " ; } }
int minPalPartion ( char * str ) { int n = strlen ( str ) ; int C [ n ] ; bool P [ n ] [ n ] ; int i , j , k , L ; for ( i = 0 ; i < n ; i ++ ) { P [ i ] [ i ] = true ; C [ i ] [ i ] = 0 ; } for ( L = 2 ; L <= n ; L ++ ) { for ( i = 0 ; i < n - L + 1 ; i ++ ) { j = i + L - 1 ; if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] ) ; else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ] ; } } return C [ 0 ] [ n - 1 ] ; }
int height ( int n ) { return ceil ( log2 ( n + 1 ) ) - 1 ; }
bool checkCount ( int arr [ ] , int n , int k ) { map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; for ( int key = 0 ; key < n ; key ++ ) { int values = mp [ key ] ; if ( values > 2 * k ) return false ; } return true ; }
string removeDuplicates ( string S ) { int n = S . length ( ) ; if ( n < 2 ) return S ; int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( S [ j ] != S [ i ] ) j ++ ; S [ j ] = S [ i ] ; } j ++ ; S = S [ : j ] ; }
void thirdLargest ( int arr [ ] , int arr_size ) { if ( arr_size < 3 ) cout << " ▁ Invalid ▁ Input ▁ " << endl ; int first = arr [ 0 ] ; int second = - sys . maxsize ; int third = - sys . maxsize ; for ( int i = 1 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { third = second ; second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) { third = second ; second = arr [ i ] ; } else if ( arr [ i ] > third ) third = arr [ i ] ; } cout << " The ▁ third ▁ Largest " << " element ▁ is ▁ " << third << endl ; }
int longOddEvenIncSeq ( int arr [ ] , int n ) { int lioes [ n ] ; int maxLen = 0 ; for ( int i = 1 ; i < n ; i ++ ) lioes . push_back ( 1 ) ; maxLen = 0 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( arr [ i ] + arr [ j ] ) % 2 != 0 && lioes [ i ] < lioes [ j ] + 1 ) ) lioes [ i ] = lioes [ j ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( maxLen < lioes [ i ] ) maxLen = lioes [ i ] ; } } return maxLen ; }
int addOne ( int x ) { return ( - ( ~ x ) ) ; }
int getNumStrictMonotone ( int ln ) { int DP [ DP_s ] [ ln ] ; memset ( DP , 0 , sizeof DP ) ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ 0 ] [ i ] = i + 1 ; for ( int i = 1 ; i < ln ; i ++ ) DP [ 0 ] [ i ] = i + 1 ; for ( int i = 1 ; i < ln ; i ++ ) { for ( int j = 1 ; j < DP_s ; j ++ ) DP [ i ] [ j ] = DP [ i - 1 ] [ j - 1 ] + DP [ i ] [ j - 1 ] ; } } return DP [ ln - 1 ] [ DP_s - 1 ] ; }
int binarySearch ( int * arr , int l , int r , int x ) { if ( r >= l ) { int mid = ( l + r ) / 2 ; if ( arr [ mid ] == x ) return mid ; if ( mid > l && arr [ mid - 1 ] == x ) return mid - 1 ; if ( mid < r && arr [ mid + 1 ] == x ) return mid + 1 ; if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 2 , x ) ; return binarySearch ( arr , mid + 2 , r , x ) ; } return - 1 ; }
void bresenham ( int x1 , int y1 , int x2 , int y2 ) { int m_new = 2 * ( y2 - y1 ) ; int slope_error_new = m_new - ( x2 - x1 ) ; int y = y1 ; for ( int x = x1 ; x <= x2 ; x ++ ) { cout << " ( " << x << " , " << y << " ) \n " ; if ( slope_error_new >= 0 ) { y ++ ; slope_error_new = slope_error_new - 2 * ( x2 - x1 ) ; } } }
int maxRevenue ( int m , int x [ ] , int revenue [ ] , int n , int t ) { int maxRev [ m + 1 ] ; int nxtbb ; for ( int i = 1 ; i <= m ; i ++ ) { if ( x [ nxtbb ] != i ) { maxRev [ i ] = maxRev [ i - 1 ] ; } else { if ( i <= t ) { maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] ) ; } else { maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ; } nxtbb ++ ; } } return maxRev [ m ] ; }
void lineFromPoints ( int P [ ] , int Q [ ] ) { int a = P [ 1 ] - P [ 1 ] ; int b = Q [ 0 ] - Q [ 0 ] ; int c = a * ( P [ 0 ] ) + b * ( P [ 1 ] ) ; if ( b < 0 ) cout << " The ▁ line ▁ passing ▁ through ▁ points ▁ P ▁ Q ▁ is : ▁ " << a << " x ▁ " << b << " y ▁ = ▁ " << c << " \n " ; else { cout << " The ▁ line ▁ passing ▁ through ▁ points ▁ P ▁ and ▁ Q ▁ is : ▁ " << a << " x ▁ " << b << " y ▁ = ▁ " << c << " \n " ; } }
int findMinX ( int num [ ] , int rem [ ] , int k ) { int x = 1 ; while ( true ) { int j ; for ( j = 0 ; j < k ; j ++ ) if ( x % num [ j ] != rem [ j ] ) break ; if ( j == k ) return x ; x ++ ; } }
bool find3Numbers ( int A [ ] , int arr_size , int sum ) { for ( int i = 0 ; i < arr_size - 2 ; i ++ ) { for ( int j = i + 1 ; j < arr_size - 1 ; j ++ ) { for ( int k = j + 1 ; k < arr_size ; k ++ ) { if ( A [ i ] + A [ j ] + A [ k ] == sum ) { printf ( " Triplet ▁ is ▁ % d , ▁ % d , ▁ % d " , A [ i ] , A [ j ] , A [ k ] ) ; return true ; } } } return false ; }
void KMaxCombinations ( int A [ ] , int B [ ] , int N , int K ) { PriorityQueue < int > pq ; for ( int i = 0 ; i < N ; i ++ ) pq . push ( ( int ) A [ i ] + B [ j ] ) ; int count = 0 ; while ( count < K ) cout << pq . front ( ) << " ▁ " ; count ++ ; }
int numberOfSticks ( int x ) { return ( 3 * x * ( x + 1 ) ) / 2 ; }
int countSubstringWithEqualEnds ( string s ) { int result = 0 ; int n = s . length ( ) ; int count [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) count [ s [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) result += count [ i ] * ( count [ i ] + 1 ) / 2 ; return result ; }
bool isDivisibleBy7 ( int num ) { if ( num < 0 ) return isDivisibleBy7 ( - num ) ; if ( num == 0 || num == 7 ) return true ; if ( num < 10 ) return false ; return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 10 ) ) ; }
int findRepeatingNumber ( int * arr , int n ) { int sq = sqrt ( n ) ; int range__ = ( n / sq ) + 1 ; int count [ range__ ] ; for ( int i = 0 ; i <= n ; i ++ ) count [ i ] = 1 ; int selected_block = range__ - 1 ; for ( int i = 0 ; i <= range__ - 1 ; i ++ ) { if ( count [ i ] > sq ) selected_block = i ; break ; } int m [ arr [ i ] ] = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( m [ arr [ i ] ] > 1 ) return arr [ i ] ; } } return - 1 ; }
int findSDSFunc ( int n ) { int DP [ n + 1 ] ; DP [ 0 ] = 0 , DP [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) DP [ i ] = DP [ int ( i / 2 ) ] ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) DP [ i ] = DP [ int ( i / 2 ) ] ; else { DP [ i ] = DP [ int ( i - 1 ) / 2 ] + DP [ int ( i + 1 ) / 2 ] ; } } return DP [ n ] ; }
int recSearch ( int arr [ ] , int l , int r , int x ) { if ( r < l ) return - 1 ; if ( arr [ l ] == x ) return l ; if ( arr [ r ] == x ) return r ; return recSearch ( arr , l + 1 , r - 1 , x ) ; }
bool check ( char str [ ] ) { int n = str . length ( ) ; if ( n == 0 ) return false ; if ( n == 1 ) return ( str [ 0 ] - '0' ) % 4 == 0 ; int last = ( int ) ( str [ n - 1 ] ) ; int second_last = ( int ) ( str [ n - 2 ] ) ; return ( ( second_last * 10 + last ) % 4 == 0 ) ; }
string to_upper ( string str ) { for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( ' a ' <= str [ i ] <= ' z ' ) string = ( str [ 0 : i ] + str [ i + 1 ] ) ; } return str ; }
int remAnagram ( string str1 , string str2 ) { int count1 [ CHARS ] = { 0 } , count2 [ CHARS ] = { 0 } ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) count1 [ str1 [ i ] - ' a ' ] ++ ; int i = 0 ; while ( i < str2 . length ( ) ) count2 [ str2 [ i ] - ' a ' ] ++ ; int result = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) result += abs ( count1 [ i ] - count2 [ i ] ) ; return result ; }
void sortInWave ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i += 2 ) { if ( i > 0 && arr [ i ] < arr [ i - 1 ] ) arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] ; if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] ; } }
string getMinNumberForPattern ( string seq ) { int n = seq . length ( ) ; if ( n >= 9 ) return " - 1" ; int result [ n + 1 ] ; int count = 1 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( i == n || seq [ i ] == ' I ' ) { for ( int j = i - 1 ; j >= 0 && seq [ j ] == ' I ' ; j -- ) result [ j + 1 ] = ' 0' + str ( count ) ; count ++ ; if ( j >= 0 && seq [ j ] == ' I ' ) break ; } } return result ; }
bool isPossible ( string str , int n ) { int l = str . length ( ) ; if ( l >= n ) return true ; return false ; }
void center ( int x1 , int x2 , int y1 , int y2 ) { cout << ( int ) ( x1 + x2 ) / 2 ; cout << " , " << ( y1 + y2 ) / 2 ; cout << endl ; }
void findMin ( int V ) { int deno [ MAX ] ; int n = deno . size ( ) ; int ans [ n ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { while ( V >= deno [ i ] ) { V -= deno [ i ] ; ans . push ( deno [ i ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) cout << ans [ i ] << " ▁ ▁ " ; }
int mulmod ( int a , int b , int mod ) { int res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) res = ( res + a ) % mod ; a = ( a * 2 ) % mod ; b /= 2 ; } return res % mod ; }
string Dragon_Curve_Sequence ( int n ) { string s = "1" ; for ( int i = 2 ; i <= n ; i ++ ) { string temp = "1" ; int prev = '1' ; int zero = '0' ; int one = '1' ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { temp += s [ j ] ; if ( prev == '0' ) temp += one ; prev = one ; } s = temp ; } return s ; }
int minInitialPoints ( int points [ ] [ R ] ) { int dp [ R ] [ C ] ; int m , n ; for ( m = 0 ; m <= R ; m ++ ) { n = C ; if ( points [ m - 1 ] [ n - 1 ] > 0 ) dp [ m - 1 ] [ n - 1 ] = 1 ; else dp [ m - 1 ] [ n - 1 ] = abs ( points [ m - 1 ] [ n - 1 ] ) + 1 ; for ( i = 2 ; i >= m - 2 ; i -- ) { dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 ) ; } for ( i = 0 ; i <= m - 2 ; i -- ) { for ( j = n - 2 ; j >= 0 ; j -- ) { min_points_on_exit = min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] ) ; dp [ i ] [ j ] = max ( min_points_on_exit - points [ i ] [ j ] , 1 ) ; } } return dp [ 0 ] [ 0 ] ; }
int findRepeating ( int arr [ ] , int n ) { return sum ( arr ) - ( ( n - 1 ) * n ) / 2 ; }
char getSecondMostFreq ( string str ) { int NO_OF_CHARS = 256 ; int count [ NO_OF_CHARS ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) count [ str [ i ] ] ++ ; int first = 0 , second = 0 ; for ( int i = 0 ; i < NO_OF_CHARS ; i ++ ) { if ( count [ i ] > count [ first ] ) { second = first ; first = i ; } else if ( count [ i ] > count [ second ] && count [ i ] != count [ first ] ) second = i ; } } return str [ second ] ; }
string findSum ( string str1 , string str2 ) { if ( str1 . length ( ) > str2 . length ( ) ) { string t = str1 ; str1 = str2 ; str2 = t ; } int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; string str = " " ; int n1 = str1 . length ( ) ; int str2 = str2 [ : : - 1 ] ; int carry = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { int sum = ( ( str1 [ i ] - 48 ) + ( ( str2 [ i ] - 48 ) + carry ) ; str += chr ( sum % 10 + 48 ) ; carry = int ) ( sum / 10 ) ; } for ( int i = 0 ; i < n2 ; i ++ ) { sum = ( ( str2 [ i ] - 48 ) + carry ) ; str += chr ( sum % 10 + 48 ) ; carry = ( int ) ( sum / 10 ) ; if ( carry ) str += chr ( carry + 48 ) ; } return str ; }
void printNGE ( int arr [ ] ) { for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int next = - 1 ; for ( int j = i + 1 ; j < arr . size ( ) ; j ++ ) { if ( arr [ i ] < arr [ j ] ) next = arr [ j ] ; break ; } cout << str ( arr [ i ] ) + " ▁ ▁ " << next << endl ; } }
