Src: 
public List<Pair<String, Double>> customerExpensiveOrdersTotalMax() { List<Customer> customers = getCustomerList(); List<Pair<String, Double>> ordersTotalMax = customers.stream().map(c -> Pair.with(c.getCustomerId(), c.getOrders().stream().filter(o -> o.getTotal() > 100) .mapToDouble(o -> o.getTotal()).max().getAsDouble())).toList(); return ordersTotalMax; }
Ref: 
public List<Tuple<string, double>> CustomerExpensiveOrdersTotalMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMax = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Where(o => o.Total > 100).Max(o => o.Total))).ToList(); return ordersTotalMax; }
Hyp: 
public List<Tuple<string, double>> CustomerExpensiveOrdersTotalMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMax = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Where(o => o.Total > 100).Max(o => o.Total))).ToList(); return ordersTotalMax; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int projectedStringElementAt() { String[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int firstStringLength = Arrays.stream(strings).mapToInt(s -> s.length()) .filter(i -> i % 2 == 0).skip(2).findFirst().getAsInt(); return firstStringLength; }
Ref: 
public int ProjectedStringElementAt() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int firstStringLength = strings.Select(s => s.Length) .Where(i => i % 2 == 0).ElementAt(2); return firstStringLength; }
Hyp: 
public int ProjectedStringElementAt() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int firstStringLength = strings.SelectToInt(s => s.Length).Where(i => i % 2 == 1).ElementAt(2); return firstStringLength; }

BLEU: 76.84
Edit Sim: 7


Src: 
public List<Pair<String, Integer>> customerEachCountryOrdersMin() { List<Customer> customers = getCustomerList(); List<Pair<String, Integer>> ordersMin = customers.stream().collect(groupingBy(c -> c.getCountry())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().mapToInt(c -> c.getOrders().size()).min().getAsInt())).toList(); return ordersMin; }
Ref: 
public List<Tuple<string, int>> CustomerEachCountryOrdersMin() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersMin = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Min(c => c.Orders.Count))).ToList(); return ordersMin; }
Hyp: 
public List<Tuple<string, int>> CustomerEachCountryOrdersMin() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersMin = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Min(c => c.Orders.Count))).ToList(); return ordersMin; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, LocalDate>> customerOrdersEachNestedSkip() { List<Customer> customers = getCustomerList(); List<Pair<String, LocalDate>> after3EachOrders = customers.stream().flatMap(c -> c.getOrders().stream().skip(3) .map(o -> Pair.with(c.getCustomerId(), o.getOrderDate()))).toList(); return after3EachOrders; }
Ref: 
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3EachOrders = customers .SelectMany(c => c.Orders.Skip(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return after3EachOrders; }
Hyp: 
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedSkip() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> after3EachOrders = customers .SelectMany(c => c.Orders.Skip(3), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return after3EachOrders; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int oddNumbersFirstOrDefault() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int firstNum = Arrays.stream(numbers).filter(n -> n % 2 == 1).findFirst().orElse(-2); return firstNum; }
Ref: 
public int OddNumbersFirstOrDefault() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.FirstOrDefault(n => n % 2 == 1,-2); return firstNum; }
Hyp: 
public int OddNumbersFirstOrDefault() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.FirstOrDefault(n => n % 2 == 1,2); return firstNum; }

BLEU: 91.85
Edit Sim: 1


Src: 
public List<Pair<String, Integer>> customerExpensiveOrdersCount() { List<Customer> customers = getCustomerList(); List<Pair<String, Integer>> orderCounts = customers.stream().map(c -> Pair.with(c.getCustomerId(), (int) c.getOrders().stream().filter(o -> o.getTotal() > 100).count())).toList(); return orderCounts; }
Ref: 
public List<Tuple<string, int>> CustomerExpensiveOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> orderCounts = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Count(o => o.Total > 100))).ToList(); return orderCounts; }
Hyp: 
public List<Tuple<string, int>> CustomerExpensiveOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> orderCounts = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Count( o => o.Total > 100))).ToList(); return orderCounts; }

BLEU: 85.31
Edit Sim: 1


Src: 
public Map<Character, List<String>> stringGroupByFirstCharDictOrderbyDescendingCustom() { String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"}; Map<Character, List<String>> wordsGroups = Arrays.stream(words).collect(groupingBy(w -> Character.toLowerCase(w.charAt(0)))) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().sorted(new CaseInsensitiveComparer().reversed()).toList())); return wordsGroups; }
Ref: 
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w,new CaseInsensitiveComparer()).ToList()); return wordsGroups; }
Hyp: 
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w,new CaseInsensitiveComparer()).ToList()); return wordsGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> intWithSquareIndexedWhere() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Integer> q = IntStream.range(0, numbers.length).filter(i -> numbers[i] < i * i) .map(i -> numbers[i]).boxed().toList(); return q; }
Ref: 
public List<int> IntWithSquareIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Where((n,i)=>n<i*i).ToList(); return q; }
Hyp: 
public List<int> IntWithSquareIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Select(i => i * i).Where((n,i)=>n<i*i).ToList(); return q; }

BLEU: 77.65
Edit Sim: 19


Src: 
public int[] projectionIntConcat() { int[] numbersA = {0, 2, 4, 5, 6, 8, 9}; int[] numbersB = {1, 3, 5, 7, 8}; var first = Arrays.stream(numbersA).map(n -> n + 1); var second = Arrays.stream(numbersB).map(n -> n - 1); int[] allNumbers = IntStream.concat(first, second).toArray(); return allNumbers; }
Ref: 
public int[] ProjectionIntConcat() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; var first = numbersA.Select(n => n + 1); var second = numbersB.Select(n => n - 1); int[] numbers = first.Concat(second).ToArray(); return numbers; }
Hyp: 
public int[] ProjectionIntConcat() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] allNumbers = numbersA.Select(n => n + 1); var first = numbersB.Select(n => n - 1); var second = first.Concat(second).ToArray(); return allNumbers; }

BLEU: 82.09
Edit Sim: 36


Src: 
public List<Integer> rangeOfEvenIntsStartFrom(int start,int count) { List<Integer> numbers = IntStream.range(start, start+count).filter(n->n%2==0).boxed().toList(); return numbers; }
Ref: 
public List<int> RangeOfEvenIntsStartFrom(int start,int count) { List<int> numbers = Enumerable.Range(start, count).Where(n=>n%2==0).ToList(); return numbers; }
Hyp: 
public List<int> RangeOfEvenIntsStartFrom(int start,int count) { List<int> numbers = Enumerable.Range(start, count).Where(n=>n%2==1).ToList(); return numbers; }

BLEU: 80.03
Edit Sim: 1


Src: 
public List<Pair<String, String>> productLeftOuterJoinCategoriesName() { String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"}; List<Product> products = getProductList(); List<Pair<String, String>> q = Arrays.stream(categories).map( c -> Pair.with(c, products.stream().filter(p -> p.getCategory().equals(c)) .collect(Collectors.toList()))).flatMap(t -> defaultIfEmpty(t.getValue1(), null).stream() .map(p1 -> Pair.with(t.getValue0(), p1!=null?p1.getProductName():"No Product"))).toList(); return q; }
Ref: 
public List<Tuple<string, string>> ProductLeftOuterJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, string>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2.Select(p=>p.ProductName).DefaultIfEmpty("No Product"), (t, n) => Tuple.Create(t.Item1, n)).ToList(); return q; }
Hyp: 
public List<Tuple<string, string>> ProductLeftOuterJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, string>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2.DefaultIfEmpty("No Product"), (t, p) => Tuple.Create(t.Item1, p)).ToList(); return q; }

BLEU: 84.91
Edit Sim: 27


Src: 
public List<Triplet<String, Integer, Double>> customerSelectManyCustomerNewOrderIdAndTotals() { List<Customer> customers = getCustomerList(); List<Triplet<String, Integer, Double>> customerProperties = customers.stream().flatMap(c -> c.getOrders() .stream().filter(o -> o.getOrderDate().isAfter(LocalDate.of(1998, 1, 1))) .map(o -> Triplet.with(c.getCustomerId(), o.getOrderId(), o.getTotal()))).toList(); return customerProperties; }
Ref: 
public List<Tuple<string,int,double>> CustomerSelectManyCustomerNewOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
Hyp: 
public List<Tuple<string,int,double>> CustomerSelectManyCustomerNewOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, List<Product>> productEachCategoryMaxUnitPriceProductsDict() { List<Product> products = getProductList(); Map<String, List<Product>> categories = products.stream().collect(groupingBy(p -> p.getCategory())).entrySet() .stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().collect(groupingBy( p -> p.getUnitPrice())).entrySet().stream().max(Map.Entry.comparingByKey()).get().getValue())); return categories; }
Ref: 
public Dictionary<string, List<Product>> ProductEachCategoryMaxUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Max(p => p.UnitPrice)) .ToList()); return categories; }
Hyp: 
public Dictionary<string, List<Product>> ProductEachCategoryMaxUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Max(p => p.UnitPrice)) .ToList()); return categories; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Product productFirstOrDefault() { List<Product> products = getProductList(); Product product12 = products.stream().filter(p -> p.getProductId() == 12).findFirst().orElse(Product.DEFAULT); return product12; }
Ref: 
public Product ProductFirstOrDefault() { List<Product> products = GetProductList(); Product product12 = products.FirstOrDefault(p => p.ProductId == 12,Product.Default); return product12; }
Hyp: 
public Product ProductFirstOrDefault() { List<Product> products = GetProductList(); Product product12 = products.FirstOrDefault(p => p.ProductId == 12,Product.Default); return product12; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int oddFactorOf300Count() { int[] factorsOf300 = {2, 2, 3, 5, 5}; int factorsCount = (int) Arrays.stream(factorsOf300).filter(n -> (n % 2 == 1)).count(); return factorsCount; }
Ref: 
public int OddFactorOf300Count() { int[] factorsOf300 = { 2, 2, 3, 5, 5 }; int factorsCount = factorsOf300.Count(n => n % 2 == 1); return factorsCount; }
Hyp: 
public int OddFactorOf300Count() { int[] factorsOf300 = { 2, 2, 3, 5, 5 }; int factorsCount = factorsOf300.Where(n => n % 2 == 1).Count(); return factorsCount; }

BLEU: 80.2
Edit Sim: 13


Src: 
public List<Double> doubleOrderbyModThenbyDescending() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).boxed().sorted( Comparator.comparing((Double n) -> n % 1.5) .thenComparing(Comparator.reverseOrder())).toList(); return sortedNumbers; }
Ref: 
public List<double> DoubleOrderbyModThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleOrderbyModThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double doubleFirstOrDefault() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; double firstNum = Arrays.stream(numbers).findFirst().orElse(3.14); return firstNum; }
Ref: 
public double DoubleFirstOrDefault() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.FirstOrDefault(3.14); return firstNum; }
Hyp: 
public double DoubleFirstOrDefault() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.FirstOrDefault(firstNum => firstNum > 3.14, 3.14); return firstNum; }

BLEU: 75.1
Edit Sim: 29


Src: 
public List<Integer> rangeOfEvenIntsStartFrom() { List<Integer> numbers = IntStream.range(100, 200).filter(n->n%2==0).boxed().toList(); return numbers; }
Ref: 
public List<int> RangeOfEvenIntsStartFrom() { List<int> numbers = Enumerable.Range(100, 100).Where(n=>n%2==0).ToList(); return numbers; }
Hyp: 
public List<int> RangeOfEvenIntsStartFrom() { List<int> numbers = Enumerable.Range(100, 200).Where(n=>n%2==1).ToList(); return numbers; }

BLEU: 76.12
Edit Sim: 2


Src: 
public Map<String, List<Product>> productEachCategoryMinUnitPriceProductsDict() { List<Product> products = getProductList(); Map<String, List<Product>> categories = products.stream().collect(groupingBy(p -> p.getCategory())).entrySet() .stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().collect(groupingBy( p -> p.getUnitPrice())).entrySet().stream().min(Map.Entry.comparingByKey()).get().getValue())); return categories; }
Ref: 
public Dictionary<string, List<Product>> ProductEachCategoryMinUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Min(p => p.UnitPrice)) .ToList()); return categories; }
Hyp: 
public Dictionary<string, List<Product>> ProductEachCategoryMinUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.Min(p => p.UnitPrice)) .ToList()); return categories; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Double> customerOrdersTotalSumDict() { List<Customer> customers = getCustomerList(); Map<String, Double> ordersTotalSum = customers.stream().collect(toMap(c -> c.getCustomerId(), c -> c.getOrders().stream().mapToDouble(o -> o.getTotal()).sum())); return ordersTotalSum; }
Ref: 
public Dictionary<string, double> CustomerOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Sum(o => o.Total)); return ordersTotalSum; }
Hyp: 
public Dictionary<string, double> CustomerOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Sum(o => o.Total)); return ordersTotalSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, List<Order>>> customerIdAndOrders() { List<Customer> customers = getCustomerList(); List<Pair<String, List<Order>>> customerProperties = customers.stream().map(c -> Pair.with(c.getCustomerId(), c.getOrders())).toList(); return customerProperties; }
Ref: 
public List<Tuple<string,List<Order>>> CustomerIdAndOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,List<Order>>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders)).ToList(); return customerProperties; }
Hyp: 
public List<Tuple<string, List<Order>>> CustomerIdAndOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Order>>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.Orders)).ToList(); return customerProperties; }

BLEU: 64.87
Edit Sim: 2


Src: 
public List<Double> bigDoubleOrderbyModThenby() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).filter(n->n>3).boxed().sorted( Comparator.comparing((Double n) -> n % 1.5) .thenComparing(Comparator.naturalOrder())).toList(); return sortedNumbers; }
Ref: 
public List<double> BigDoubleOrderbyModThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> BigDoubleOrderbyModThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Order>> customerSelectManyCustomerOrders() { List<Customer> customers = getCustomerList(); List<Pair<String, Order>> customerProperties = customers.stream().flatMap(c -> c.getOrders() .stream().map(o -> Pair.with(c.getCustomerId(), o))).toList(); return customerProperties; }
Ref: 
public List<Tuple<string,Order>> CustomerSelectManyCustomerOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
Hyp: 
public List<Tuple<string,Order>> CustomerSelectManyCustomerOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Map<String, Customer>> customerNestedGroupByRegionAndName() { List<Customer> customers = getCustomerList(); Map<String, Map<String, Customer>> customerGroups = customers.stream().collect(groupingBy(p -> p.getRegion())) .entrySet().stream().collect(toMap( g -> g.getKey(), g -> g.getValue().stream().collect(toMap( c -> c.getCompanyName(), c -> c)))); return customerGroups; }
Ref: 
public Dictionary<string, Dictionary<string, Customer>> CustomerNestedGroupByRegionAndName() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<string, Customer>> customerGroups = customers.GroupBy( c => c.Region).ToDictionary(g => g.Key, g => g.ToDictionary( c => c.CompanyName, c => c)); return customerGroups; }
Hyp: 
public Dictionary<string, Dictionary<string, Customer>> CustomerNestedGroupByRegionAndName() { List<Customer> customers = GetCustomerList(); Dictionary<string, Dictionary<string, Customer>> customerGroups = customers.GroupBy( c => c.Region).ToDictionary(g => g.Key, g => g.GroupBy(c => c.CompanyName).ToDictionary( g => g.Key, g => g.ToDictionary( c => c.CompanyName, c => c))); return customerGroups; }

BLEU: 73.9
Edit Sim: 62


Src: 
public List<Order> customerOrdersTakeWhile() { List<Customer> customers = getCustomerList(); List<Order> after3Orders = customers.stream().flatMap(c -> c.getOrders().stream()) .takeWhile(o -> o.getOrderDate().isAfter(LocalDate.of(2000, 1, 1))).toList(); return after3Orders; }
Ref: 
public List<Order> CustomerOrdersTakeWhile() { List<Customer> customers = GetCustomerList(); List<Order> firstOrdersWhile = customers.SelectMany(c => c.Orders) .TakeWhile(o => o.OrderDate > new DateTime(2000, 1, 1)).ToList(); return firstOrdersWhile; }
Hyp: 
public List<Order> CustomerOrdersTakeWhile() { List<Customer> customers = GetCustomerList(); List<Order> firstOrdersWhile = customers.SelectMany(c => c.Orders) .TakeWhile(o => o.OrderDate > new DateTime(2000, 1, 1)).ToList(); return firstOrdersWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Double, Double> convertArrayToDictionaryWithDistinctAndPrint() { double[] doubles = {1.7, 2.3, 1.9, 4.1, 1.7, 2.9}; Map<Double, Double> doublesDict = Arrays.stream(doubles).distinct().boxed().collect(toMap( sr -> sr, sr -> sr*2)); for(var pair : doublesDict.entrySet()) System.out.println(pair.getKey() + " " + pair.getValue()); return doublesDict; }
Ref: 
public Dictionary<double, double> ConvertArrayToDictionaryWithDistinctAndPrint() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 1.7, 2.9 }; Dictionary<double, double> doublesDict = doubles.Distinct().ToDictionary(sr => sr, sr => sr * 2); foreach (var pair in doublesDict) Console.WriteLine(pair.Key + " " + pair.Value); return doublesDict; }
Hyp: 
public Dictionary<double, double> ConvertArrayToDictionaryWithDistinctAndPrint() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 1.7, 2.9 }; Dictionary<double, double> doublesDict = doubles.Distinct().ToDictionary(sr => sr, sr => sr*2); foreach (var pair in doublesDict) Console.Write(pair.Key + " " + pair.Value); return doublesDict; }

BLEU: 82.72
Edit Sim: 6


Src: 
public double[] projectionDoubleIntersect() { double[] numbersA = {0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7}; double[] numbersB = {0.1, 3.3, 5.4, 7.7, 8.6}; var first = Arrays.stream(numbersA).map(n -> n - (int) n); var second = Arrays.stream(numbersB).map(n -> n - (int) n); double[] sharedNumbers = first.distinct().filter(a -> second.anyMatch(b -> b == a)).toArray(); return sharedNumbers; }
Ref: 
public double[] ProjectionDoubleIntersect() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n-(int)n); var second = numbersB.Select(n => n-(int)n); double[] numbers = first.Intersect(second).ToArray(); return numbers; }
Hyp: 
public double[] ProjectionDoubleIntersect() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] sharedNumbers = numbersA.Select(n => n-(int)n); return sharedNumbers; }

BLEU: 62.25
Edit Sim: 102


Src: 
public List<Pair<String, String>> customerCrossGroupJoinRegionsPhone() { String[] regions = {"BC", "SP", "OR", "LA"}; List<Customer> customers = getCustomerList(); List<Pair<String, String>> q = Arrays.stream(regions).map( r -> Pair.with(r, customers.stream().filter(c -> c.getRegion().equals(r)) .collect(Collectors.toList()))).flatMap(t -> t.getValue1().stream() .map(c1 -> Pair.with(t.getValue0(), c1.getPhone()))).toList(); return q; }
Ref: 
public List<Tuple<string, string>> CustomerCrossGroupJoinRegionsPhone() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.Phone) ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
Hyp: 
public List<Tuple<string, string>> CustomerCrossGroupJoinRegionsPhone() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.Phone) ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> bigDoubleOrderbyDescending() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).filter(n -> n > 5).boxed().sorted(Comparator.reverseOrder()).toList(); return sortedNumbers; }
Ref: 
public List<double> BigDoubleOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).OrderByDescending(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> BigDoubleOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(d => d > 5).OrderByDescending(n=>n).ToList(); return sortedNumbers; }

BLEU: 74.0
Edit Sim: 4


Src: 
public List<Integer> intTakeWhileIndexed() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Integer> afterNumbers = IntStream.range(0, numbers.length) .takeWhile(i -> numbers[i] > i).map(i -> numbers[i]).boxed().toList(); return afterNumbers; }
Ref: 
public List<int> IntTakeWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbers = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
Hyp: 
public List<int> IntTakeWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbersWhile; }

BLEU: 85.71
Edit Sim: 10


Src: 
public List<Integer> intSkipWhileIndexed() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Integer> afterNumbers = IntStream.range(0, numbers.length) .dropWhile(i -> numbers[i] > i).map(i -> numbers[i]).boxed().toList(); return afterNumbers; }
Ref: 
public List<int> IntSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbers = numbers.SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
Hyp: 
public List<int> IntSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbers = numbers.SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double bigNumbersAverageTwice() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; double averageNum = Arrays.stream(numbers).filter(n -> n >= 5).map(n -> n * 2).average().getAsDouble(); return averageNum; }
Ref: 
public double BigNumbersAverageTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; double averageNum = numbers.Where(n => n > 5).Average(n => n * 2); return averageNum; }
Hyp: 
public double BigNumbersAverageTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; double averageNum = numbers.Where(n => n > 5).Average(n => n * 2); return averageNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Double> customerExpensiveOrdersTotalSumDict() { List<Customer> customers = getCustomerList(); Map<String, Double> ordersTotalSum = customers.stream().collect(toMap(c -> c.getCustomerId(), c -> c.getOrders().stream().filter(o -> o.getTotal() > 100) .mapToDouble(o -> o.getTotal()).sum())); return ordersTotalSum; }
Ref: 
public Dictionary<string, double> CustomerExpensiveOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Sum(o => o.Total)); return ordersTotalSum; }
Hyp: 
public Dictionary<string, double> CustomerExpensiveOrdersTotalSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Sum(o => o.Total)); return ordersTotalSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, List<Product>> productEachGroupTake() { List<Product> products = getProductList(); Map<String, List<Product>> after3EachGroups = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().limit(3).toList())); return after3EachGroups; }
Ref: 
public Dictionary<string, List<Product>> ProductEachGroupTake() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> first3EachGroups = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Take(3).ToList()); return first3EachGroups; }
Hyp: 
public Dictionary<string, List<Product>> ProductEachGroupTake() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> first3EachGroups = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Take(3).ToList()); return first3EachGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double bigDoubleNumbersFirst() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; double firstNum = Arrays.stream(numbers).filter(d -> d > 5).findFirst().getAsDouble(); return firstNum; }
Ref: 
public double BigDoubleNumbersFirst() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.First(d => d > 5); return firstNum; }
Hyp: 
public double BigDoubleNumbersFirst() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.First(); return firstNum; }

BLEU: 77.04
Edit Sim: 10


Src: 
public double productUnitPriceMin() { List<Product> products = getProductList(); double minUnitPrice = products.stream().mapToDouble(p -> p.getUnitPrice()).min().getAsDouble(); return minUnitPrice; }
Ref: 
public double ProductUnitPriceMin() { List<Product> products = GetProductList(); double minUnitPrice = products.Min(p => p.UnitPrice); return minUnitPrice; }
Hyp: 
public double ProductUnitPriceMin() { List<Product> products = GetProductList(); double minUnitPrice = products.Min(p => p.UnitPrice); return minUnitPrice; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, String>> customerLeftOuterJoinRegionsName() { String[] regions = {"BC", "SP", "OR", "LA"}; List<Customer> customers = getCustomerList(); List<Pair<String, String>> q = Arrays.stream(regions).map( r -> Pair.with(r, customers.stream().filter(c -> c.getRegion().equals(r)) .collect(Collectors.toList()))).flatMap(t -> defaultIfEmpty(t.getValue1(), null).stream() .map(p1 -> Pair.with(t.getValue0(), p1!=null?p1.getCompanyName():"No Customer"))).toList(); return q; }
Ref: 
public List<Tuple<string, string>> CustomerLeftOuterJoinRegionsName() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName).DefaultIfEmpty("No Customer") ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
Hyp: 
public List<Tuple<string, string>> CustomerLeftOuterJoinRegionsName() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName) ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }

BLEU: 91.84
Edit Sim: 30


Src: 
public int projectedBigNumbersFirst() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int firstNum = Arrays.stream(numbers).map(i -> (int) Math.pow(2, i)).filter(n -> n > 100).findFirst().getAsInt(); return firstNum; }
Ref: 
public int ProjectedBigNumbersFirst() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.Select(i => (int)Math.Pow(2, i)).First(n => n > 100); return firstNum; }
Hyp: 
public int ProjectedBigNumbersFirst() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.Select(i => (int)Math.Pow(2, i)) .FirstOrDefault(n => n > 100,100); return firstNum; }

BLEU: 81.52
Edit Sim: 14


Src: 
public Map<Integer, Map<Integer, List<Order>>> customerNestedGroupByOrderYearAndMonth() { List<Customer> customers = getCustomerList(); Map<Integer, Map<Integer, List<Order>>> customerOrderGroups = customers.stream().flatMap(c -> c.getOrders().stream()) .collect(groupingBy(o -> o.getOrderDate().getYear())).entrySet().stream().collect(toMap( g -> g.getKey(), g -> g.getValue().stream().collect(groupingBy( o -> o.getOrderDate().getMonthValue() )))); return customerOrderGroups; }
Ref: 
public Dictionary<int, Dictionary<int, List<Order>>> CustomerNestedGroupByOrderYearAndMonth() { List<Customer> customers = GetCustomerList(); Dictionary<int, Dictionary<int, List<Order>>> customerOrderGroups = customers.SelectMany(c => c.Orders) .GroupBy(o => o.OrderDate.Year).ToDictionary( yg => yg.Key, yg => yg.GroupBy(o => o.OrderDate.Month).ToDictionary( mg => mg.Key, mg => mg.ToList()) ); return customerOrderGroups; }
Hyp: 
public Dictionary<int, Dictionary<int, List<Order>>> CustomerNestedGroupByOrderYearAndMonth() { List<Customer> customers = GetCustomerList(); Dictionary<int, Dictionary<int, List<Order>>> customerOrderGroups = customers.SelectMany(c => c.Orders).GroupBy(o => o.OrderDate.Year).ToDictionary(g => g.Key, g => g.GroupBy(o => o.OrderDate.Month).ToDictionary( g => g.Key, g => g.ToList())); return customerOrderGroups; }

BLEU: 50.41
Edit Sim: 11


Src: 
public List<Pair<String, List<Product>>> productEachCategoryFirstOrDefaultUnitPriceProducts() { List<Product> products = getProductList(); List<Pair<String, List<Product>>> categories = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().filter(p -> p.getUnitPrice() == g.getValue().stream().findFirst().orElse(Product.DEFAULT).getUnitPrice()).toList())).toList(); return categories; }
Ref: 
public List<Tuple<string, List<Product>>> ProductEachCategoryFirstOrDefaultUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.FirstOrDefault(Product.Default).UnitPrice) .ToList())).ToList(); return categories; }
Hyp: 
public List<Tuple<string, List<Product>>> ProductEachCategoryFirstOrDefaultUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.FirstOrDefault(Product.Default).UnitPrice).ToList())).ToList(); return categories; }

BLEU: 86.97
Edit Sim: 1


Src: 
public boolean stringAnyMatch(char c) { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; boolean anyMatch = Arrays.stream(words).anyMatch(w -> w.charAt(0) > c); return anyMatch; }
Ref: 
public bool StringAnyMatch(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Any(w => w[0] > c); return anyMatch; }
Hyp: 
public bool StringAnyMatch(char c) { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Any(w => w[0] > c); return anyMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Double> customerEachRegionOrdersTotalMaxDict() { List<Customer> customers = getCustomerList(); Map<String, Double> ordersTotalMax = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().flatMap(c -> c.getOrders().stream()).mapToDouble(o -> o.getTotal()).max().getAsDouble())); return ordersTotalMax; }
Ref: 
public Dictionary<string, double> CustomerEachRegionOrdersTotalMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(c => c.Orders).Max(o => o.Total)); return ordersTotalMax; }
Hyp: 
public Dictionary<string, double> CustomerEachRegionOrdersTotalMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(c => c.Orders).Max(o => o.Total)); return ordersTotalMax; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<Double, List<Double>>> doubleGroupByMod() { double[] numbers = {5.8, 4.3, 1.5, 3.7, 9.3}; List<Pair<Double, List<Double>>> numberGroups = Arrays.stream(numbers).boxed().collect(groupingBy(n -> n % 1.5)) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue())).toList(); return numberGroups; }
Ref: 
public List<Tuple<double, List<double>>> DoubleGroupByMod() { double[] numbers = { 5.8, 4.3, 1.5, 3.7, 9.3 }; List<Tuple<double, List<double>>> numberGroups = numbers.GroupBy(n => n % 1.5) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return numberGroups; }
Hyp: 
public List<Tuple<double, List<double>>> DoubleGroupByMod() { double[] numbers = { 5.8, 4.3, 1.5, 3.7, 9.3 }; List<Tuple<double, List<double>>> numberGroups = numbers.GroupBy(n => n % 1.5) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return numberGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Integer> customerEachRegionOrdersMinDict() { List<Customer> customers = getCustomerList(); Map<String, Integer> ordersMin = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().mapToInt(c -> c.getOrders().size()).min().getAsInt())); return ordersMin; }
Ref: 
public Dictionary<string, int> CustomerEachRegionOrdersMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersMin = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.Min(c => c.Orders.Count)); return ordersMin; }
Hyp: 
public Dictionary<string, int> CustomerEachRegionOrdersMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersMin = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.Min(c => c.Orders.Count)); return ordersMin; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int bigNumbersSumTwice() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int numbersSum = Arrays.stream(numbers).filter(n -> n >= 5).map(n -> n * 2).sum(); return numbersSum; }
Ref: 
public int BigNumbersSumTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n > 5).Sum(n => n * 2); return numbersSum; }
Hyp: 
public int BigNumbersSumTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n > 5).Sum(n => n * 2); return numbersSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> intSquareSkipWhile() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Integer> after3Numbers = Arrays.stream(numbers).map(i -> i * i).dropWhile(i -> i > 3).boxed().toList(); return after3Numbers; }
Ref: 
public List<int> IntSquareSkipWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.Select(i => i * i).SkipWhile(i => i > 3).ToList(); return afterNumbersWhile; }
Hyp: 
public List<int> IntSquareSkipWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbersWhile = numbers.Select(i => i * i).SkipWhile(i => i > 3).ToList(); return afterNumbersWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Boolean> productEachGroupAllMatch() { List<Product> products = getProductList(); Map<String, Boolean> allMatch = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().allMatch(p -> p.getUnitsInStock() > 0))); return allMatch; }
Ref: 
public Dictionary<string, bool> ProductEachGroupAllMatch() { List<Product> products = GetProductList(); Dictionary<string, bool> allMatch = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.All(p => p.UnitsInStock > 0)); return allMatch; }
Hyp: 
public Dictionary<string, bool> ProductEachGroupAllMatch() { List<Product> products = GetProductList(); Dictionary<string, bool> allMatch = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.All(p => p.UnitsInStock > 0)); return allMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public boolean longStringAnyMatch() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; boolean anyMatch = Arrays.stream(words).filter(w -> w.length() > 5).anyMatch(n -> n.compareTo("b") > 0); return anyMatch; }
Ref: 
public bool LongStringAnyMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Where(w => w.Length > 5).Any(n => string.CompareOrdinal(n, "b") > 0); return anyMatch; }
Hyp: 
public bool LongStringAnyMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Where(w => w.Length > 5).Any(n => string.CompareOrdinal(n, "b") > 0); return anyMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> productOrderbyDescendingName() { List<Product> products = getProductList(); List<Product> sortedProducts = products.stream().sorted( Comparator.comparing(p -> p.getProductName(), Comparator.reverseOrder())).toList(); return sortedProducts; }
Ref: 
public List<Product> ProductOrderbyDescendingName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderByDescending(p => p.ProductName).ToList(); return sortedProducts; }
Hyp: 
public List<Product> ProductOrderbyDescendingName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderByDescending(p => p.ProductName).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Boolean[] bigIntWithIndex() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int[] bigNumbers = Arrays.stream(numbers).filter(n -> n > 5).toArray(); Boolean[] numSelected = (Boolean[]) IntStream.range(0, bigNumbers.length).mapToObj(i -> bigNumbers[i] == i).toArray(); return numSelected; }
Ref: 
public bool[] BigIntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Where(n => n > 5).Select((n, i) => n == i).ToArray(); return numSelected; }
Hyp: 
public bool[] BigIntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Where(n => n > 5).Select((n, i) => n == i).ToArray(); return numSelected; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double productUnitPriceSum() { List<Product> products = getProductList(); double totalSum = products.stream().mapToDouble(p -> p.getUnitPrice()).sum(); return totalSum; }
Ref: 
public double ProductUnitPriceTotalSum() { List<Product> products = GetProductList(); double totalSum = products.Sum(p => p.UnitPrice); return totalSum; }
Hyp: 
public double ProductUnitPriceSum() { List<Product> products = GetProductList(); double totalSum = products.Sum(p => p.UnitPrice); return totalSum; }

BLEU: 85.79
Edit Sim: 5


Src: 
public List<Pair<String, Customer>> customerLeftOuterJoinRegions() { String[] regions = {"BC", "SP", "OR", "LA"}; List<Customer> customers = getCustomerList(); List<Pair<String, Customer>> q = Arrays.stream(regions).map( r -> Pair.with(r, customers.stream().filter(c -> c.getRegion().equals(r)) .collect(Collectors.toList()))).flatMap(t -> defaultIfEmpty(t.getValue1(), null).stream() .map(p1 -> Pair.with(t.getValue0(), p1))).toList(); return q; }
Ref: 
public List<Tuple<string, Customer>> CustomerLeftOuterJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, Customer>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=>t.Item2.DefaultIfEmpty(null) ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
Hyp: 
public List<Tuple<string, Customer>> CustomerLeftOuterJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, Customer>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.Region,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }

BLEU: 91.44
Edit Sim: 20


Src: 
public Map<String, Integer> customerNewOrdersCountDict() { List<Customer> customers = getCustomerList(); Map<String, Integer> orderCounts = customers.stream().collect(toMap( c -> c.getCustomerId(), c -> (int) c.getOrders().stream() .filter(o -> o.getOrderDate().isAfter(LocalDate.of(2000, 1, 1))).count())); return orderCounts; }
Ref: 
public Dictionary<string, int> CustomerNewOrdersCountDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> orderCounts = customers.ToDictionary( c => c.CustomerId, c => c.Orders.Count( o => o.OrderDate > new DateTime(2000, 1, 1))); return orderCounts; }
Hyp: 
public Dictionary<string, int> CustomerNewOrdersCountDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> orderCounts = customers.ToDictionary( c => c.CustomerId, c => c.Orders.Count( o => o.OrderDate > new DateTime(2000, 1, 1)); return orderCounts; }

BLEU: 91.57
Edit Sim: 1


Src: 
public List<String> stringOrderbyLength() { String[] words = {"cherry", "apple", "blueberry"}; List<String> sortedWords = Arrays.stream(words).sorted(Comparator.comparing(w -> w.length())).toList(); return sortedWords; }
Ref: 
public List<string> StringOrderbyLength() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderBy(w => w.Length).ToList(); return sortedWords; }
Hyp: 
public List<string> StringOrderbyLength() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderBy(w => w.Length).ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public String[] selectByCaseConcat() { String[] words = {"aPPLE", "BlUeBeRrY", "cHeRry"}; String[] upperLowerWords = (String[]) Arrays.stream(words).map(w -> w.toUpperCase() + w.toLowerCase()).toArray(); return upperLowerWords; }
Ref: 
public string[] SelectByCaseConcat() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; string[] upperLowerWords = words.Select(w => w.ToUpper() + w.ToLower()).ToArray(); return upperLowerWords; }
Hyp: 
public string[] SelectByCaseConcat() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; string[] upperLowerWords = words.Select(w => w.ToUpperCase() + w.ToLower()); return upperLowerWords; }

BLEU: 80.41
Edit Sim: 14


Src: 
public List<Product> productOrderbyDescendingId() { List<Product> products = getProductList(); List<Product> sortedProducts = products.stream().sorted( Comparator.comparing(p -> p.getProductId(), Comparator.reverseOrder())).toList(); return sortedProducts; }
Ref: 
public List<Product> ProductOrderbyDescendingId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderByDescending(p => p.ProductId).ToList(); return sortedProducts; }
Hyp: 
public List<Product> ProductOrderbyDescendingId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderByDescending(p => p.ProductId).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, List<Product>> productsConvertGroupingToDictionaryAndPrint() { List<Product> products = getProductList(); Map<String, List<Product>> catagory = products.stream().collect(groupingBy( p ->p.getCategory())); for(var pair : catagory.entrySet()) { System.out.println(pair.getKey() + ":"); for(var product : pair.getValue()) System.out.println("\t" + product); } return catagory; }
Ref: 
public Dictionary<string, List<Product>> ProductsConvertGroupingToDictionaryAndPrint() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> catagory = products.GroupBy(p => p.Category).ToDictionary( g => g.Key, g => g.ToList()); foreach (var pair in catagory) { Console.WriteLine(pair.Key + ":"); foreach (var product in pair.Value) Console.WriteLine("\t" + product); } return catagory; }
Hyp: 
public Dictionary<string, List<Product>> ProductsConvertGroupingToDictionaryAndPrint() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> catagory = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.ToList()); foreach (var pair in catagory) { Console.WriteLine(pair.Key + ":"); foreach (var product in pair.Value) Console.WriteLine("\t" + product); } return catagory; }

BLEU: 91.65
Edit Sim: 2


Src: 
public List<Pair<String, Double>> customerOrdersTotalSum() { List<Customer> customers = getCustomerList(); List<Pair<String, Double>> ordersTotalSum = customers.stream().map(c -> Pair.with(c.getCustomerId(), c.getOrders().stream().mapToDouble(o -> o.getTotal()).sum())).toList(); return ordersTotalSum; }
Ref: 
public List<Tuple<string, double>> CustomerOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Sum(o => o.Total))).ToList(); return ordersTotalSum; }
Hyp: 
public List<Tuple<string, double>> CustomerOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Sum(o => o.Total))).ToList(); return ordersTotalSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<Integer, String>> customerCrossJoinRegionsWithCodeName() { List<Pair<String, Integer>> regions = Arrays.asList( Pair.with("BC", 101), Pair.with("BC", 105), Pair.with("OR", 121), Pair.with("LA", 143) ); List<Customer> customers = getCustomerList(); List<Pair<Integer, String>> q = regions.stream().flatMap( r -> customers.stream().filter(c -> c.getRegion().equals(r.getValue0())).map( c -> Pair.with(r.getValue1(), c.getCompanyName()))).toList(); return q; }
Ref: 
public List<Tuple<int, string>> CustomerCrossJoinRegionsWithCodeName() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, string>> q = regions.Join(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c.CompanyName)).ToList(); return q; }
Hyp: 
public List<Tuple<int, string>> CustomerCrossJoinRegionsWithCodeName() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c.CompanyName)).SelectMany(c=>c.CompanyName).ToList(); return q; }

BLEU: 88.2
Edit Sim: 34


Src: 
public double bigNumbersAggregateMultiplyWithSeed() { double[] numbers = {1.7, 2.3, 1.9, 4.1, 2.9}; double seed = 1.6; double product = Arrays.stream(numbers).filter(n -> n > 2).reduce(seed, (a, b) -> a * b); return product; }
Ref: 
public double BigNumbersAggregateMultiplyWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 1.6; double product = numbers.Where(n => n > 2).Aggregate(seed, (a, b) => a * b); return product; }
Hyp: 
public double BigNumbersAggregateMultiplyWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 1.6; double product = numbers.Where(d => d > 2).Aggregate((a, b) => a * b); return product; }

BLEU: 79.3
Edit Sim: 8


Src: 
public int projectedStringFirst() { String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; int firstStringLength = Arrays.stream(strings).mapToInt(s -> s.length()).filter(i -> i % 2 == 0).findFirst().getAsInt(); return firstStringLength; }
Ref: 
public int ProjectedStringFirst() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int firstStringLength = strings.Select(s => s.Length).First(i => i % 2 == 0); return firstStringLength; }
Hyp: 
public int ProjectedStringFirst() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int firstStringLength = strings.Select(s => s.Length).Where(i => i % 2 == 1).First(); return firstStringLength; }

BLEU: 84.53
Edit Sim: 14


Src: 
public boolean productAnyMatch() { List<Product> products = getProductList(); boolean anyMatch = products.stream().anyMatch(p -> p.getUnitsInStock() > 0); return anyMatch; }
Ref: 
public bool ProductAnyMatch() { List<Product> products = GetProductList(); bool anyMatch = products.Any(p => p.UnitsInStock > 0); return anyMatch; }
Hyp: 
public bool ProductAnyMatch() { List<Product> products = GetProductList(); bool anyMatch = products.Any(p => p.UnitsInStock > 0); return anyMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Triplet<String, Integer, Double>> customerSelectManyCustomerOrderIdAndTotals() { List<Customer> customers = getCustomerList(); List<Triplet<String, Integer, Double>> customerProperties = customers.stream().flatMap(c -> c.getOrders() .stream().map(o -> Triplet.with(c.getCustomerId(), o.getOrderId(), o.getTotal()))).toList(); return customerProperties; }
Ref: 
public List<Tuple<string,int,double>> CustomerSelectManyCustomerOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }
Hyp: 
public List<Tuple<string,int,double>> CustomerSelectManyCustomerOrderIdAndTotals() { List<Customer> customers = GetCustomerList(); List<Tuple<string,int,double>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderId, o.Total)).ToList(); return customerProperties; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int numbersSum() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int numbersSum = Arrays.stream(numbers).sum(); return numbersSum; }
Ref: 
public int NumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Sum(); return numbersSum; }
Hyp: 
public int NumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Sum(); return numbersSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Character[] shortStringFirstChar() { String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; Character[] selected = (Character[]) Arrays.stream(strings).filter(w -> w.length() < 4) .map(w -> w.charAt(0)).toArray(); return selected; }
Ref: 
public char[] ShortStringFirstChar() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; char[] selected = strings.Where(w => w.Length < 4).Select(w => w[0]).ToArray(); return selected; }
Hyp: 
public char[] ShortStringFirstChar() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; char[] selected = strings.Where(w => w.Length < 4).Select(w => w[0]); return selected; }

BLEU: 91.85
Edit Sim: 10


Src: 
public int[] oddFactorOf300And900Count() { int[][] factorsOf300And900 = { {2, 2, 3, 5, 5}, {2, 2, 3, 3, 5, 5} }; int[] factorsCount = Arrays.stream(factorsOf300And900) .mapToInt(a -> (int) Arrays.stream(a).filter(n -> n % 2 == 1).count()).toArray(); return factorsCount; }
Ref: 
public int[] OddFactorOf300And900Count() { int[][] factorsOf300And900 = { new[] { 2, 2, 3, 5, 5 }, new[] { 2, 2, 3, 3, 5, 5 } }; int[] factorsCount = factorsOf300And900.Select( a => a.Count(n => n % 2 == 1)).ToArray(); return factorsCount; }
Hyp: 
public int[] OddFactorOf300And900Count() { int[] factorsOf300And900 = { { 2, 2, 3, 5, 5 }, { 2, 2, 3, 5, 5 }; int[] factorsCount = factorsOf300And900.Select(a => a.Where(n => n % 2 == 1).Count(); return factorsCount; }

BLEU: 47.82
Edit Sim: 32


Src: 
public List<Pair<String, Double>> customerEachRegionOrdersTotalSum() { List<Customer> customers = getCustomerList(); List<Pair<String, Double>> ordersTotalSum = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().flatMap(c -> c.getOrders().stream()).mapToDouble(o -> o.getTotal()).sum())).toList(); return ordersTotalSum; }
Ref: 
public List<Tuple<string, double>> CustomerEachRegionOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.GroupBy(c => c.Region) .Select(g=>Tuple.Create(g.Key, g.SelectMany(c=>c.Orders).Sum(o => o.Total))).ToList(); return ordersTotalSum; }
Hyp: 
public List<Tuple<string, double>> CustomerEachRegionOrdersTotalSum() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalSum = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c => c.Orders).Sum(o => o.Total))).ToList(); return ordersTotalSum; }

BLEU: 71.26
Edit Sim: 4


Src: 
public int[] intPlusOne() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int[] numSelected = Arrays.stream(numbers).map(n -> n + 1).toArray(); return numSelected; }
Ref: 
public int[] IntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select(n => n + 1).ToArray(); return numSelected; }
Hyp: 
public int[] IntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select(n => n + 1).ToArray(); return numSelected; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Customer>> customerCrossGroupJoinRegions() { String[] regions = {"BC", "SP", "OR", "LA"}; List<Customer> customers = getCustomerList(); List<Pair<String, Customer>> q = Arrays.stream(regions).map( r -> Pair.with(r, customers.stream().filter(c -> c.getRegion().equals(r)) .collect(Collectors.toList()))).flatMap(t -> t.getValue1().stream() .map(c1 -> Pair.with(t.getValue0(), c1))).toList(); return q; }
Ref: 
public List<Tuple<string, Customer>> CustomerCrossGroupJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, Customer>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=>t.Item2 ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
Hyp: 
public List<Tuple<string, Customer>> CustomerCrossGroupJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, Customer>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.Region) ,(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }

BLEU: 91.65
Edit Sim: 21


Src: 
public boolean waCustomerOrdersNestedAnyMatch() { List<Customer> customers = getCustomerList(); boolean anyMatch = customers.stream().filter(c -> c.getRegion() == "WA").flatMap(c -> c.getOrders().stream() .map(o -> Pair.with(c.getCustomerId(), o.getOrderDate()))) .anyMatch(t -> t.getValue1().isAfter(LocalDate.of(2000, 1, 1))); return anyMatch; }
Ref: 
public bool WaCustomerOrdersNestedAnyMatch() { List<Customer> customers = GetCustomerList(); bool anyMatch = customers.Where(c=>c.Region=="WA").SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Any(t => t.Item2 > new DateTime(2000, 1, 1)); return anyMatch; }
Hyp: 
public bool WaCustomerOrdersNestedAnyMatch() { List<Customer> customers = GetCustomerList(); bool anyMatch = customers.Where(c=>c.Region=="WA").SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).Any(t => t.Item2 > new DateTime(2000, 1, 1)); return anyMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Pair<String, Integer>, List<String>> customerGroupJoinRegionsWithCodeNameRegion() { List<Pair<String, Integer>> regions = Arrays.asList( Pair.with("BC", 101), Pair.with("BC", 105), Pair.with("OR", 121), Pair.with("LA", 143) ); List<Customer> customers = getCustomerList(); Map<Pair<String, Integer>, List<String>> q = regions.stream().map(r -> Pair.with(r, customers.stream() .filter(c -> c.getRegion().equals(r.getValue0())).map(c->c.getCompanyName()).toList())) .collect(toMap(t->t.getValue0(),t->t.getValue1())); return q; }
Ref: 
public Dictionary<Tuple<string,int>, List<string>> CustomerGroupJoinRegionsWithCodeNameRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); Dictionary<Tuple<string,int>, List<string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c.Select(c=>c.CompanyName).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
Hyp: 
public Dictionary<Tuple<string,int>, List<string>> CustomerGroupJoinRegionsWithCodeNameRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); Dictionary<Tuple<string,int>, List<string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c.Select(c1=>c1.CompanyName).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }

BLEU: 94.87
Edit Sim: 2


Src: 
public List<Pair<String, LocalDate>> customerOrdersNestedTakeWhile() { List<Customer> customers = getCustomerList(); List<Pair<String, LocalDate>> after3Orders = customers.stream().flatMap(c -> c.getOrders().stream() .map(o -> Pair.with(c.getCustomerId(), o.getOrderDate()))) .takeWhile(t -> t.getValue1().isAfter(LocalDate.of(2000, 1, 1))).toList(); return after3Orders; }
Ref: 
public List<Tuple<string, DateTime>> CustomerOrdersNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersWhile = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).TakeWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return firstOrdersWhile; }
Hyp: 
public List<Tuple<string, DateTime>> CustomerOrdersNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersWhile = customers.SelectMany(c => c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).TakeWhile(t => t.Item2 > new DateTime( 2000, 1, 1)).ToList(); return firstOrdersWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Pair<Integer, Integer>[] selectManyJoinSumEven() { int[] numbersA = {0, 2, 4, 5, 6, 8, 9}; int[] numbersB = {1, 3, 5, 7, 8}; Pair<Integer, Integer>[] pairs = (Pair<Integer, Integer>[]) Arrays.stream(numbersA).boxed().flatMap(a -> Arrays.stream(numbersB) .filter(b -> (a + b) % 2 == 0).mapToObj(b -> Pair.with(a, b))).toArray(); return pairs; }
Ref: 
public Tuple<int, int>[] SelectManyJoinSumEven() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int, int>[] pairs = numbersA.SelectMany(a => numbersB.Where(b => (a + b) % 2 == 0), (a, b) => Tuple.Create(a, b)).ToArray(); return pairs; }
Hyp: 
public Tuple<int,int>[] SelectManyJoinSumEven() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; Tuple<int,int>[] pairs = numbersA.SelectMany(numbersB).SelectMany(a => a % 2 == 1 ? a + b : b).ToArray(); return pairs; }

BLEU: 55.37
Edit Sim: 46


Src: 
public int[] stringLength() { String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; int[] selected = Arrays.stream(strings).mapToInt(w -> w.length()).toArray(); return selected; }
Ref: 
public int[] StringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Select(w => w.Length).ToArray(); return selected; }
Hyp: 
public int[] StringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Select(w => w.Length).ToArray(); return selected; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int shortStringMaxLength() { String[] words = {"cherry", "apple", "blueberry"}; int maxLength = Arrays.stream(words).filter(w -> w.length() < 7).mapToInt(w -> w.length()).max().getAsInt(); return maxLength; }
Ref: 
public int ShortStringMaxLength() { string[] words = { "cherry", "apple", "blueberry" }; int maxLength = words.Where(w => w.Length < 7).Max(w => w.Length); return maxLength; }
Hyp: 
public int ShortStringMaxLength() { string[] words = { "cherry", "apple", "blueberry" }; int maxLength = words.Where(w => w.Length < 7).Max(w => w.Length); return maxLength; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Boolean[] intWithIndex() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; Boolean[] numSelected = (Boolean[]) IntStream.range(0, numbers.length).mapToObj(i -> numbers[i] == i).toArray(); return numSelected; }
Ref: 
public bool[] IntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => n == i).ToArray(); return numSelected; }
Hyp: 
public bool[] IntWithIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => n == i).ToArray(); return numSelected; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> rangeOfSquareInts() { List<Integer> numbers = IntStream.range(0, 50).map(n->n*n).boxed().toList(); return numbers; }
Ref: 
public List<int> RangeOfSquareInts() { List<int> numbers = Enumerable.Range(0, 20).Select(n=>n*n).ToList(); return numbers; }
Hyp: 
public List<int> RangeOfSquareInts() { List<int> numbers = Enumerable.Range(0, 50).Select(n=>n*n).ToList(); return numbers; }

BLEU: 76.12
Edit Sim: 1


Src: 
public Map<Boolean, List<Double>> doubleGroupByBoolDictOrderbyFraction() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; Map<Boolean, List<Double>> numbersGroups = Arrays.stream(numbers).boxed().collect(groupingBy(n -> n > 5)) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().sorted(Comparator.comparing( n -> n - (int) n.doubleValue())).toList())); return numbersGroups; }
Ref: 
public Dictionary<bool, List<double>> DoubleGroupByBoolDictOrderbyFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; Dictionary<bool, List<double>>  numbersGroups = numbers.GroupBy(n => n>5) .ToDictionary(g => g.Key, g => g.OrderBy(n=>n-(int)n).ToList()); return numbersGroups; }
Hyp: 
public Dictionary<bool, List<double>> DoubleGroupByBoolDictOrderbyFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; Dictionary<bool, List<double>>  numbersGroups = numbers.GroupBy(n => n>5) .ToDictionary(g => g.Key, g => g.OrderBy(n=>n-(int)n).ToList()); return numbersGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> shortStringOrderbyDescendingCustom() { String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"}; List<String> sortedWords = Arrays.stream(words).filter(w -> w.length() < 6).sorted(new CaseInsensitiveComparer().reversed()). toList(); return sortedWords; }
Ref: 
public List<string> ShortStringOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderByDescending(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
Hyp: 
public List<string> ShortStringOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderByDescending(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Order> customerEachRegionFirstOrderDict() { List<Customer> customers = getCustomerList(); Map<String, Order> ordersFirst = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().flatMap(c -> c.getOrders().stream()).findFirst().get())); return ordersFirst; }
Ref: 
public Dictionary<string, Order> CustomerEachRegionFirstOrderDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, Order> ordersMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.SelectMany(c => c.Orders).First()); return ordersMax; }
Hyp: 
public Dictionary<string,Order> CustomerEachRegionFirstOrderDict() { List<Customer> customers = GetCustomerList(); Dictionary<string,Order> ordersFirst = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key,g => g.SelectMany(c => c.Orders).First()); return ordersFirst; }

BLEU: 50.44
Edit Sim: 13


Src: 
public List<Pair<Boolean, List<Integer>>> productGroupByPriceWithId() { List<Product> products = getProductList(); List<Pair<Boolean, List<Integer>>> productGroup = products.stream().collect(groupingBy(p -> p.getUnitPrice() > 100)) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().map(p -> p.getProductId()).toList())).toList(); return productGroup; }
Ref: 
public List<Tuple<bool, List<int>>> ProductGroupByPriceWithId() { List<Product> products = GetProductList(); List<Tuple<bool, List<int>>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductId).ToList())).ToList(); return productGroup; }
Hyp: 
public List<Tuple<bool, List<int>>> ProductGroupByPriceWithId() { List<Product> products = GetProductList(); List<Tuple<bool, List<int>>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductId).ToList())).ToList(); return productGroup; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Integer>> customerDistinctOrdersCount() { List<Customer> customers = getCustomerList(); List<Pair<String, Integer>> orderCounts = customers.stream().map(c -> Pair.with(c.getCustomerId(), (int) c.getOrders().stream().distinct().count())).toList(); return orderCounts; }
Ref: 
public List<Tuple<string, int>> CustomerDistinctOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> orderCounts = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Distinct().Count())).ToList(); return orderCounts; }
Hyp: 
public List<Tuple<string, int>> CustomerDistinctOrdersCount() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> orderCounts = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Distinct().Count())).ToList(); return orderCounts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int oddNumbersSum() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int numbersSum = Arrays.stream(numbers).filter(n -> n % 2 == 0).sum(); return numbersSum; }
Ref: 
public int OddNumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n % 2 == 1).Sum(); return numbersSum; }
Hyp: 
public int OddNumbersSum() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int numbersSum = numbers.Where(n => n % 2 == 1).Sum(); return numbersSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> intTakeCount(int[] numbers, int n) { List<Integer> afterNNumbers = Arrays.stream(numbers).limit(n).boxed().toList(); return afterNNumbers; }
Ref: 
public List<int> IntTakeCount(int[] numbers, int n) { List<int> firstNNumbers = numbers.Take(n).ToList(); return firstNNumbers; }
Hyp: 
public List<int> IntTakeCount(int[] numbers, int n) { List<int> firstNNumbers = numbers.Take(n).ToList(); return firstNNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Order> waCustomerSelectManyNewOrders() { List<Customer> customers = getCustomerList(); List<parallel.linq101.datasource.Order> customerProperties = customers.stream().filter(c -> c.getRegion().equals("WA")).flatMap(c -> c.getOrders() .stream().filter(o -> o.getOrderDate().isAfter(LocalDate.of(1998, 1, 1)))).toList(); return customerProperties; }
Ref: 
public List<Order> WaCustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.Where(c => c.Region == "WA").SelectMany(c=> c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1))).ToList(); return customerProperties; }
Hyp: 
public List<Order> WaCustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)).ToList(); return customerProperties; }

BLEU: 62.23
Edit Sim: 65


Src: 
public List<Double> doubleFractionOrderbyReverse() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<Double> sortedNumbers = Arrays.stream(numbers).map(n -> n-(int)n).boxed().sorted() .collect(collectingAndThen(toList(),l->{Collections.reverse(l);return l;})); return sortedNumbers; }
Ref: 
public List<double> DoubleFractionOrderbyReverse() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Select(n => n-(int)n).OrderBy(n=>n).Reverse().ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleFractionOrderbyReverse() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Select(n => n-(int)n).OrderBy(n=>n).Reverse().ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Double> customerExpensiveOrdersTotalMinDict() { List<Customer> customers = getCustomerList(); Map<String, Double> ordersTotalMin = customers.stream().collect(toMap(c -> c.getCustomerId(), c -> c.getOrders().stream().filter(o -> o.getTotal() > 100) .mapToDouble(o -> o.getTotal()).min().getAsDouble())); return ordersTotalMin; }
Ref: 
public Dictionary<string, double> CustomerExpensiveOrdersTotalMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMin = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Min(o => o.Total)); return ordersTotalMin; }
Hyp: 
public Dictionary<string, double> CustomerExpensiveOrdersTotalMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMin = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Where(o => o.Total > 100).Min(o => o.Total)); return ordersTotalMin; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Boolean, List<Integer>> productGroupByInStockWithIdDictPrint() { List<Product> products = getProductList(); Map<Boolean, List<Integer>> productGroup = products.stream().collect(groupingBy(p -> p.getUnitsInStock() > 0)) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().map(p -> p.getProductId()).toList())); productGroup.get(true).stream().forEach(n -> System.out.print(n)); System.out.println(); productGroup.get(false).stream().forEach(n -> System.out.print(n)); return productGroup; }
Ref: 
public Dictionary<bool, List<int>> ProductGroupByInStockWithIdDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<int>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); productGroup[true].ForEach(p => Console.Write(p)); Console.WriteLine(); productGroup[false].ForEach(p => Console.Write(p)); return productGroup; }
Hyp: 
public Dictionary<bool, List<int>> ProductGroupByInStockWithIdDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<int>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); Console.WriteLine(productGroup); return productGroup; }

BLEU: 74.73
Edit Sim: 91


Src: 
public List<Pair<String, Double>> productCrossJoinCategoriesUnitPrice() { String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"}; List<Product> products = getProductList(); List<Pair<String, Double>> q = Arrays.stream(categories).flatMap( c -> products.stream().filter(p -> p.getCategory().equals(c)).map( p -> Pair.with(c, p.getUnitPrice()))).toList(); return q; }
Ref: 
public List<Tuple<string, double>> ProductCrossJoinCategoriesUnitPrice() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, double>> q = categories.Join(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p.UnitPrice)).ToList(); return q; }
Hyp: 
public List<Tuple<string, double>> ProductCrossJoinCategoriesUnitPrice() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, double>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p.UnitPrice)) .SelectMany(p => p.ProductPrice)).ToList(); return q; }

BLEU: 80.35
Edit Sim: 39


Src: 
public Map<String, Double> customerOrdersTotalMaxDict() { List<Customer> customers = getCustomerList(); Map<String, Double> ordersTotalMax = customers.stream().collect(toMap(c -> c.getCustomerId(), c -> c.getOrders().stream().mapToDouble(o -> o.getTotal()).max().getAsDouble())); return ordersTotalMax; }
Ref: 
public Dictionary<string, double> CustomerOrdersTotalMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMax = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Max(o => o.Total)); return ordersTotalMax; }
Hyp: 
public Dictionary<string, double> CustomerOrdersTotalMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMax = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Max(o => o.Total)); return ordersTotalMax; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> stringTakeCount(String[] strings, int n) { List<String> afterNWords = Arrays.stream(strings).limit(3).toList(); return afterNWords; }
Ref: 
public List<string> StringTakeCount(string[] strings, int n) { List<string> firstNWords = strings.Take(n).ToList(); return firstNWords; }
Hyp: 
public List<string> StringTakeCount(string[] strings, int n) { List<string> firstNWords = strings.Take(n).ToList(); return firstNWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public void numbersTwiceEager() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; AtomicInteger i = new AtomicInteger(0); var q = Arrays.stream(numbers).map(n->n*2).map(n -> i.addAndGet(n)).boxed().toList(); for (var v : q) System.out.println(v + " " + i); }
Ref: 
public void NumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
Hyp: 
public void NumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }

BLEU: 100.0
Edit Sim: 0


Src: 
public double[] doublesConvertToDescendingArrayAndPrintForeach() { double[] doubles = {1.7, 2.3, 1.9, 4.1, 2.9}; double[] doublesArray = Arrays.stream(doubles).boxed().sorted(Comparator.reverseOrder()).mapToDouble(d -> d).toArray(); for (double d : doublesArray) System.out.println(d); return doublesArray; }
Ref: 
public double[] DoublesConvertToDescendingArrayAndPrintForeach() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double[] doublesArray = doubles.OrderByDescending(d => d).ToArray(); foreach (double d in doublesArray) Console.WriteLine(d); return doublesArray; }
Hyp: 
public double[] DoublesConvertToDescendingArrayAndPrintForeach() { double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double[] doublesArray = doubles.OrderByDescending(d => d).ToArray(); foreach (double d in doublesArray) Console.WriteLine(d); return doublesArray; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double expensiveProductUnitPriceSum() { List<Product> products = getProductList(); double totalSum = products.stream().filter(p -> p.getUnitPrice() > 100) .mapToDouble(p -> p.getUnitPrice()).sum(); return totalSum; }
Ref: 
public double ExpensiveProductUnitPriceTotalSum() { List<Product> products = GetProductList(); double totalSum = products.Where(p => p.UnitPrice > 100).Sum(p => p.UnitPrice); return totalSum; }
Hyp: 
public double ExpensiveProductUnitPriceSum() { List<Product> products = GetProductList(); double totalSum = products.Where(p => p.UnitPrice > 100).Sum(p => p.UnitPrice); return totalSum; }

BLEU: 88.67
Edit Sim: 5


Src: 
public List<Double> bigDoubleOrderby() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).filter(n -> n > 5).boxed().sorted().toList(); return sortedNumbers; }
Ref: 
public List<double> BigDoubleOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).OrderBy(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> BigDoubleOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(d => d > 5).OrderBy(n => n).ToList(); return sortedNumbers; }

BLEU: 86.18
Edit Sim: 2


Src: 
public Map<String, Integer> convertTuplesToDictionaryAndPrint() { List<Pair<String,Integer>> scoreRecords = Arrays.asList( Pair.with("Alice", 50), Pair.with("Bob", 40), Pair.with("Cathy", 45)); Map<String, Integer> scoreRecordsDict = scoreRecords.stream().collect(toMap( sr -> sr.getValue0(), sr -> sr.getValue1())); for(var pair : scoreRecordsDict.entrySet()) System.out.println(pair.getKey() + " " + pair.getValue()); return scoreRecordsDict; }
Ref: 
public Dictionary<string, int> ConvertTuplesToDictionaryAndPrint() { List<Tuple<string, int>> scoreRecords =new List<Tuple<string, int>> { Tuple.Create("Alice", 50), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; Dictionary<string, int> scoreRecordsDict = scoreRecords.ToDictionary(sr => sr.Item1, sr => sr.Item2); foreach (var pair in scoreRecordsDict) Console.WriteLine(pair.Key + " " + pair.Value); return scoreRecordsDict; }
Hyp: 
public Dictionary<string, int> ConvertTuplesToDictionaryAndPrint() { List<Tuple<string,int>> scoreRecords = new List<Tuple<string,int>>{ Tuple.Create("Alice", 50), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; Dictionary<string, int> scoreRecordsDict = scoreRecords.ToDictionary( sr => sr.Item1, sr => sr.Item2); foreach (var pair in scoreRecordsDict) Console.WriteLine(pair.Key + " " + pair.Value); return scoreRecordsDict; }

BLEU: 74.23
Edit Sim: 5


Src: 
public List<Product> repeatedProductsWithCount(int count) { List<Product> products = Collections.nCopies(count,Product.DEFAULT); return products; }
Ref: 
public List<Product> RepeatedProductsWithCount(int count) { List<Product> products = Enumerable.Repeat(Product.Default, count).ToList(); return products; }
Hyp: 
public List<Product> RepeatedProductsWithCount(int count) { List<Product> products = Enumerable.Repeat(Product.Default, count).ToList(); return products; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> stringSkipWhileCount(String[] strings, char c) { List<String> afterNWords = Arrays.stream(strings).dropWhile(w -> w.charAt(0) > c).toList(); return afterNWords; }
Ref: 
public List<string> StringSkipWhileCount(string[] strings, char c) { List<string> afterWordsWhile = strings.SkipWhile(w => w[0] > c).ToList(); return afterWordsWhile; }
Hyp: 
public List<string> StringSkipWhileCount(string[] strings, char c) { List<string> afterWordsWhile = strings.SkipWhile(w => w[0] > c).ToList(); return afterWordsWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> intTakeWhileIndexedCount(int n) { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Integer> afterNumbers = IntStream.range(0, numbers.length) .takeWhile(i -> n > i).map(i -> numbers[i]).boxed().toList(); return afterNumbers; }
Ref: 
public List<int> IntTakeWhileIndexedCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbers = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
Hyp: 
public List<int> IntTakeWhileIndexedCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbersWhile; }

BLEU: 86.18
Edit Sim: 10


Src: 
public double inputNumbersAggregate(double[] numbers) { double product = Arrays.stream(numbers).reduce((a, b) -> a * b).getAsDouble(); return product; }
Ref: 
public double InputNumbersAggregate(double[] numbers) { double product = numbers.Aggregate((runningProduct, nextFactor) => runningProduct * nextFactor); return product; }
Hyp: 
public double InputNumbersAggregate(double[] numbers) { double product = numbers.Aggregate((a, b) => a * b); return product; }

BLEU: 55.0
Edit Sim: 48


Src: 
public List<String> stringTakeWhileCount(String[] strings, char c) { List<String> afterNWords = Arrays.stream(strings).takeWhile(w -> w.charAt(0) > c).toList(); return afterNWords; }
Ref: 
public List<string> StringTakeWhileCount(string[] strings, char c) { List<string> firstWordsWhile = strings.TakeWhile(w => w[0] > c).ToList(); return firstWordsWhile; }
Hyp: 
public List<string> StringTakeWhileCount(string[] strings, char c) { List<string> firstWordsWhile = strings.TakeWhile(w => w[0] > c).ToList(); return firstWordsWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> stringLengthTake() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; List<Integer> after3Words = Arrays.stream(words).map(w -> w.length()).limit(3).toList(); return after3Words; }
Ref: 
public List<int> StringLengthTake() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> first3Words = words.Select(w => w.Length).Take(3).ToList(); return first3Words; }
Hyp: 
public List<int> StringLengthTake() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<int> first3Words = words.Select(w => w.Length).Take(3).ToList(); return first3Words; }

BLEU: 100.0
Edit Sim: 0


Src: 
public void stringLengthEager() { String[] words = {"cherry", "apple", "blueberry"}; AtomicInteger i = new AtomicInteger(0); var q = Arrays.stream(words).map(w -> w.length()).map(n -> i.addAndGet(n)).toList(); for (var v : q) System.out.println(v + " " + i); }
Ref: 
public void StringLengthEager() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Select(w => w.Length).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
Hyp: 
public void StringLengthEager() { string[] words = { "cherry", "apple", "blueberry" }; int i = 0; var q = words.Select(w => w.Length).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }

BLEU: 100.0
Edit Sim: 0


Src: 
public int bigNumbersMaxTwice() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int maxNum = Arrays.stream(numbers).filter(n -> n >= 5).map(n -> n * 2).max().getAsInt(); return maxNum; }
Ref: 
public int BigNumbersMaxTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Where(n => n > 5).Max(n => n * 2); return maxNum; }
Hyp: 
public int BigNumbersMaxTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Where(n => n > 5).Max(n => n * 2); return maxNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> productIndexedWhere() { List<Product> products = getProductList(); List<Product> q = IntStream.range(0, products.size()).filter(i -> products.get(i).getUnitsInStock() > 0 && i % 2 == 1).mapToObj(i -> products.get(i)).toList(); return q; }
Ref: 
public List<Product> ProductIndexedWhere() { List<Product> products = GetProductList(); List<Product> q = products.Where((w,i)=>w.UnitsInStock>0&&i%2==1).ToList(); return q; }
Hyp: 
public List<Product> ProductIndexedWhere() { List<Product> products = GetProductList(); List<Product> q = products.Where((p,i)=>p.UnitsInStock==0).ToList(); return q; }

BLEU: 81.54
Edit Sim: 10


Src: 
public List<Pair<String, Product>> productCrossJoinCategories() { String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"}; List<Product> products = getProductList(); List<Pair<String, Product>> q = Arrays.stream(categories).flatMap( c -> products.stream().filter(p -> p.getCategory().equals(c)).map( p -> Pair.with(c, p))).toList(); return q; }
Ref: 
public List<Tuple<string, Product>> ProductCrossJoinCategories() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, Product>> q = categories.Join(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)).ToList(); return q; }
Hyp: 
public List<Tuple<string, Product>> ProductCrossJoinCategories() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, Product>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(p => p.Item1, (c, p) => Tuple.Create(c, p)).ToList(); return q; }

BLEU: 77.29
Edit Sim: 61


Src: 
public int[] shortStringLength() { String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; int[] selected = Arrays.stream(strings).filter(w -> w.length() < 4).mapToInt(w -> w.length()).toArray(); return selected; }
Ref: 
public int[] ShortStringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Where(w => w.Length < 4).Select(w => w.Length).ToArray(); return selected; }
Hyp: 
public int[] ShortStringLength() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int[] selected = strings.Where(w => w.Length < 4).Select(w => w.Length).ToArray(); return selected; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> inStockProductTakeWhile() { List<Product> products = getProductList(); List<Product> after3Products = products.stream().filter(p -> p.getUnitsInStock() > 100).takeWhile(p -> p.getProductId() > 100).toList(); return after3Products; }
Ref: 
public List<Product> InStockProductTakeWhile() { List<Product> products = GetProductList(); List<Product> firstProductsWhile = products.Where(p => p.UnitsInStock > 0).TakeWhile(p => p.ProductId > 100).ToList(); return firstProductsWhile; }
Hyp: 
public List<Product> InStockProductTakeWhile() { List<Product> products = GetProductList(); List<Product> firstProductsWhile = products.Where(p => p.UnitsInStock > 0).TakeWhile(p => p.ProductId > 100).ToList(); return firstProductsWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String,Integer>> convertSelectedTupleToListAndPrint() { Object[] numbers = { Pair.with("Alice", "50"), Pair.with("Bob", 40), Pair.with("Cathy", 45) }; List<Pair<String,Integer>> strings = Arrays.stream(numbers).filter(o->o instanceof Pair && ((Pair)o).getValue0() instanceof String &&((Pair)o).getValue1() instanceof Integer) .map(o->(Pair<String,Integer>)o).toList(); for (var i = 0; i < strings.size(); i++) System.out.println(strings.get(i).getValue0()+":"+ strings.get(i).getValue1()); return strings; }
Ref: 
public List<Tuple<string,int>> ConvertSelectedTupleToListAndPrint() { object[] numbers = { Tuple.Create("Alice", "50"), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; List<Tuple<string,int>> strings = numbers.OfType<Tuple<string,int>>().ToList(); for (var i = 0; i < strings.Count; i++) Console.WriteLine(strings[i].Item1+":"+strings[i].Item2); return strings; }
Hyp: 
public List<Tuple<string,int>> ConvertSelectedTupleToListAndPrint() { object[] numbers = { Tuple.Create("Alice", "50"), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; List<Tuple<string,int>> strings = numbers.OfType<Tuple<string,int>>().ToList(); for (var i = 0; i < strings.Count; i++) Console.WriteLine(strings[i].Item1+":"+strings.Item2); return strings; }

BLEU: 91.85
Edit Sim: 3


Src: 
public int[] transformIndexHashToInt() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int[] textNums = Arrays.stream(numbers).map(n -> numbers[n * 97 % 10]).toArray(); return textNums; }
Ref: 
public int[] TransformIndexHashToInt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] textNums = numbers.Select(n => numbers[n * 97 % 10]).ToArray(); return textNums; }
Hyp: 
public int[] TransformIndexHashToInt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] textNums = numbers.Select(n => n * 97 % 10]).ToArray(); return textNums; }

BLEU: 91.85
Edit Sim: 8


Src: 
public int expensiveOrdersCount(String region) { List<Customer> customers = getCustomerList(); int count = (int) customers.stream().flatMap(c -> c.getOrders().stream()) .filter(o -> o.getTotal() > 100).count(); return count; }
Ref: 
public int ExpensiveOrdersCount(string region) { List<Customer> customers = GetCustomerList(); int count = customers.SelectMany(c => c.Orders).Count(o => o.Total > 100); return count; }
Hyp: 
public int ExpensiveOrdersCount(string region) { List<Customer> customers = GetCustomerList(); int count = customers.SelectMany(c => c.Orders).Count(o => o.Total > 100).Count(); return count; }

BLEU: 87.87
Edit Sim: 8


Src: 
public Map<String, Integer> convertTuplesToDictionary() { List<Pair<String,Integer>> scoreRecords = Arrays.asList( Pair.with("Alice", 50), Pair.with("Bob", 40), Pair.with("Cathy", 45)); Map<String, Integer> scoreRecordsDict = scoreRecords.stream().collect(toMap( sr -> sr.getValue0(), sr -> sr.getValue1())); return scoreRecordsDict; }
Ref: 
public Dictionary<string, int> ConvertTuplesToDictionary() { List<Tuple<string, int>> scoreRecords =new List<Tuple<string, int>> { Tuple.Create("Alice", 50), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; Dictionary<string, int> scoreRecordsDict = scoreRecords.ToDictionary(sr => sr.Item1, sr => sr.Item2); return scoreRecordsDict; }
Hyp: 
public Dictionary<string, int> ConvertTuplesToDictionary() { List<Tuple<string,int>> scoreRecords = new List<Tuple<string,int>>{ Tuple.Create("Alice", 50), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; Dictionary<string, int> scoreRecordsDict = scoreRecords.ToDictionary( sr => sr.Item1, sr => sr.Item2); return scoreRecordsDict; }

BLEU: 64.87
Edit Sim: 5


Src: 
public double numbersDoubledAggregateMultiplyWithSeed() { double[] numbers = {1.7, 2.3, 1.9, 4.1, 2.9}; double seed = 1.6; double product = product = Arrays.stream(numbers).map(n -> n * 2).reduce(seed, (a, b) -> a * b); return product; }
Ref: 
public double NumbersDoubledAggregateMultiplyWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 1.6; double product = numbers.Select(n => n * 2).Aggregate(seed, (a, b) => a * b); return product; }
Hyp: 
public double NumbersDoubledAggregateMultiplyWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 1.6; double product = numbers.Select(n => n * 2).Aggregate((a, b) => a * b); return product; }

BLEU: 89.67
Edit Sim: 6


Src: 
public Map<String, List<Double>> productGroupUnitPriceDict() { List<Product> products = getProductList(); Map<String, List<Double>> productNames = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().map(p -> p.getUnitPrice()).toList())); return productNames; }
Ref: 
public Dictionary<string, List<double>> ProductGroupUnitPriceDict() { List<Product> products = GetProductList(); Dictionary<string, List<double>> productNames = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.UnitPrice).ToList()); return productNames; }
Hyp: 
public Dictionary<string, List<double>> ProductGroupUnitPriceDict() { List<Product> products = GetProductList(); Dictionary<string, List<double>> productNames = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.UnitPrice).ToList()); return productNames; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int[] intTwice() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int[] numSelected = Arrays.stream(numbers).map(n -> n * 2).toArray(); return numSelected; }
Ref: 
public int[] IntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select(n => n * 2).ToArray(); return numSelected; }
Hyp: 
public int[] IntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Select(n => n * 2).ToArray(); return numSelected; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Double>> customerInRegionOrdersTotalMin(String region) { List<Customer> customers = getCustomerList(); List<Pair<String, Double>> ordersTotalMin = customers.stream().filter(c -> c.getRegion().equals(region)) .map(c -> Pair.with(c.getCustomerId(), c.getOrders().stream().mapToDouble(o -> o.getTotal()).min().getAsDouble())).toList(); return ordersTotalMin; }
Ref: 
public List<Tuple<string, double>> CustomerInRegionOrdersTotalMin(string region) { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMin = customers.Where(c => c.Region.Equals(region)) .Select(c => Tuple.Create(c.CustomerId, c.Orders.Min(o => o.Total))).ToList(); return ordersTotalMin; }
Hyp: 
public List<Tuple<string, double>> CustomerInRegionOrdersTotalMin(string region) { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMin = customers.Where(c => c.Region.Equals(region)) .Select(c => Tuple.Create(c.CustomerId, c.Orders.Min(o => o.Total))).ToList(); return ordersTotalMin; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> outOfStockProductUnitPrice() { List<Product> products = getProductList(); List<Double> productNames = products.stream().filter(p -> p.getUnitsInStock() == 0).map(p -> p.getUnitPrice()).toList(); return productNames; }
Ref: 
public List<double> OutOfStockProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Where(p => p.UnitsInStock == 0).Select(p => p.UnitPrice).ToList(); return productNames; }
Hyp: 
public List<double> OutOfStockProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Where(p => p.UnitsInStock == 0).Select(p => p.UnitPrice).ToList(); return productNames; }

BLEU: 100.0
Edit Sim: 0


Src: 
public boolean equalInts() { int[] numbersA = {0, 2, 4, 5, 9}; int[] numbersB = {0, 2, 4, 5, 9}; boolean equal = Arrays.equals(numbersA, numbersB); return equal; }
Ref: 
public bool EqualInts() { int[] numbersA = { 0, 2, 4, 5, 9 }; int[] numbersB = { 0, 2, 4, 5, 9 }; bool equal = numbersA.SequenceEqual(numbersB); return equal; }
Hyp: 
public bool EqualInts() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; bool equal = numbersA.SequenceEqual(numbersB); return equal; }

BLEU: 69.12
Edit Sim: 11


Src: 
public Product[] productsConvertToDescendingArrayAndPrintForeach() { List<Product> products = getProductList(); Product[] productsArray = (Product[]) products.stream().sorted(Comparator.comparing( p -> p.getUnitPrice(), Comparator.reverseOrder())).toArray(); for (Product p : productsArray) System.out.println(p); return productsArray; }
Ref: 
public Product[] ProductsConvertToDescendingArrayAndPrintForeach() { List<Product> products = GetProductList(); Product[] productsArray = products.OrderByDescending(p => p.UnitPrice).ToArray(); foreach (Product p in productsArray) Console.WriteLine(p); return productsArray; }
Hyp: 
public Product[] ProductsConvertToDescendingArrayAndPrintForeach() { List<Product> products = GetProductList(); Product[] productsArray = products.OrderByDescending(p => p.UnitPrice).ToArray(); foreach (Product p in productsArray) Console.WriteLine(p); return productsArray; }

BLEU: 100.0
Edit Sim: 0


Src: 
public boolean intAnyMatchInput(int i) { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; boolean anyMatch = Arrays.stream(numbers).anyMatch(n -> n > i); return anyMatch; }
Ref: 
public bool IntAnyMatchInput(int i) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool anyMatch = numbers.Any(n => n > i); return anyMatch; }
Hyp: 
public bool IntAnyMatchInput(int i) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool anyMatch = numbers.Any(n => n > i); return anyMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> longStringIndexedWhere() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; String[] longWords = (String[]) Arrays.stream(words).filter(w -> w.length() > 5).toArray(); List<String> q = IntStream.range(0, longWords.length).filter(i -> longWords[i].length() < i * 3) .mapToObj(i -> longWords[i]).toList(); return q; }
Ref: 
public List<string> LongStringIndexedWhere() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> q =words.Where(w=>w.Length>5).Where((w,i)=>w.Length<i*3).ToList(); return q; }
Hyp: 
public List<string> LongStringIndexedWhere() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> q = words.Where(w => w.Length > 5).Where((w,i)=>w.Length<i*3).ToList(); return q; }

BLEU: 68.85
Edit Sim: 5


Src: 
public List<String> stringOrderbyLengthCustomThenby() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; List<String> sortedWords =  Arrays.stream(words).sorted(Comparator.comparing((String w) -> w.length(), new CustomNumberComparer()).thenComparing(Comparator.naturalOrder())).toList(); return sortedWords; }
Ref: 
public List<string> StringOrderbyLengthCustomThenby() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()).ThenBy(w=>w).ToList(); return sortedWords; }
Hyp: 
public List<string> StringOrderbyLengthCustomThenby() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> sortedWords = words.OrderBy(w => w.Length, new CustomNumberComparer()).ThenBy(w=>w,new CustomNumberComparer()).ToList(); return sortedWords; }

BLEU: 67.4
Edit Sim: 29


Src: 
public List<Pair<String, Integer>> countRegionDistinctCustomer() { List<Customer> customers = getCustomerList(); List<Pair<String, Integer>> regionCounts = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().map(g -> Pair.with(g.getKey(), (int) g.getValue().stream().distinct().count())).toList(); return regionCounts; }
Ref: 
public List<Tuple<String,int>> CountRegionDistinctCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<String,int>> regionCounts = customers.GroupBy(c=>c.Region) .Select(g=>Tuple.Create(g.Key, g.Distinct().Count())).ToList(); return regionCounts; }
Hyp: 
public List<Tuple<String,int>> CountRegionDistinctCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<String,int>> regionCounts = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.Distinct().Count())).ToList(); return regionCounts; }

BLEU: 62.55
Edit Sim: 4


Src: 
public int[] transformIndexToInt() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int[] textNums = Arrays.stream(numbers).map(n -> numbers[n]).toArray(); return textNums; }
Ref: 
public int[] TransformIndexToInt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] textNums = numbers.Select(n => numbers[n]).ToArray(); return textNums; }
Hyp: 
public int[] TransformIndexToInt() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] textNums = numbers.Select(n => n).ToArray(); return textNums; }

BLEU: 90.62
Edit Sim: 9


Src: 
public List<Double> doubleOrderbyModThenby() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).boxed().sorted( Comparator.comparing((Double n) -> n % 1.5) .thenComparing(Comparator.naturalOrder())).toList(); return sortedNumbers; }
Ref: 
public List<double> DoubleOrderbyModThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleOrderbyModThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n % 1.5).ThenBy(n => n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double expensiveProductUnitPriceAggregateAverageWithSeed() { List<Product> products = getProductList(); double seed = 15.5; double aggregateSum = products.stream().map(p -> p.getUnitPrice()).filter(d -> d > 100) .reduce(seed,(a, b) ->(a + b) / 2); return aggregateSum; }
Ref: 
public double ExpensiveProductUnitPriceAggregateAverageWithSeed() { List<Product> products = GetProductList(); double seed = 15.5; double aggregateSum = products.Select(p => p.UnitPrice).Where(d => d > 100) .Aggregate(seed, (a, b) => (a + b) / 2); return aggregateSum; }
Hyp: 
public double ExpensiveProductUnitPriceAggregateAverageWithSeed() { List<Product> products = GetProductList(); double aggregateSum = products.Select(p => p.UnitPrice).Aggregate(d => d / 100).Average(a => a + b); return aggregateSum; }

BLEU: 39.8
Edit Sim: 51


Src: 
public List<String> expensiveProductNameOrderbyDescending() { List<Product> products = getProductList(); List<String> sortedProducts = products.stream().filter(p -> p.getUnitPrice() > 100) .map(p -> p.getProductName()).sorted(Comparator.reverseOrder()).toList(); return sortedProducts; }
Ref: 
public List<string> ExpensiveProductNameOrderbyDescending() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Where(p=>p.UnitPrice>100).Select(p => p.ProductName).OrderByDescending(n=>n).ToList(); return sortedProducts; }
Hyp: 
public List<string> ExpensiveProductNameOrderbyDescending() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Where(p=>p.UnitPrice>100).Select(p => p.ProductName).OrderByDescending(n=>n).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Character[] projectionStringExcept() { String[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; String[] wordsB = {"Cafe", "Bar", "Restaurant"}; var first = Arrays.stream(wordsA).map(n -> n.charAt(0)); var second = Arrays.stream(wordsB).map(n -> n.charAt(0)); Character[] differemtWords = (Character[]) first.distinct().filter(a -> second.allMatch(b -> b != a)).toArray(); return differemtWords; }
Ref: 
public char[] ProjectionStringExcept() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; var first = wordsA.Select(n => n[0]); var second = wordsB.Select(n => n[0]); char[] words = first.Except(second).ToArray(); return words; }
Hyp: 
public char[] ProjectionStringExcept() { string[] wordsA = { "Alice", "Bob", "Foo", "Bar" }; string[] wordsB = { "Cafe", "Bar", "Restaurant" }; char[] differentWords = wordsA.Select(n => n[0]); var first = wordsB.Select(n => n[0]); var second = first.Except(second).ToArray(); return differentWords; }

BLEU: 46.55
Edit Sim: 43


Src: 
public Map<String, List<Product>> productEachGroupSkip() { List<Product> products = getProductList(); Map<String, List<Product>> after3EachGroups = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().skip(3).toList())); return after3EachGroups; }
Ref: 
public Dictionary<string, List<Product>> ProductEachGroupSkip() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> after3EachGroups = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Skip(3).ToList()); return after3EachGroups; }
Hyp: 
public Dictionary<string, List<Product>> ProductEachGroupSkip() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> after3EachGroups = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Skip(3).ToList()); return after3EachGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Product>> productEachCategoryElementAt() { List<Product> products = getProductList(); List<Pair<String, Product>> categories = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().skip(1).findFirst().get())).toList(); return categories; }
Ref: 
public List<Tuple<string, Product>> ProductEachCategoryElementAt() { List<Product> products = GetProductList(); List<Tuple<string, Product>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.ElementAt(1))).ToList(); return categories; }
Hyp: 
public List<Tuple<string, Product>> ProductEachCategoryElementAt() { List<Product> products = GetProductList(); List<Tuple<string, Product>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.ElementAt(1))).ToList(); return categories; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> stringOrderbyThenbyLengthCustom() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; List<String> sortedWords = Arrays.stream(words).sorted(Comparator.comparing((String w) -> w) .thenComparing(w -> w.length(),new CustomNumberComparer())).toList(); return sortedWords; }
Ref: 
public List<string> StringOrderbyThenbyLengthCustom() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w) .ThenBy(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
Hyp: 
public List<string> StringOrderbyThenbyLengthCustom() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> sortedWords = words.OrderBy(w => w) .ThenBy(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }

BLEU: 81.2
Edit Sim: 2


Src: 
public int distinctProductCategoryCount() { List<Product> products = getProductList(); int count = (int) products.stream().map(p -> p.getCategory()).distinct().count(); return count; }
Ref: 
public int DistinctProductCategoryCount() { List<Product> products = GetProductList(); int count = products.Select(p => p.Category).Distinct().Count(); return count; }
Hyp: 
public int DistinctProductCategoryCount() { List<Product> products = GetProductList(); int count = products.Select(p => p.Category).Distinct().Count(); return count; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, List<Customer>> customerEachCountryOrdersMaxCustomerDict() { List<Customer> customers = getCustomerList(); Map<String, List<Customer>> customerOrdersMax = customers.stream().collect(groupingBy(c -> c.getCountry())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream(). collect(groupingBy(c -> c.getOrders().size())).entrySet() .stream().max(Map.Entry.comparingByKey()).get().getValue())); return customerOrdersMax; }
Ref: 
public Dictionary<string, List<Customer>> CustomerEachCountryOrdersMaxCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersMax = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Where(c => c.Orders.Count ==g.Max(c => c.Orders.Count)).ToList()); return customerOrdersMax; }
Hyp: 
public Dictionary<string, List<Customer>> CustomerEachCountryOrdersMaxCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersMax = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g=> g.Where(c => c.Orders.Count ==g.Max(c => c.Orders.Count)).ToList()); return customerOrdersMax; }

BLEU: 87.88
Edit Sim: 1


Src: 
public int bigNumbersMinTwice() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int minNum = Arrays.stream(numbers).filter(n -> n >= 5).map(n -> n * 2).min().getAsInt(); return minNum; }
Ref: 
public int BigNumbersMinTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Where(n => n > 5).Min(n => n * 2); return minNum; }
Hyp: 
public int BigNumbersMinTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Where(n => n > 5).Min(n => n * 2); return minNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, String>> customerIdAndName() { List<Customer> customers = getCustomerList(); List<Pair<String, String>> customerProperties = customers.stream().map(c -> Pair.with(c.getCustomerId(), c.getCompanyName())).toList(); return customerProperties; }
Ref: 
public List<Tuple<string,string>> CustomerIdAndName() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId,c.CompanyName)).ToList(); return customerProperties; }
Hyp: 
public List<Tuple<string,string>> CustomerIdAndName() { List<Customer> customers = GetCustomerList(); List<Tuple<string,string>> customerProperties = customers.Select(c=> Tuple.Create(c.CustomerId, c.CompanyName)).ToList(); return customerProperties; }

BLEU: 77.78
Edit Sim: 1


Src: 
public List<Pair<Boolean, List<Product>>> productGroupByInStock() { List<Product> products = getProductList(); List<Pair<Boolean, List<Product>>> productGroup = products.stream().collect(groupingBy(p -> p.getUnitsInStock() > 0)) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue())).toList(); return productGroup; }
Ref: 
public List<Tuple<bool, List<Product>>> ProductGroupByInStock() { List<Product> products = GetProductList(); List<Tuple<bool, List<Product>>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return productGroup; }
Hyp: 
public List<Tuple<bool, List<Product>>> ProductGroupByInStock() { List<Product> products = GetProductList(); List<Tuple<bool, List<Product>>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return productGroup; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double[] projectionDoubleConcat() { double[] numbersA = {0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7}; double[] numbersB = {0.1, 3.3, 5.4, 7.7, 8.6}; var first = Arrays.stream(numbersA).map(n -> n - (int) n); var second = Arrays.stream(numbersB).map(n -> n - (int) n); double[] allNumbers = DoubleStream.concat(first, second).toArray(); return allNumbers; }
Ref: 
public double[] ProjectionDoubleConcat() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n - (int)n); var second = numbersB.Select(n => n - (int)n); double[] numbers = first.Concat(second).ToArray(); return numbers; }
Hyp: 
public double[] ProjectionDoubleConcat() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] allNumbers = numbersA.Select(n => n-(int)n); return allNumbers; }

BLEU: 53.57
Edit Sim: 106


Src: 
public Product[] productsConvertToArray() { List<Product> products = getProductList(); Product[] productsArray = (Product[]) products.stream().sorted(Comparator.comparing( p -> p.getUnitPrice())).toArray(); return productsArray; }
Ref: 
public Product[] ProductsConvertToArray() { List<Product> products = GetProductList(); Product[] productsArray = products.OrderBy(p => p.UnitPrice).ToArray(); return productsArray; }
Hyp: 
public Product[] ProductsConvertToArray() { List<Product> products = GetProductList(); Product[] productsArray = products.OrderBy(p => p.UnitPrice).ToArray(); return productsArray; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> doubleOrderbyFraction() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).boxed().sorted(Comparator.comparing(n -> n - (int) n.doubleValue())).toList(); return sortedNumbers; }
Ref: 
public List<double> DoubleOrderbyFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n-(int)n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleOrderbyFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n-(int)n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double expensiveProductUnitPriceAverage() { List<Product> products = getProductList(); double averageUnitPrice = products.stream().filter(p -> p.getUnitPrice() > 100) .mapToDouble(p -> p.getUnitPrice()).average().getAsDouble(); return averageUnitPrice; }
Ref: 
public double ExpensiveProductUnitPriceAverage() { List<Product> products = GetProductList(); double averageUnitPrice = products.Where(p => p.UnitPrice > 100).Average(p => p.UnitPrice); return averageUnitPrice; }
Hyp: 
public double ExpensiveProductUnitPriceAverage() { List<Product> products = GetProductList(); double averageUnitPrice = products.Where(p => p.UnitPrice > 100).Average(p => p.UnitPrice); return averageUnitPrice; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> repeatedProducts() { List<Product> products = Collections.nCopies(30,Product.DEFAULT); return products; }
Ref: 
public List<Product> RepeatedProducts() { List<Product> products = Enumerable.Repeat(Product.Default, 30).ToList(); return products; }
Hyp: 
public List<Product> RepeatedProducts() { List<Product> products = Enumerable.Repeat(Product.Default, 30).ToList(); return products; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int projectedStringFirstOrDefault() { String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; int firstStringLength = Arrays.stream(strings).mapToInt(s -> s.length()).filter(i -> i % 2 == 0).findFirst().orElse(-1); return firstStringLength; }
Ref: 
public int ProjectedStringFirstOrDefault() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int firstStringLength = strings.Select(s => s.Length) .FirstOrDefault(i => i % 2 == 0,-1); return firstStringLength; }
Hyp: 
public int ProjectedStringFirstOrDefault() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; int firstStringLength = strings.Select(s => s.Length).FirstOrDefault(i => i % 2 == 1,-1); return firstStringLength; }

BLEU: 82.08
Edit Sim: 2


Src: 
public List<Pair<String,Integer>> convertSelectedTupleToList() { Object[] numbers = { Pair.with("Alice", "50"), Pair.with("Bob", 40), Pair.with("Cathy", 45) }; List<Pair<String,Integer>> strings = Arrays.stream(numbers).filter(o->o instanceof Pair && ((Pair)o).getValue0() instanceof String &&((Pair)o).getValue1() instanceof Integer) .map(o->(Pair<String,Integer>)o).toList(); return strings; }
Ref: 
public List<Tuple<string,int>> ConvertSelectedTupleToList() { object[] numbers = { Tuple.Create("Alice", "50"), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; List<Tuple<string,int>> strings = numbers.OfType<Tuple<string,int>>().ToList(); return strings; }
Hyp: 
public List<Tuple<string,int>> ConvertSelectedTupleToList() { object[] numbers = { Tuple.Create("Alice", "50"), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; List<Tuple<string,int>> strings = numbers.OfType<Tuple<string,int>>().ToList(); return strings; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> intTakeWhile() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Integer> after3Numbers = Arrays.stream(numbers).takeWhile(i -> i > 3).boxed().toList(); return after3Numbers; }
Ref: 
public List<int> IntTakeWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.TakeWhile(i => i > 3).ToList(); return firstNumbersWhile; }
Hyp: 
public List<int> IntTakeWhile() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> firstNumbersWhile = numbers.TakeWhile(i => i > 3).ToList(); return firstNumbersWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Triplet<String, Integer, String>> customerCrossJoinRegionsWithCodeNameRegion() { List<Pair<String, Integer>> regions = Arrays.asList( Pair.with("BC", 101), Pair.with("BC", 105), Pair.with("OR", 121), Pair.with("LA", 143) ); List<Customer> customers = getCustomerList(); List<Triplet<String, Integer, String>> q = regions.stream().flatMap( r -> customers.stream().filter(c -> c.getRegion().equals(r.getValue0())).map( c -> Triplet.with(r.getValue0(), r.getValue1(), c.getCompanyName()))).toList(); return q; }
Ref: 
public List<Tuple<string, int, string>> CustomerCrossJoinRegionsWithCodeNameRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<string, int, string>> q = regions.Join(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item1, r.Item2, c.CompanyName)).ToList(); return q; }
Hyp: 
public List<Tuple<string,int,string>> CustomerCrossJoinRegionsWithCodeNameRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<string,int,string>> q = regions.SelectMany(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c.CompanyName)).SelectMany(c=>c.CompanyName).ToList(); return q; }

BLEU: 66.73
Edit Sim: 43


Src: 
public List<Product> productsConvertToList() { List<Product> products = getProductList(); List<Product> productsList = products.stream().sorted(Comparator.comparing(p -> p.getUnitPrice())).toList(); return productsList; }
Ref: 
public List<Product> ProductsConvertToList() { List<Product> products = GetProductList(); List<Product> productsList = products.OrderBy(p => p.UnitPrice).ToList(); return productsList; }
Hyp: 
public List<Product> ProductsConvertToList() { List<Product> products = GetProductList(); List<Product> productsList = products.OrderBy(p => p.UnitPrice).ToList(); return productsList; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> repeatedProductsWithBase(Product product) { List<Product> products = Collections.nCopies(10,product); return products; }
Ref: 
public List<Product> RepeatedProductsWithBase(Product product) { List<Product> products = Enumerable.Repeat(product, 10).ToList(); return products; }
Hyp: 
public List<Product> RepeatedProductsWithBase(Product product) { List<Product> products = Enumerable.Range(product, 10).ToList(); return products; }

BLEU: 78.25
Edit Sim: 5


Src: 
public List<Pair<String, List<Product>>> productGroupByCategoryOrderbyId() { List<Product> products = getProductList(); List<Pair<String, List<Product>>> productsGroups = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream() .sorted(Comparator.comparing(p -> p.getProductId())).toList())).toList(); return productsGroups; }
Ref: 
public List<Tuple<string,List<Product>>> ProductGroupByCategoryOrderbyId() { List<Product> products = GetProductList(); List<Tuple<string,List<Product>>> productsGroups = products.GroupBy(p=>p.Category) .Select(g => Tuple.Create(g.Key,g.OrderBy(p=>p.ProductId).ToList())).ToList(); return productsGroups; }
Hyp: 
public List<Tuple<string,List<Product>>> ProductGroupByCategoryOrderbyId() { List<Product> products = GetProductList(); List<Tuple<string,List<Product>>> productsGroups = products.GroupBy(p=>p.Category) .Select(g => Tuple.Create(g.Key,g.OrderBy(p=>p.ProductId).ToList())).ToList(); return productsGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Integer> customerEachRegionOrdersSumDict() { List<Customer> customers = getCustomerList(); Map<String, Integer> ordersSum = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().mapToInt(c -> c.getOrders().size()).sum())); return ordersSum; }
Ref: 
public Dictionary<string, int> CustomerEachRegionOrdersSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersTotalSum = customers.GroupBy(c => c.Region) .ToDictionary(g=>g.Key, g=>g.Sum(c=>c.Orders.Count)); return ordersTotalSum; }
Hyp: 
public Dictionary<string, int> CustomerEachRegionOrdersSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersSum = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.Sum(c => c.Orders.Count)); return ordersSum; }

BLEU: 49.81
Edit Sim: 16


Src: 
public List<String> stringIndexedWhere() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; IntStream.range(0, words.length).filter(i -> words[i].length() < i).mapToObj(i -> words[i]).toList(); List<String> q = IntStream.range(0, words.length).filter(i -> words[i].length() < i).mapToObj(i -> words[i]).toList(); return q; }
Ref: 
public List<string> StringIndexedWhere() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> q = words.Where((w,i)=>w.Length<i).ToList(); return q; }
Hyp: 
public List<string> StringIndexedWhere() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> q = words.Where((w,i)=>w.Length<i).ToList(); return q; }

BLEU: 100.0
Edit Sim: 0


Src: 
public boolean categoryProductAnyMatch() { List<Product> products = getProductList(); boolean anyMatch = products.stream().filter(p -> p.getCategory() == "Beverages").anyMatch(p -> p.getUnitsInStock() > 0); return anyMatch; }
Ref: 
public bool CategoryProductAnyMatch() { List<Product> products = GetProductList(); bool anyMatch = products.Where(p => p.Category == "Beverages").Any(p => p.UnitsInStock > 0); return anyMatch; }
Hyp: 
public bool CategoryProductAnyMatch() { List<Product> products = GetProductList(); bool anyMatch = products.Where(p => p.Category == "Beverages").Any(p => p.UnitsInStock > 0); return anyMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Product>> productEachCategoryFirst() { List<Product> products = getProductList(); List<Pair<String, Product>> categories = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().findFirst().get())).toList(); return categories; }
Ref: 
public List<Tuple<string, Product>> ProductEachCategoryFirst() { List<Product> products = GetProductList(); List<Tuple<string, Product>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.First())).ToList(); return categories; }
Hyp: 
public List<Tuple<string, Product>> ProductEachCategoryFirst() { List<Product> products = GetProductList(); List<Tuple<string, Product>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.First())).ToList(); return categories; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double doubleFirst() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; double firstNum = Arrays.stream(numbers).findFirst().getAsDouble(); return firstNum; }
Ref: 
public double DoubleFirst() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.First(); return firstNum; }
Hyp: 
public double DoubleFirst() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.First(); return firstNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> shortStringLengthOrderbyDescending() { String[] words = {"cherry", "apple", "blueberry", "pear", "peach", "melon"}; List<Integer> sortedWords = Arrays.stream(words).filter(w -> w.length() < 6).map(w -> w.length()) .sorted(Comparator.reverseOrder()).toList(); return sortedWords; }
Ref: 
public List<int> ShortStringLengthOrderbyDescending() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<int> sortedWords = words.Where(w => w.Length < 6).Select(w => w.Length).OrderByDescending(w => w).ToList(); return sortedWords; }
Hyp: 
public List<int> ShortStringLengthOrderbyDescending() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<int> sortedWords = words.Where(w => w.Length < 6).Select(w => w.Length).OrderByDescending(w => w).ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> bigDoubleFractionOrderby() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).filter(n -> n > 5).map(n -> n - (int) n).boxed().sorted().toList(); return sortedNumbers; }
Ref: 
public List<double> BigDoubleFractionOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).Select(n => n-(int)n).OrderBy(n=>n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> BigDoubleFractionOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).Select(n => n-(int)n).OrderBy(n=>n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String,Integer> convertSelectedTupleToDictionaryAndPrint() { Object[] numbers = { Pair.with("Alice", "50"), Pair.with("Bob", 40), Pair.with("Cathy", 45) }; Map<String,Integer> strings = Arrays.stream(numbers).filter(o->o instanceof Pair && ((Pair)o).getValue0() instanceof String &&((Pair)o).getValue1() instanceof Integer) .map(o->(Pair<String,Integer>)o).collect(toMap(p->p.getValue0(),p->p.getValue1())); for (var pair : strings.entrySet()) System.out.println(pair.getKey()+":"+pair.getValue()); return strings; }
Ref: 
public Dictionary<string,int> ConvertSelectedTupleToDictionaryAndPrint() { object[] numbers = { Tuple.Create("Alice", "50"), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; Dictionary<string,int> strings = numbers.OfType<Tuple<string,int>>().ToDictionary( t=>t.Item1,t=>t.Item2); foreach (var pair in strings) Console.WriteLine(pair.Key+":"+pair.Value); return strings; }
Hyp: 
public Dictionary<string,int> ConvertSelectedTupleToDictionaryAndPrint() { object[] numbers = { Tuple.Create("Alice", "50"), Tuple.Create("Bob", 40), Tuple.Create("Cathy", 45) }; Dictionary<string,int> strings = numbers.OfType<Tuple<string,int>>().ToDictionary( t=>t.Item1,t=>t.Item2); foreach (var pair in strings) Console.WriteLine(pair.Key+":"+pair.Value); return strings; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double bigDoubleNumbersSum() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; double numbersSum = Arrays.stream(numbers).filter(n -> n >= 5).sum(); return numbersSum; }
Ref: 
public double BigDoubleNumbersSum() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double numbersSum = numbers.Where(d => d > 5).Sum(); return numbersSum; }
Hyp: 
public double BigDoubleNumbersSum() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double numbersSum = numbers.Where(d => d > 5).Sum(); return numbersSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> intIndexedWhere() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Integer> q = IntStream.range(0, numbers.length).filter(i -> numbers[i] < i).map(i -> numbers[i]).boxed().toList(); return q; }
Ref: 
public List<int> IntIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Where((n,i)=>n<i).ToList(); return q; }
Hyp: 
public List<int> IntIndexedWhere() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> q = numbers.Select((n, i) => n<i).Where((n,i)=>n<i).ToList(); return q; }

BLEU: 80.38
Edit Sim: 22


Src: 
public int[] oddIntPlusOne() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int[] numSelected = Arrays.stream(numbers).filter(n -> n % 2 == 1).map(n -> n + 1).toArray(); return numSelected; }
Ref: 
public int[] OddIntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select(n => n + 1).ToArray(); return numSelected; }
Hyp: 
public int[] OddIntPlusOne() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n % 2 == 1).Select(n => n + 1).ToArray(); return numSelected; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<Boolean, List<String>>> stringGroupByLengthOrderbyLengthCustom() { String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"}; List<Pair<Boolean, List<String>>> wordsGroups = Arrays.stream(words).collect(groupingBy(w -> w.length() > 8)) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().sorted( Comparator.comparing(w -> w.length(), new CustomNumberComparer())).toList())).toList(); return wordsGroups; }
Ref: 
public List<Tuple<bool, List<string>>> StringGroupByLengthOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w.Length,new CustomNumberComparer()).ToList())).ToList(); return wordsGroups; }
Hyp: 
public List<Tuple<bool, List<string>>> StringGroupByLengthOrderbyLengthCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<bool, List<string>>> wordsGroups = words.GroupBy(w => w.Length > 8) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w.Length,new CustomNumberComparer()).ToList())).ToList(); return wordsGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> concatOfRegion() { String[] regions = {"WA", "AF", "RO"}; List<Customer> customers = getCustomerList(); var customerRegions = customers.stream().map(c -> c.getRegion()); List<String> allRegions = Stream.concat(customerRegions, Arrays.stream(regions)).toList(); return allRegions; }
Ref: 
public List<string> ConcatOfRegion() { string[] regions = { "WA", "AF", "RO" }; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> allRegions = customerRegions.Concat(regions).ToList(); return allRegions; }
Hyp: 
public List<string> ConcatOfRegion() { string[] regions = { "WA", "AF", "RO" }; List<Customer> customers = GetCustomerList(); var customerRegions = customers.Select(c => c.Region); List<string> allRegions = customerRegions.Concat(regions).ToList(); return allRegions; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> doubleOrderbyFractionThenby() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).boxed().sorted( Comparator.comparing((Double n) -> n - (int) n.doubleValue()) .thenComparing(Comparator.naturalOrder())).toList(); return sortedNumbers; }
Ref: 
public List<double> DoubleOrderbyFractionThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleOrderbyFractionThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Order>> waCustomerSelectManyCustomerNewOrders() { List<Customer> customers = getCustomerList(); List<Pair<String, Order>> customerProperties = customers.stream().filter(c -> c.getRegion().equals("WA")).flatMap(c -> c.getOrders() .stream().filter(o -> o.getOrderDate().isAfter(LocalDate.of(1998, 1, 1))) .map(o -> Pair.with(c.getCustomerId(), o))).toList(); return customerProperties; }
Ref: 
public List<Tuple<string,Order>> WaCustomerSelectManyCustomerNewOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }
Hyp: 
public List<Tuple<string,Order>> WaCustomerSelectManyCustomerNewOrders() { List<Customer> customers = GetCustomerList(); List<Tuple<string,Order>> customerProperties = customers.Where(c => c.Region == "WA").SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o)).ToList(); return customerProperties; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Order> customerSelectManyNewOrders() { List<Customer> customers = getCustomerList(); List<Order> customerProperties = customers.stream().flatMap(c -> c.getOrders() .stream().filter(o -> o.getOrderDate().isAfter(LocalDate.of(1998, 1, 1)))).toList(); return customerProperties; }
Ref: 
public List<Order> CustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1))).ToList(); return customerProperties; }
Hyp: 
public List<Order> CustomerSelectManyNewOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>o.OrderDate>new DateTime(1998, 1, 1)).ToList(); return customerProperties; }

BLEU: 55.13
Edit Sim: 47


Src: 
public List<Double> bigDoubleOrderbyModThenbyDescending() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).filter(n->n>3).boxed().sorted( Comparator.comparing((Double n) -> n % 1.5) .thenComparing(Comparator.reverseOrder())).toList(); return sortedNumbers; }
Ref: 
public List<double> BigDoubleOrderbyModThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> BigDoubleOrderbyModThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n=>n>3).OrderBy(n => n % 1.5).ThenByDescending(n => n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int[] intZipAdd() { int[] numbersA = {0, 2, 4, 5, 6, 8, 9}; int[] numbersB = {1, 3, 5, 7, 8, 10, 11}; int length = numbersA.length; int[] addNumbers = IntStream.range(0, length).map(i -> numbersA[i] + numbersB[i]).toArray(); return addNumbers; }
Ref: 
public int[] IntZipAdd() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int[] addNumbers = numbersA.Zip(numbersB, (a, b) => a + b).ToArray(); return addNumbers; }
Hyp: 
public int[] IntZipAdd() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int[] addNumbers = numbersA.Zip(numbersB, (a, b) => a + b).ToArray(); return addNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<Boolean, List<Integer>>> intGroupByBool() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Pair<Boolean, List<Integer>>> numberGroups = Arrays.stream(numbers).boxed().collect(groupingBy(n -> n > 4)) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue())).toList(); return numberGroups; }
Ref: 
public List<Tuple<bool, List<int>>> IntGroupByBool() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<Tuple<bool, List<int>>> numberGroups = numbers.GroupBy(n => n > 4) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return numberGroups; }
Hyp: 
public List<Tuple<bool, List<int>>> IntGroupByBool() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<Tuple<bool, List<int>>> numberGroups = numbers.GroupBy(n => n > 4) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return numberGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Boolean> expensiveProductEachGroupAllMatch() { List<Product> products = getProductList(); Map<String, Boolean> allMatch = products.stream().filter(p -> p.getUnitPrice() > 100).collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().allMatch(p -> p.getUnitsInStock() > 0))); return allMatch; }
Ref: 
public Dictionary<string, bool> ExpensiveProductEachGroupAllMatch() { List<Product> products = GetProductList(); Dictionary<string, bool> allMatch = products.Where(p => p.UnitPrice > 100).GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.All(p => p.UnitsInStock > 0)); return allMatch; }
Hyp: 
public Dictionary<string, bool> ExpensiveProductEachGroupAllMatch() { List<Product> products = GetProductList(); Dictionary<string, bool> allMatch = products.Where(p=>p.UnitPrice>100).GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.All(p => p.UnitsInStock > 0)); return allMatch; }

BLEU: 79.24
Edit Sim: 4


Src: 
public List<String> shortStringOrderbyDescendingLength() { String[] words = {"cherry", "apple", "blueberry", "pear", "peach", "melon"}; List<String> sortedWords = Arrays.stream(words).filter(w -> w.length() < 6) .sorted(Comparator.comparing(w -> w.length(), Comparator.reverseOrder())).toList(); return sortedWords; }
Ref: 
public List<string> ShortStringOrderbyDescendingLength() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderByDescending(w => w.Length).ToList(); return sortedWords; }
Hyp: 
public List<string> ShortStringOrderbyDescendingLength() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderByDescending(w => w.Length).ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> expensiveProductTakeWhile() { List<Product> products = getProductList(); List<Product> after3Products = products.stream().filter(p -> p.getUnitPrice() > 100).takeWhile(p -> p.getProductId() > 100).toList(); return after3Products; }
Ref: 
public List<Product> ExpensiveProductTakeWhile() { List<Product> products = GetProductList(); List<Product> firstProductsWhile = products.Where(p => p.UnitPrice > 100).TakeWhile(p => p.ProductId > 100).ToList(); return firstProductsWhile; }
Hyp: 
public List<Product> ExpensiveProductTakeWhile() { List<Product> products = GetProductList(); List<Product> firstProductsWhile = products.Where(p => p.UnitPrice > 100).TakeWhile(p => p.ProductId > 100).ToList(); return firstProductsWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Double>> customerOrdersTotalAverage() { List<Customer> customers = getCustomerList(); List<Pair<String, Double>> ordersTotalAverage = customers.stream().map(c -> Pair.with(c.getCustomerId(), c.getOrders().stream().mapToDouble(o -> o.getTotal()).average().getAsDouble())).toList(); return ordersTotalAverage; }
Ref: 
public List<Tuple<string, double>> CustomerOrdersTotalAverage() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalAverage = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Average(o => o.Total))).ToList(); return ordersTotalAverage; }
Hyp: 
public List<Tuple<string, double>> CustomerOrdersTotalAverage() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalAverage = customers.Select(c => Tuple.Create(c.CustomerId, c.Orders.Average(o => o.Total))).ToList(); return ordersTotalAverage; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Integer> countDistinctProductByCategoryDict() { List<Product> products = getProductList(); Map<String, Integer> categoryCounts = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> (int) g.getValue().stream().distinct().count())); return categoryCounts; }
Ref: 
public Dictionary<String,int> CountDistinctProductByCategoryDict() { List<Product> products = GetProductList(); Dictionary<String,int> categoryCounts = products.GroupBy(p => p.Category) .ToDictionary(g=>g.Key,g => g.Distinct().Count()); return categoryCounts; }
Hyp: 
public Dictionary<string, int> CountDistinctProductByCategoryDict() { List<Product> products = GetProductList(); Dictionary<string, int> categoryCounts = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Distinct().Count()); return categoryCounts; }

BLEU: 49.86
Edit Sim: 7


Src: 
public List<String> stringOrderby() { String[] words = {"cherry", "apple", "blueberry"}; List<String> sortedWords = Arrays.stream(words).sorted().toList(); return sortedWords; }
Ref: 
public List<string> StringOrderby() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderBy(w => w).ToList(); return sortedWords; }
Hyp: 
public List<string> StringOrderby() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderBy(w => w).ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Double>> productCrossGroupJoinCategoriesUnitPrice() { String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"}; List<Product> products = getProductList(); List<Pair<String, Double>> q = Arrays.stream(categories).map( c -> Pair.with(c, products.stream().filter(p -> p.getCategory().equals(c)) .collect(Collectors.toList()))).flatMap(t -> t.getValue1().stream() .map(p1 -> Pair.with(t.getValue0(), p1.getUnitPrice()))).toList(); return q; }
Ref: 
public List<Tuple<string, double>>  ProductCrossGroupJoinCategoriesUnitPrice() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, double>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2.Select(p=>p.UnitPrice), (t, n) => Tuple.Create(t.Item1, n)).ToList(); return q; }
Hyp: 
public List<Tuple<string, double>> ProductCrossGroupJoinCategoriesUnitPrice() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, double>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2, (t, p) => Tuple.Create(t.Item1, p)).ToList(); return q; }

BLEU: 85.74
Edit Sim: 26


Src: 
public double numbersAggregateFindMin() { double[] numbers = {1.7, 2.3, 1.9, 4.1, 2.9}; double aggregateSum = Arrays.stream(numbers).filter(n -> n > 2).reduce((a, b) -> Math.min(a, b)).getAsDouble(); return aggregateSum; }
Ref: 
public double NumbersAggregateFindMin() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double aggregateSum = numbers.Aggregate((a, b) => Math.Min(a,b)); return aggregateSum; }
Hyp: 
public double NumbersAggregateFindMin() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double aggregateSum = numbers.Aggregate((a, b) => Math.Min(a,b)); return aggregateSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public void oddNumbersEager() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; AtomicInteger i = new AtomicInteger(0); var q = Arrays.stream(numbers).filter(n->n%2==1).map(n -> i.addAndGet(n)).boxed().toList(); for (var v : q) System.out.println(v + " " + i); }
Ref: 
public void OddNumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
Hyp: 
public void OddNumbersEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, List<Product>> productGroupByCategoryDictOrderbyDescendingId() { List<Product> products = getProductList(); Map<String, List<Product>> productsGroups = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream() .sorted(Comparator.comparing(p -> p.getProductName(),Comparator.reverseOrder())).toList())); return productsGroups; }
Ref: 
public Dictionary<string,List<Product>> ProductGroupByCategoryDictOrderbyDescendingId() { List<Product> products = GetProductList(); Dictionary<string,List<Product>>  productsGroups = products.GroupBy(p=>p.Category) .ToDictionary(g => g.Key,g=>g.OrderByDescending(p=>p.ProductId).ToList()); return productsGroups; }
Hyp: 
public Dictionary<string,List<Product>> ProductGroupByCategoryDictOrderbyDescendingId() { List<Product> products = GetProductList(); Dictionary<string,List<Product>>  productsGroups = products.GroupBy(p=>p.Category) .ToDictionary(g => g.Key,g=>g.OrderByDescending(p=>p.ProductName).ToList()); return productsGroups; }

BLEU: 84.92
Edit Sim: 4


Src: 
public boolean unequalStrings() { List<String> wordsA = Arrays.asList("Alpha", "Beta", "Gamma"); List<String> wordsB = Arrays.asList("aLPhA", "bETa", "gAaMa"); boolean equal = wordsA.equals(wordsB); return equal; }
Ref: 
public bool UnequalStrings() { List<string> wordsA = new List<string> { "Alpha", "Beta", "Gamma" }; List<string> wordsB = new List<string> { "aLPhA", "bETa", "gAaMa" }; bool equal = wordsA.SequenceEqual(wordsB); return equal; }
Hyp: 
public bool UnequalStrings() { List<string> wordsA = new List<string>{ "Alpha", "Beta", "Gamma" }; List<string> wordsB = new List<string>{ "aLPhA", "bETa", "gAaMa" }; bool equal = wordsA.SequenceEqual(wordsB); return equal; }

BLEU: 76.23
Edit Sim: 2


Src: 
public List<Double> doubleOrderbyDescendingFraction() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).boxed().sorted( Comparator.comparing(n -> n - (int) n.doubleValue(), Comparator.reverseOrder())).toList(); return sortedNumbers; }
Ref: 
public List<double> DoubleOrderbyDescendingFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n-(int)n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleOrderbyDescendingFraction() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n-(int)n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> intersectOfCategory() { String[] categories = {"Furnitures", "Seagoods"}; List<Product> products = getProductList(); var productCategories = products.stream().map(p -> p.getCategory()); List<String> sharedCategories = productCategories.distinct().filter(a -> Arrays.stream(categories).anyMatch(b -> b.equals(a))).toList(); return sharedCategories; }
Ref: 
public List<string> IntersectOfCategory() { string[] categories = {"Furnitures", "Seagoods"}; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> sharedCategories = productCategories.Intersect(categories).ToList(); return sharedCategories; }
Hyp: 
public List<string> IntersectOfCategory() { string[] categories = { "Furnitures", "Seagoods" }; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> sharedCategories = productCategories.Intersect(categories).ToList(); return sharedCategories; }

BLEU: 79.65
Edit Sim: 2


Src: 
public Map<String, List<String>> customerGroupJoinRegionsName() { String[] regions = {"BC", "SP", "OR", "LA"}; List<Customer> customers = getCustomerList(); Map<String, List<String>> q = Arrays.stream(regions).map(r -> Pair.with(r, customers.stream() .filter(c -> c.getRegion().equals(r)).map(c->c.getCompanyName()).toList())) .collect(toMap(t->t.getValue0(),t->t.getValue1())); return q; }
Ref: 
public Dictionary<string, List<string>>  CustomerGroupJoinRegionsName() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); Dictionary<string, List<string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c.Select(c1=>c1.CompanyName).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
Hyp: 
public Dictionary<string, List<string>>  CustomerGroupJoinRegionsName() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); Dictionary<string, List<string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c.Select(c1=>c1.CompanyName) .ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }

BLEU: 91.84
Edit Sim: 1


Src: 
public List<Product> productSkip() { List<Product> products = getProductList(); List<Product> after3Products = products.stream().skip(3).toList(); return after3Products; }
Ref: 
public List<Product> ProductSkip() { List<Product> products = GetProductList(); List<Product> after3Products = products.Skip(3).ToList(); return after3Products; }
Hyp: 
public List<Product> ProductSkip() { List<Product> products = GetProductList(); List<Product> after3Products = products.Skip(3).ToList(); return after3Products; }

BLEU: 100.0
Edit Sim: 0


Src: 
public boolean stringAnyMatch() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; boolean anyMatch = Arrays.stream(words).anyMatch(n -> n.compareTo("b") > 0); return anyMatch; }
Ref: 
public bool StringAnyMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Any(n => string.CompareOrdinal(n, "b") > 0); return anyMatch; }
Hyp: 
public bool StringAnyMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Any(n => string.CompareOrdinal(n, "b") > 0); return anyMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, List<Customer>>> customerGroupByRegion() { List<Customer> customers = getCustomerList(); List<Pair<String, List<Customer>>> catagory = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue())).toList(); return catagory; }
Ref: 
public List<Tuple<string, List<Customer>>> CustomerGroupByRegion() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> catagory = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return catagory; }
Hyp: 
public List<Tuple<string, List<Customer>>> CustomerGroupByRegion() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> catagory = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.ToList())).ToList(); return catagory; }

BLEU: 100.0
Edit Sim: 0


Src: 
public void oddNumbersTwiceDeferred() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; AtomicInteger i = new AtomicInteger(0); var q = Arrays.stream(numbers).filter(n->n%2==1).map(n->n*2).map(n -> i.addAndGet(n)); q.forEach(v -> System.out.println(v + " " + i)); }
Ref: 
public void OddNumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }
Hyp: 
public void OddNumbersTwiceDeferred() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => n * 2).Select(n => i += n); foreach (var v in q) Console.Write(v + " " + i); }

BLEU: 100.0
Edit Sim: 0


Src: 
public int uniqueFactorsCount(int[] factors) { int factorsCount = (int) Arrays.stream(factors).distinct().count(); return factorsCount; }
Ref: 
public int UniqueFactorsCount(int[] factors) { int factorsCount = factors.Distinct().Count(); return factorsCount; }
Hyp: 
public int UniqueFactorsCount(int[] factors) { int factorsCount = factors.Distinct().Count(); return factorsCount; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, LocalDate>> customerOrdersEachNestedTakeWhile() { List<Customer> customers = getCustomerList(); List<Pair<String, LocalDate>> after3EachOrders = customers.stream().flatMap(c -> c.getOrders().stream() .takeWhile(o -> o.getOrderDate().isAfter(LocalDate.of(2000, 1, 1))) .map(o -> Pair.with(c.getCustomerId(), o.getOrderDate()))).toList(); return after3EachOrders; }
Ref: 
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersEachWhile = customers .SelectMany(c => c.Orders.TakeWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return firstOrdersEachWhile; }
Hyp: 
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstEachOrdersWhile = customers .SelectMany(c => c.Orders.TakeWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return firstEachOrdersWhile; }

BLEU: 87.02
Edit Sim: 16


Src: 
public String[] stringConcat() { String[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; String[] wordsB = {"Cafe", "Bar", "Restaurant"}; String[] allWords = (String[]) Stream.concat(Arrays.stream(wordsA), Arrays.stream(wordsB)).toArray(); return allWords; }
Ref: 
public string[] StringConcat() { string[] wordsA = { "Alice", "Bob", "Foo", "Bar" }; string[] wordsB = { "Cafe", "Bar", "Restaurant" }; string[] allWords = wordsA.Concat(wordsB).ToArray(); return allWords; }
Hyp: 
public string[] StringConcat() { string[] wordsA = { "Alice", "Bob", "Foo", "Bar" }; string[] wordsB = { "Cafe", "Bar", "Restaurant" }; string[] allWords = wordsA.Concat(wordsB).ToArray(); return allWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> doubleOrderbyFractionDescendingThenbyDescending() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).boxed().sorted( Comparator.comparing((Double n) -> n - (int) n.doubleValue(),Comparator.reverseOrder()) .thenComparing(Comparator.reverseOrder())).toList(); return sortedNumbers; }
Ref: 
public List<double> DoubleOrderbyFractionDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleOrderbyFractionDescendingThenbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n-(int)n).ThenByDescending(n => n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Boolean, List<Integer>> intGroupByBoolDictPrint() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; Map<Boolean, List<Integer>> numberGroups = numberGroups = Arrays.stream(numbers).boxed().collect(groupingBy(n -> n > 4)) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue())); numberGroups.get(true).stream().forEach(n -> System.out.print(n)); System.out.println(); numberGroups.get(false).stream().forEach(n -> System.out.print(n)); return numberGroups; }
Ref: 
public Dictionary<bool, List<int>> IntGroupByBoolDictPrint() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; Dictionary<bool, List<int>> numberGroups = numbers.GroupBy(n => n > 4) .ToDictionary(g => g.Key, g => g.ToList()); numberGroups[true].ForEach(n => Console.Write(n)); Console.WriteLine(); numberGroups[false].ForEach(n => Console.Write(n)); return numberGroups; }
Hyp: 
public Dictionary<bool, List<int>> IntGroupByBoolDictPrint() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; Dictionary<bool, List<int>> numberGroups = numbers.GroupBy(n => n > 4) .ToDictionary(g => g.Key, g => g.ToList()); Console.WriteLine(numberGroups); return numberGroups; }

BLEU: 80.05
Edit Sim: 91


Src: 
public List<Pair<String, LocalDate>> customerSelectManyCustomerOrderDates() { List<Customer> customers = getCustomerList(); List<Pair<String, LocalDate>> customerProperties = customers.stream().flatMap(c -> c.getOrders() .stream().map(o -> Pair.with(c.getCustomerId(), o.getOrderDate()))).toList(); return customerProperties; }
Ref: 
public List<Tuple<string,DateTime>> CustomerSelectManyCustomerOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.SelectMany(c=>c.Orders, (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
Hyp: 
public List<Tuple<string, DateTime>> CustomerSelectManyCustomerOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> customerProperties = customers.SelectMany(c=>c.Orders, (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }

BLEU: 40.11
Edit Sim: 6


Src: 
public List<Pair<String, String>> customerCrossJoinRegionsPhone() { String[] regions = {"BC", "SP", "OR", "LA"}; List<Customer> customers = getCustomerList(); List<Pair<String, String>> q = Arrays.stream(regions).flatMap( r -> customers.stream().filter(c -> c.getRegion().equals(r)).map( c -> Pair.with(r, c.getPhone()))).toList(); return q; }
Ref: 
public List<Tuple<string, string>> CustomerCrossJoinRegionsPhone() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.Join(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c.Phone)).ToList(); return q; }
Hyp: 
public List<Tuple<string, string>> CustomerCrossJoinRegionsPhone() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, string>> q = regions.GroupJoin(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c.Phone)).ToList(); return q; }

BLEU: 92.99
Edit Sim: 5


Src: 
public double[] doubleIntersect() { double[] numbersA = {0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7}; double[] numbersB = {0.1, 3.3, 5.4, 7.7, 8.6}; double[] sharedNumbers = Arrays.stream(numbersA).distinct().filter(a -> Arrays.stream(numbersB).anyMatch(b -> b == a)).toArray(); return sharedNumbers; }
Ref: 
public double[] DoubleIntersect() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] sharedNumbers = numbersA.Intersect(numbersB).ToArray(); return sharedNumbers; }
Hyp: 
public double[] DoubleIntersect() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] sharedNumbers = numbersA.Intersect(numbersB).ToArray(); return sharedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Character> concatOfNameFirstChar() { List<Product> products = getProductList(); List<Customer> customers = getCustomerList(); var productFirstChars = products.stream().map(p -> p.getProductName().charAt(0)); var customerFirstChars = customers.stream().map(c -> c.getCompanyName().charAt(0)); List<Character> allFirstChars = Stream.concat(productFirstChars, customerFirstChars).toList(); return allFirstChars; }
Ref: 
public List<char> ConcatOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> allFirstChars = productFirstChars.Concat(customerFirstChars).ToList(); return allFirstChars; }
Hyp: 
public List<char> ConcatOfNameFirstChar() { List<Product> products = GetProductList(); List<Customer> customers = GetCustomerList(); var productFirstChars = products.Select(p => p.ProductName[0]); var customerFirstChars = customers.Select(c => c.CompanyName[0]); List<char> allFirstChars = productFirstChars.Concat(customerFirstChars).ToList(); return allFirstChars; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> unionOfCategory() { String[] categories = {"Furnitures", "Seagoods"}; List<Product> products = getProductList(); var productCategories = products.stream().map(p -> p.getCategory()); List<String> uniqueCategories = Stream.concat(productCategories, Arrays.stream(categories)).distinct().toList(); return uniqueCategories; }
Ref: 
public List<string> UnionOfCategory() { string[] categories = {"Furnitures", "Seagoods"}; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> uniqueCategories = productCategories.Union(categories).ToList(); return uniqueCategories; }
Hyp: 
public List<string> UnionOfCategory() { string[] categories = { "Furnitures", "Seagoods" }; List<Product> products = GetProductList(); var productCategories = products.Select(p => p.Category); List<string> uniqueCategories = productCategories.Union(categories).ToList(); return uniqueCategories; }

BLEU: 79.65
Edit Sim: 2


Src: 
public double numbersAggregateSqrtWithSeed() { double[] numbers = {1.7, 2.3, 1.9, 4.1, 2.9}; double seed = 1.6; double aggregateSum = Arrays.stream(numbers).filter(n -> n > 2).reduce(seed, (a, b) -> Math.sqrt(a * b)); return aggregateSum; }
Ref: 
public double NumbersAggregateSqrtWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 1.6; double aggregateSum = numbers.Aggregate(seed, (a, b) => Math.Sqrt(a * b)); return aggregateSum; }
Hyp: 
public double NumbersAggregateSqrtWithSeed() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double seed = 1.6; double aggregateSum = numbers.Aggregate(n => n > 2).Sum(a => a * b); return aggregateSum; }

BLEU: 68.69
Edit Sim: 23


Src: 
public List<Product> productOrderbyCategoryThenbyDescendingName() { List<Product> products = getProductList(); List<Product> sortedProducts =products.stream().sorted(Comparator.comparing((Product p) -> p.getCategory()) .thenComparing(p -> p.getProductName(),Comparator.reverseOrder())).toList(); return sortedProducts; }
Ref: 
public List<Product> ProductOrderbyCategoryThenbyDescendingName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenByDescending(p=>p.ProductName).ToList(); return sortedProducts; }
Hyp: 
public List<Product> ProductOrderbyCategoryThenbyDescendingName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenByDescending(p=>p.ProductName).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> expensiveProductOrderbyDescendingName() { List<Product> products = getProductList(); List<Product> sortedProducts = products.stream().filter(p -> p.getUnitPrice() > 100) .sorted(Comparator.comparing(p -> p.getProductName(), Comparator.reverseOrder())).toList(); return sortedProducts; }
Ref: 
public List<Product> ExpensiveProductOrderbyDescendingName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderByDescending(p => p.ProductName).ToList(); return sortedProducts; }
Hyp: 
public List<Product> ExpensiveProductOrderbyDescendingName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderByDescending(p => p.ProductName).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<Pair<String, Integer>, String>> customerLeftOuterJoinRegionsWithCodeNameRegion() { List<Pair<String, Integer>> regions = Arrays.asList( Pair.with("BC", 101), Pair.with("BC", 105), Pair.with("OR", 121), Pair.with("LA", 143) ); List<Customer> customers = getCustomerList(); List<Pair<Pair<String, Integer>, String>> q = regions.stream().map( r -> Pair.with(r, customers.stream().filter(c -> c.getRegion().equals(r)) .collect(Collectors.toList()))).flatMap(t -> defaultIfEmpty(t.getValue1(), null).stream() .map(p1 -> Pair.with(t.getValue0(), p1!=null?p1.getCompanyName():"No Customer"))).toList(); return q; }
Ref: 
public List<Tuple<Tuple<string, int>, string>> CustomerLeftOuterJoinRegionsWithCodeNameRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<Tuple<string, int>, string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName).DefaultIfEmpty("No Customer"),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
Hyp: 
public List<Tuple<Tuple<string,int>, string>> CustomerLeftOuterJoinRegionsWithCodeNameRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<Tuple<string,int>, string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName).DefaultIfEmpty("No Customer"),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }

BLEU: 87.71
Edit Sim: 2


Src: 
public List<Integer> intSquareSkip() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Integer> after3Numbers = Arrays.stream(numbers).map(i -> i * i).skip(3).boxed().toList(); return after3Numbers; }
Ref: 
public List<int> IntSquareSkip() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Select(i => i * i).Skip(3).ToList(); return after3Numbers; }
Hyp: 
public List<int> IntSquareSkip() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> after3Numbers = numbers.Select(i => i * i).Skip(3).ToList(); return after3Numbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Pair<String, Boolean>[] selectByEvenOdd() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; Pair<String, Boolean>[] evenOddWords = (Pair<String, Boolean>[]) Arrays.stream(numbers).mapToObj(n -> Pair.with(strings[n], n % 2 == 0)).toArray(); return evenOddWords; }
Ref: 
public Tuple<string, bool>[] SelectByEvenOdd() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; Tuple<string, bool>[] evenOddWords = numbers.Select(n => Tuple.Create(strings[n], n % 2 == 0)).ToArray(); return evenOddWords; }
Hyp: 
public Tuple<string, bool>[] SelectByEvenOdd() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; Tuple<string, bool>[] evenOddWords = numbers.Select(n => Tuple.Create(strings[n], n % 2 == 1)).ToArray(); return evenOddWords; }

BLEU: 58.76
Edit Sim: 104


Src: 
public List<Pair<String, Double>> customerEachCountryOrdersAverage() { List<Customer> customers = getCustomerList(); List<Pair<String, Double>> ordersAverage = customers.stream().collect(groupingBy(c -> c.getCountry())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().mapToInt(c -> c.getOrders().size()).average().getAsDouble())).toList(); return ordersAverage; }
Ref: 
public List<Tuple<string, double>> CustomerEachCountryOrdersAverage() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersAverage = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Average(c => c.Orders.Count))).ToList(); return ordersAverage; }
Hyp: 
public List<Tuple<string, double>> CustomerEachCountryOrdersAverage() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersAverage = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Average(c => c.Orders.Count))).ToList(); return ordersAverage; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> doubleOrderbyDescending() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).toList(); return sortedNumbers; }
Ref: 
public List<double> DoubleOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(d => d).ToList(); return sortedNumbers; }

BLEU: 84.1
Edit Sim: 2


Src: 
public List<Pair<Pair<String, Integer>, Customer>> customerLeftOuterJoinRegionsWithCodeRegion() { List<Pair<String, Integer>> regions = Arrays.asList( Pair.with("BC", 101), Pair.with("BC", 105), Pair.with("OR", 121), Pair.with("LA", 143) ); List<Customer> customers = getCustomerList(); List<Pair<Pair<String, Integer>, Customer>> q = regions.stream().map( r -> Pair.with(r, customers.stream().filter(c -> c.getRegion().equals(r)) .collect(Collectors.toList()))).flatMap(t -> defaultIfEmpty(t.getValue1(), null).stream() .map(p1 -> Pair.with(t.getValue0(), p1))).toList(); return q; }
Ref: 
public List<Tuple<Tuple<string, int>, Customer>>  CustomerLeftOuterJoinRegionsWithCodeRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<Tuple<string, int>, Customer>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.DefaultIfEmpty(null),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
Hyp: 
public List<Tuple<Tuple<string,int>, Customer>> CustomerLeftOuterJoinRegionsWithCodeRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<Tuple<string,int>, Customer>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName).DefaultIfEmpty(null),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }

BLEU: 82.34
Edit Sim: 28


Src: 
public int[] bigIntTwice() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int[] numSelected = Arrays.stream(numbers).filter(n -> n > 5).map(n -> n * 2).toArray(); return numSelected; }
Ref: 
public int[] BigIntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n > 5).Select(n => n * 2).ToArray(); return numSelected; }
Hyp: 
public int[] BigIntTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int[] numSelected = numbers.Where(n => n > 5).Select(n => n * 2).ToArray(); return numSelected; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Double>> expensiveProductEachCategoryStock() { List<Product> products = getProductList(); List<Pair<String, Double>> categories = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().filter( p -> p.getUnitPrice() > 100).mapToInt(p -> p.getUnitsInStock()).average().getAsDouble())).toList(); return categories; }
Ref: 
public List<Tuple<string, double>> ExpensiveProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, double>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice > 100) .Average(p => p.UnitsInStock))).ToList(); return categories; }
Hyp: 
public List<Tuple<string, double>> ExpensiveProductEachCategoryStock() { List<Product> products = GetProductList(); List<Tuple<string, double>> categories = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice > 100) .Average(p => p.UnitsInStock))).ToList(); return categories; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Triplet<String, Integer, Customer>> customerCrossJoinRegionsWithCodeRegion() { List<Pair<String, Integer>> regions = Arrays.asList( Pair.with("BC", 101), Pair.with("BC", 105), Pair.with("OR", 121), Pair.with("LA", 143) ); List<Customer> customers = getCustomerList(); List<Triplet<String, Integer, Customer>> q = regions.stream().flatMap( r -> customers.stream().filter(c -> c.getRegion().equals(r.getValue0())).map( c -> Triplet.with(r.getValue0(), r.getValue1(), c))).toList(); return q; }
Ref: 
public List<Tuple<string, int, Customer>> CustomerCrossJoinRegionsWithCodeRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<string, int, Customer>> q = regions.Join(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item1, r.Item2, c)).ToList(); return q; }
Hyp: 
public List<Tuple<string,int, Customer>> CustomerCrossJoinRegionsWithCodeRegion() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<string,int, Customer>> q = regions.SelectMany(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c)).SelectMany(t=> t.Item2.Select(c=>c.Region,(r, c) => Tuple.Create(r.Item1, c)).ToList(); return q; }

BLEU: 71.39
Edit Sim: 82


Src: 
public List<Pair<String, List<Customer>>> customerEachCountryOrdersFirstCustomer() { List<Customer> customers = getCustomerList(); List<Pair<String, List<Customer>>> customerOrdersFirst = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().filter( c -> c.getOrders().size() == g.getValue().stream().findFirst().get().getOrders().size()).toList())).toList(); return customerOrdersFirst; }
Ref: 
public List<Tuple<string, List<Customer>>> CustomerEachCountryOrdersFirstCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> customerOrdersFirst = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Where(c => c.Orders.Count ==g.First().Orders.Count).ToList())).ToList(); return customerOrdersFirst; }
Hyp: 
public List<Tuple<string, List<Customer>>> CustomerEachCountryOrdersFirstCustomer() { List<Customer> customers = GetCustomerList(); List<Tuple<string, List<Customer>>> customerOrdersFirst = customers.GroupBy(c => c.Country) .Select(g => Tuple.Create(g.Key, g.Where(c => c.Orders.Count ==g.First().Orders.Count).ToList())).ToList(); return customerOrdersFirst; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double projectedDoubleFirstOrDefault() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; double firstNum = Arrays.stream(numbers).map(i -> Math.log(i)).filter(n -> n > 3).findFirst().orElse(3.01); return firstNum; }
Ref: 
public double ProjectedDoubleFirstOrDefault() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.Select(i => Math.Log2(i)) .FirstOrDefault(n => n > 3,3.01); return firstNum; }
Hyp: 
public double ProjectedDoubleFirstOrDefault() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.Select(i => Math.Log(i)) .FirstOrDefault(n => n > 3.01, 3.01); return firstNum; }

BLEU: 81.52
Edit Sim: 5


Src: 
public Map<String, List<String>> productGroupNameDict() { List<Product> products = getProductList(); Map<String, List<String>> productNames = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().map(p -> p.getProductName()).toList())); return productNames; }
Ref: 
public Dictionary<string, List<string>> ProductGroupNameDict() { List<Product> products = GetProductList(); Dictionary<string, List<string>> productNames = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductName).ToList()); return productNames; }
Hyp: 
public Dictionary<string, List<string>> ProductGroupNameDict() { List<Product> products = GetProductList(); Dictionary<string, List<string>> productNames = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductName).ToList()); return productNames; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> stringSkipCount(String[] strings, int n) { List<String> afterNWords = Arrays.stream(strings).skip(3).toList(); return afterNWords; }
Ref: 
public List<string> StringSkipCount(string[] strings, int n) { List<string> afterNWords = strings.Skip(n).ToList(); return afterNWords; }
Hyp: 
public List<string> StringSkipCount(string[] strings, int n) { List<string> afterNWords = strings.Skip(n).ToList(); return afterNWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Boolean, List<Product>> productGroupByInStockDictPrint() { List<Product> products = getProductList(); Map<Boolean, List<Product>> productGroup = products.stream().collect(groupingBy(p -> p.getUnitsInStock() > 0)); productGroup.get(true).stream().forEach(n -> System.out.print(n)); System.out.println(); productGroup.get(false).stream().forEach(n -> System.out.print(n)); return productGroup; }
Ref: 
public Dictionary<bool, List<Product>> ProductGroupByInStockDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<Product>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .ToDictionary(g => g.Key, g => g.ToList()); productGroup[true].ForEach(p => Console.Write(p)); Console.WriteLine(); productGroup[false].ForEach(p => Console.Write(p)); return productGroup; }
Hyp: 
public Dictionary<bool, List<Product>> ProductGroupByInStockDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<Product>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .ToDictionary(g => g.Key, g => g.ToList()); Console.WriteLine(productGroup); return productGroup; }

BLEU: 73.14
Edit Sim: 91


Src: 
public Map<String, Double> customerOrdersTotalMinDict() { List<Customer> customers = getCustomerList(); Map<String, Double> ordersTotalMin = customers.stream().collect(toMap(c -> c.getCustomerId(), c -> c.getOrders().stream().mapToDouble(o -> o.getTotal()).min().getAsDouble())); return ordersTotalMin; }
Ref: 
public Dictionary<string, double> CustomerOrdersTotalMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMin = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Min(o => o.Total)); return ordersTotalMin; }
Hyp: 
public Dictionary<string, double> CustomerOrdersTotalMinDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalMin = customers.ToDictionary(c => c.CustomerId, c => c.Orders.Min(o => o.Total)); return ordersTotalMin; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, List<Product>>> expensiveProductEachCategoryMinUnitPriceProducts() { List<Product> products = getProductList(); List<Pair<String, List<Product>>> categories = products.stream().filter(p -> p.getUnitPrice() > 100). collect(groupingBy(p -> p.getCategory())).entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().collect(groupingBy(p -> p.getUnitPrice())) .entrySet().stream().min(Map.Entry.comparingByKey()).get().getValue())).toList(); return categories; }
Ref: 
public List<Tuple<string, List<Product>>> ExpensiveProductEachCategoryMinUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.Where(p=>p.UnitPrice>100).GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.Min(p => p.UnitPrice)) .ToList())).ToList(); return categories; }
Hyp: 
public List<Tuple<string, List<Product>>> ExpensiveProductEachCategoryMinUnitPriceProducts() { List<Product> products = GetProductList(); List<Tuple<string, List<Product>>> categories = products.Where(p=>p.UnitPrice>100).GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Where(p => p.UnitPrice == g.Min(p => p.UnitPrice)) .ToList())).ToList(); return categories; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Integer> customerEachCountryOrdersSumDict() { List<Customer> customers = getCustomerList(); Map<String, Integer> ordersSum = customers.stream().collect(groupingBy(c -> c.getCountry())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().mapToInt(c -> c.getOrders().size()).sum())); return ordersSum; }
Ref: 
public Dictionary<string, int> CustomerEachCountryOrdersSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersTotalSum = customers.GroupBy(c => c.Country) .ToDictionary(g=>g.Key, g=>g.Sum(c=>c.Orders.Count)); return ordersTotalSum; }
Hyp: 
public Dictionary<string, int> CustomerEachCountryOrdersSumDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersSum = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Sum(c => c.Orders.Count)); return ordersSum; }

BLEU: 49.81
Edit Sim: 16


Src: 
public int bigNumbersMin() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int minNum = Arrays.stream(numbers).filter(n -> n >= 5).min().getAsInt(); return minNum; }
Ref: 
public int BigNumbersMin() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Where(n => n > 5).Min(); return minNum; }
Hyp: 
public int BigNumbersMin() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Where(n => n > 5).Min(); return minNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Character, List<String>> stringGroupByFirstCharDictOrderbyDescending() { String[] words = {"blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese"}; Map<Character, List<String>> wordsGroups = Arrays.stream(words).collect(groupingBy(w -> w.charAt(0))) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().sorted(Comparator.reverseOrder()).toList())); return wordsGroups; }
Ref: 
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyDescending() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => w[0]) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w).ToList()); return wordsGroups; }
Hyp: 
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyDescending() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => w[0]) .ToDictionary(g => g.Key, g => g.OrderByDescending(w=>w).ToList()); return wordsGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double productUnitPriceAggregateAverageWithSeed() { List<Product> products = getProductList(); double seed = 15.5; double aggregateSum = products.stream().map(p -> p.getUnitPrice()).reduce(seed,(a, b) ->(a + b) / 2); return aggregateSum; }
Ref: 
public double ProductUnitPriceAggregateAverageWithSeed() { List<Product> products = GetProductList(); double seed = 15.5; double aggregateSum = products.Select(p => p.UnitPrice).Aggregate(seed, (a, b) => (a + b) / 2); return aggregateSum; }
Hyp: 
public double ProductUnitPriceAggregateAverageWithSeed() { List<Product> products = GetProductList(); double aggregateSum = products.Select(p => p.UnitPrice).Aggregate(seed, (a, b) => (a + b)); return aggregateSum; }

BLEU: 65.15
Edit Sim: 24


Src: 
public Character[] projectionStringConcat() { String[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; String[] wordsB = {"Cafe", "Bar", "Restaurant"}; var first = Arrays.stream(wordsA).map(n -> n.charAt(0)); var second = Arrays.stream(wordsB).map(n -> n.charAt(0)); Character[] allWords = (Character[]) Stream.concat(first, second).toArray(); return allWords; }
Ref: 
public char[] ProjectionStringConcat() { string[] wordsA = { "Alice", "Bob", "Foo", "Bar" }; string[] wordsB = { "Cafe", "Bar", "Restaurant" }; var first = wordsA.Select(n => n[0]); var second = wordsB.Select(n => n[0]); char[] words = first.Concat(second).ToArray(); return words; }
Hyp: 
public char[] ProjectionStringConcat() { string[] wordsA = { "Alice", "Bob", "Foo", "Bar" }; string[] wordsB = { "Cafe", "Bar", "Restaurant" }; char[] allWords = wordsA.Select(n => n[0]); var first = wordsB.Select(n => n[1]); var second = wordsA.Select(n => n[0]); return allWords; }

BLEU: 68.81
Edit Sim: 54


Src: 
public List<Pair<String, LocalDate>> customerSelectManyCustomerNewOrderDates() { List<Customer> customers = getCustomerList(); List<Pair<String, LocalDate>> customerProperties = customers.stream().flatMap(c -> c.getOrders() .stream().filter(o -> o.getOrderDate().isAfter(LocalDate.of(1998, 1, 1))) .map(o -> Pair.with(c.getCustomerId(), o.getOrderDate()))).toList(); return customerProperties; }
Ref: 
public List<Tuple<string,DateTime>> CustomerSelectManyCustomerNewOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string,DateTime>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c,o)=>Tuple.Create(c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }
Hyp: 
public List<Tuple<string, DateTime>> CustomerSelectManyCustomerNewOrderDates() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> customerProperties = customers.SelectMany( c=>c.Orders.Where(o=>o.OrderDate>new DateTime(1998, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return customerProperties; }

BLEU: 50.03
Edit Sim: 6


Src: 
public double[] doubleConcat() { double[] numbersA = {0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7}; double[] numbersB = {0.1, 3.3, 5.4, 7.7, 8.6}; double[] allNumbers = DoubleStream.concat(Arrays.stream(numbersA), Arrays.stream(numbersB)).toArray(); return allNumbers; }
Ref: 
public double[] DoubleConcat() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] allNumbers = numbersA.Concat(numbersB).ToArray(); return allNumbers; }
Hyp: 
public double[] DoubleConcat() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] allNumbers = numbersA.Concat(numbersB).ToArray(); return allNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<Character, List<String>>> stringGroupByFirstCharOrderbyDescending() { String[] words = {"blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese"}; List<Pair<Character, List<String>>> wordsGroups = Arrays.stream(words).collect(groupingBy(w -> w.charAt(0))) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().sorted(Comparator.reverseOrder()).toList())).toList(); return wordsGroups; }
Ref: 
public List<Tuple<char, List<string>>> StringGroupByFirstCharOrderbyDescending() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => w[0]) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(w=>w).ToList())).ToList(); return wordsGroups; }
Hyp: 
public List<Tuple<char, List<string>>> StringGroupByFirstCharOrderbyDescending() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => w[0]) .Select(g => Tuple.Create(g.Key, g.OrderByDescending(w=>w).ToList())).ToList(); return wordsGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> longStringSkip() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; List<String> after3Words = Arrays.stream(words).filter(w -> w.length() > 5).skip(3).toList(); return after3Words; }
Ref: 
public List<string> LongStringSkip() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> after3Words = words.Where(w => w.Length > 5).Skip(3).ToList(); return after3Words; }
Hyp: 
public List<string> LongStringSkip() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> after3Words = words.Where(w => w.Length > 5).Skip(3).ToList(); return after3Words; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> intTakeWhileIndexedCount(int[] numbers, int n) { List<Integer> afterNumbers = IntStream.range(0, numbers.length) .takeWhile(i -> n > i).map(i -> numbers[i]).boxed().toList(); return afterNumbers; }
Ref: 
public List<int> IntTakeWhileIndexedCount(int[] numbers, int n) { List<int> firstNumbers = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbers; }
Hyp: 
public List<int> IntTakeWhileIndexedCount(int[] numbers, int n) { List<int> firstNumbersWhile = numbers.TakeWhile((n, i) => n > i).ToList(); return firstNumbersWhile; }

BLEU: 75.91
Edit Sim: 10


Src: 
public String stringFirstOrDefaultStartWith(char c) { String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; String startWithChar = Arrays.stream(strings).filter(s -> s.charAt(0) == c).findFirst().orElse("none"); return startWithChar; }
Ref: 
public string StringFirstOrDefaultStartWith(char c) { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithChar = strings.FirstOrDefault(s => s[0] == c,"none"); return startWithChar; }
Hyp: 
public string StringFirstOrDefaultStartWith(char c) { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithChar = strings.FirstOrDefault(s => s[0] == c, "none"); return startWithChar; }

BLEU: 88.66
Edit Sim: 1


Src: 
public Map<Boolean, List<Integer>> productGroupByPriceWithIdDictPrint() { List<Product> products = getProductList(); Map<Boolean, List<Integer>> productGroup = products.stream().collect(groupingBy(p -> p.getUnitPrice() > 100)) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().map(p -> p.getProductId()).toList())); productGroup.get(true).stream().forEach(n -> System.out.print(n)); System.out.println(); productGroup.get(false).stream().forEach(n -> System.out.print(n)); return productGroup; }
Ref: 
public Dictionary<bool, List<int>> ProductGroupByPriceWithIdDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<int>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); productGroup[true].ForEach(p => Console.Write(p)); Console.WriteLine(); productGroup[false].ForEach(p => Console.Write(p)); return productGroup; }
Hyp: 
public Dictionary<bool, List<int>> ProductGroupByPriceWithIdDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<int>> productGroup = products.GroupBy(p => p.UnitPrice>100) .ToDictionary(g => g.Key, g => g.Select(p => p.ProductId).ToList()); Console.WriteLine(productGroup); return productGroup; }

BLEU: 60.84
Edit Sim: 93


Src: 
public List<String> shortStringOrderby() { String[] words = {"cherry", "apple", "blueberry", "pear", "peach", "melon"}; List<String> sortedWords = Arrays.stream(words).filter(w -> w.length() < 6).sorted().toList(); return sortedWords; }
Ref: 
public List<string> ShortStringOrderby() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w).ToList(); return sortedWords; }
Hyp: 
public List<string> ShortStringOrderby() { string[] words = { "cherry", "apple", "blueberry", "pear", "peach", "melon" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w).ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Boolean[] bigIntWithOriginalIndex() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; Boolean[] numSelected = (Boolean[]) IntStream.range(0, numbers.length).filter(i -> numbers[i] > 5).filter(i -> numbers[i] % 2 == 1) .mapToObj(i -> numbers[i] == i).toArray(); return numSelected; }
Ref: 
public bool[] BigIntWithOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => Tuple.Create(n > 5,n == i)) .Where(t=>t.Item1).Select(t=>t.Item2).ToArray(); return numSelected; }
Hyp: 
public bool[] BigIntWithOriginalIndex() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool[] numSelected = numbers.Select((n, i) => n % 2 == 1 ? n > 5 : false).Where(n=>n!=-1).ToArray(); return numSelected; }

BLEU: 68.44
Edit Sim: 47


Src: 
public int numbersFirstOrDefaultOrDefault() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int firstNum = Arrays.stream(numbers).findFirst().orElse(-1); return firstNum; }
Ref: 
public int NumbersFirstOrDefault() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.FirstOrDefault(-1); return firstNum; }
Hyp: 
public int NumbersFirstOrDefaultOrDefault() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.FirstOrDefault(n => n > 0,-1); return firstNum; }

BLEU: 69.64
Edit Sim: 20


Src: 
public int shortStringMinLength() { String[] words = {"cherry", "apple", "blueberry"}; int minLength = Arrays.stream(words).filter(w -> w.length() < 7).mapToInt(w -> w.length()).min().getAsInt(); return minLength; }
Ref: 
public int ShortStringMinLength() { string[] words = { "cherry", "apple", "blueberry" }; int minLength = words.Where(w => w.Length < 7).Min(w => w.Length); return minLength; }
Hyp: 
public int ShortStringMinLength() { string[] words = { "cherry", "apple", "blueberry" }; int minLength = words.Where(w => w.Length < 7).Min(w => w.Length); return minLength; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> intSqrtTakeWhileIndexed() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Double> afterNumbers =  IntStream.range(0, numbers.length) .takeWhile(i -> Math.sqrt(numbers[i]) > i).mapToDouble(i -> Math.sqrt(numbers[i]) ).boxed().toList(); return afterNumbers; }
Ref: 
public List<double> IntSqrtSkipWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<double> afterNumbers = numbers.Select(i => Math.Sqrt(i)).TakeWhile((n, i) => n > i).ToList(); return afterNumbers; }
Hyp: 
public List<double> IntSqrtTakeWhileIndexed() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<double> firstNumbersWhile = numbers.SelectWhile((n, i) => Math.Sqrt(n)) .ToList(); return firstNumbersWhile; }

BLEU: 56.4
Edit Sim: 61


Src: 
public List<String> longStringSkipWhile() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; List<String> after3Words = Arrays.stream(words).filter(w -> w.length() > 5).dropWhile(w -> w.charAt(0) > 'b').toList(); return after3Words; }
Ref: 
public List<string> LongStringSkipWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterWordsWhile = words.Where(w => w.Length > 5).SkipWhile(w => w[0] > 'b').ToList(); return afterWordsWhile; }
Hyp: 
public List<string> LongStringSkipWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> afterWordsWhile = words.Where(w => w.Length > 5).SkipWhile(w => w[0] > 'b').ToList(); return afterWordsWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, List<String>> productGroupJoinCategoriesName() { String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"}; List<Product> products = getProductList(); Map<String, List<String>> q = Arrays.stream(categories).map(c -> Pair.with(c, products.stream() .filter(p -> p.getCategory().equals(c)).map(p1 -> p1.getProductName()).toList())) .collect(toMap(t -> t.getValue0(), t -> t.getValue1())); return q; }
Ref: 
public Dictionary<string, List<string>> ProductGroupJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); Dictionary<string, List<string>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p.Select(p1=>p1.ProductName).ToList())) .ToDictionary(t => t.Item1, t => t.Item2); return q; }
Hyp: 
public Dictionary<string, List<string>> ProductGroupJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); Dictionary<string, List<string>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .ToDictionary(t => t.Item1, t => t.Item2); return q; }

BLEU: 94.28
Edit Sim: 36


Src: 
public boolean intSquareAllMatch() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; boolean allMatch = Arrays.stream(numbers).map(i -> i * i).allMatch(n -> n > 3); return allMatch; }
Ref: 
public bool IntSquareAllMatch() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool allMatch = numbers.Select(i => i * i).All(n => n > 3); return allMatch; }
Hyp: 
public bool IntSquareAllMatch() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; bool allMatch = numbers.Select(i => i * i).All(n => n > 3); return allMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Product[] productsConvertToDescendingArrayAndPrint() { List<Product> products = getProductList(); Product[] productsArray = (Product[]) products.stream().sorted(Comparator.comparing( p -> p.getUnitPrice(), Comparator.reverseOrder())).toArray(); for (int i = 0; i < productsArray.length; i++) System.out.println(productsArray[i]); return productsArray; }
Ref: 
public Product[] ProductsConvertToDescendingArrayAndPrint() { List<Product> products = GetProductList(); Product[] productsArray = products.OrderByDescending(p => p.UnitPrice).ToArray(); for (int i = 0; i < productsArray.Length; i++) Console.WriteLine(productsArray[i]); return productsArray; }
Hyp: 
public Product[] ProductsConvertToDescendingArrayAndPrint() { List<Product> products = GetProductList(); Product[] productsArray = products.OrderByDescending(p => p.UnitPrice).ToArray(); for (int i = 0; i < productsArray.Length; i++) Console.WriteLine(productsArray[i]); return productsArray; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, LocalDate>> customerOrdersEachNestedSkipWhile() { List<Customer> customers = getCustomerList(); List<Pair<String, LocalDate>> after3EachOrders = customers.stream().flatMap(c -> c.getOrders().stream() .dropWhile(o -> o.getOrderDate().isAfter(LocalDate.of(2000, 1, 1))) .map(o -> Pair.with(c.getCustomerId(), o.getOrderDate()))).toList(); return after3EachOrders; }
Ref: 
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersEachWhile = customers .SelectMany(c => c.Orders.SkipWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return afterOrdersEachWhile; }
Hyp: 
public List<Tuple<string, DateTime>> CustomerOrdersEachNestedSkipWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> afterOrdersEachWhile = customers.SelectMany(c => c.Orders.SkipWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return afterOrdersEachWhile; }

BLEU: 89.36
Edit Sim: 1


Src: 
public List<Boolean> waCustomerOrdersEachNestedAllMatch() { List<Customer> customers = getCustomerList(); List<Boolean> allMatch = customers.stream().filter(c -> c.getRegion() == "WA").map(c -> c.getOrders().stream().allMatch(o -> o.getOrderDate().isAfter(LocalDate.of(2000, 1, 1)))).toList(); return allMatch; }
Ref: 
public List<bool> WaCustomerOrdersEachNestedAllMatch() { List<Customer> customers = GetCustomerList(); List<bool> allMatch = customers.Where(c=>c.Region=="WA").Select(c => c.Orders.All(o => o.OrderDate > new DateTime(2000, 1, 1))).ToList(); return allMatch; }
Hyp: 
public List<bool> WaCustomerOrdersEachNestedAllMatch() { List<Customer> customers = GetCustomerList(); List<bool> allMatch = customers.Where(c=>c.Region=="WA").SelectMany(c => c.Orders.All(o => o.OrderDate > new DateTime(2000, 1, 1)))).ToList(); return allMatch; }

BLEU: 77.49
Edit Sim: 5


Src: 
public Map<String, List<Order>> customerEachRegionOrdersTotalMaxCustomerDict() { List<Customer> customers = getCustomerList(); Map<String, List<Order>> customerOrdersTotalMax = customers.stream().collect(groupingBy(c -> c.getCountry())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream() .flatMap(c -> c.getOrders().stream()).collect(groupingBy(o -> o.getTotal())) .entrySet().stream().max(Map.Entry.comparingByKey()).get().getValue())); return customerOrdersTotalMax; }
Ref: 
public Dictionary<string, List<Order>> CustomerEachRegionOrdersTotalMaxCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Order>> customerOrdersTotalMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g=>g.SelectMany(c => c.Orders).Where( o => o.Total == g.SelectMany(c => c.Orders).Max(o => o.Total)).ToList()); return customerOrdersTotalMax; }
Hyp: 
public Dictionary<string, List<Order>> CustomerEachRegionOrdersTotalMaxCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Order>> customerOrdersTotalMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g=>g.SelectMany(c => c.Orders).Where( o => o.Total == g.SelectMany(c => c.Orders).Max(o => o.Total)).ToList()); return customerOrdersTotalMax; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double doubleSum() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; double numbersSum = Arrays.stream(numbers).sum(); return numbersSum; }
Ref: 
public double DoubleSum() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double numbersSum = numbers.Sum(); return numbersSum; }
Hyp: 
public double DoubleSum() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double numbersSum = numbers.Sum(); return numbersSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public String[] stringProjectionZipAdd() { String[] wordsA = {"Alpha", "Beta", "Gamma"}; String[] wordsB = {"red", "green", "blue"}; int length = wordsA.length; String[] results = (String[]) IntStream.range(0, length) .mapToObj(i -> String.valueOf(wordsA[i].charAt(0)) + wordsB[i].charAt(0)).toArray(); return results; }
Ref: 
public string[] StringProjectionZipAdd() { string[] wordsA = { "Alpha", "Beta", "Gamma" }; string[] wordsB = { "red", "green", "blue" }; string[] results = wordsA.Select(w => w[0].ToString()) .Zip(wordsB.Select(w => w[0]), (a, b) => a + b).ToArray(); return results; }
Hyp: 
public string[] StringProjectionZipAdd() { string[] wordsA = { "Alpha", "Beta", "Gamma" }; string[] wordsB = { "red", "green", "blue" }; string[] results = wordsA.Zip(wordsB, (a, b) => a + b).ToArray(); return results; }

BLEU: 79.16
Edit Sim: 48


Src: 
public Map<String, List<Product>> productGroupSkipWhile() { List<Product> products = getProductList(); Map<String, List<Product>> after3Groups = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().dropWhile(g -> g.getKey().length() > 6).collect(toMap(g -> g.getKey(), g -> g.getValue())); return after3Groups; }
Ref: 
public Dictionary<string, List<Product>> ProductGroupSkipWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> afterGroupsWhile = products.GroupBy(p => p.Category) .SkipWhile(g => g.Key.Length > 6).ToDictionary(g => g.Key, g => g.ToList()); return afterGroupsWhile; }
Hyp: 
public Dictionary<string, List<Product>> ProductGroupSkipWhile() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> afterGroupsWhile = products.GroupBy(p => p.Category) .SkipWhile(g => g.Key.Length > 6).ToDictionary(g => g.Key, g => g.ToList()); return afterGroupsWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, List<String>>> productGroupName() { List<Product> products = getProductList(); List<Pair<String, List<String>>> productNames = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().map(p -> p.getProductName()).toList())).toList(); return productNames; }
Ref: 
public List<Tuple<string, List<string>>> ProductGroupName() { List<Product> products = GetProductList(); List<Tuple<string, List<string>>> productNames = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductName).ToList())) .ToList(); return productNames; }
Hyp: 
public List<Tuple<string, List<string>>> ProductGroupName() { List<Product> products = GetProductList(); List<Tuple<string, List<string>>> productNames = products.GroupBy(p => p.Category) .Select(g => Tuple.Create(g.Key, g.Select(p => p.ProductName).ToList())).ToList(); return productNames; }

BLEU: 85.92
Edit Sim: 1


Src: 
public List<Pair<Integer, String>> customerCrossGroupJoinRegionsWithCodeName() { List<Pair<String, Integer>> regions = Arrays.asList( Pair.with("BC", 101), Pair.with("BC", 105), Pair.with("OR", 121), Pair.with("LA", 143) ); List<Customer> customers = getCustomerList(); List<Pair<Integer, String>> q = regions.stream().map( r -> Pair.with(r.getValue1(), customers.stream().filter(c -> c.getRegion().equals(r)) .collect(Collectors.toList()))).flatMap(t -> t.getValue1().stream() .map(c1 -> Pair.with(t.getValue0(), c1.getCompanyName()))).toList(); return q; }
Ref: 
public List<Tuple<int, string>> CustomerCrossGroupJoinRegionsWithCodeName() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }
Hyp: 
public List<Tuple<int, string>> CustomerCrossGroupJoinRegionsWithCodeName() { List<Tuple<string, int>> regions = new List<Tuple<string, int>>{ Tuple.Create("BC", 101), Tuple.Create("BC", 105), Tuple.Create("OR", 121), Tuple.Create("LA", 143) }; List<Customer> customers = GetCustomerList(); List<Tuple<int, string>> q = regions.GroupJoin(customers, r => r.Item1, c => c.Region, (r, c) => Tuple.Create(r.Item2, c)).SelectMany(t=> t.Item2.Select(c=>c.CompanyName).DefaultIfEmpty(""),(t, c) => Tuple.Create(t.Item1, c)).ToList(); return q; }

BLEU: 94.76
Edit Sim: 19


Src: 
public Map<String, List<Product>> productsConvertGroupingToDictionary() { List<Product> products = getProductList(); Map<String, List<Product>> catagory = products.stream().collect(groupingBy( p ->p.getCategory())); return catagory; }
Ref: 
public Dictionary<string, List<Product>> ProductsConvertGroupingToDictionary() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> catagory = products.GroupBy(p => p.Category).ToDictionary( g => g.Key, g => g.ToList()); return catagory; }
Hyp: 
public Dictionary<string, List<Product>> ProductsConvertGroupingToDictionary() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> catagory = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.ToList()); return catagory; }

BLEU: 85.31
Edit Sim: 2


Src: 
public List<Product> repeatedProductsWithBaseAndCount(Product product,int count) { List<Product> products = Collections.nCopies(count, product); return products; }
Ref: 
public List<Product> RepeatedProductsWithBaseAndCount(Product product,int count) { List<Product> products = Enumerable.Repeat(product, count).ToList(); return products; }
Hyp: 
public List<Product> RepeatedProductsWithBaseAndCount(Product product,int count) { List<Product> products = Enumerable.Range(product, count).ToList(); return products; }

BLEU: 80.03
Edit Sim: 5


Src: 
public List<Integer> intsConvertToList() { int[] ints = {2, 3, 1, 5, 4}; List<Integer> intsList = Arrays.stream(ints).boxed().sorted().toList(); return intsList; }
Ref: 
public List<int> IntsConvertToList() { int[] ints = { 2, 3, 1, 5, 4 }; List<int> intsList = ints.OrderBy(d => d).ToList(); return intsList; }
Hyp: 
public List<int> IntsConvertToList() { int[] ints = { 2, 3, 1, 5, 4 }; List<int> intsList = ints.OrderBy(d => d).ToList(); return intsList; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<Character, List<String>>> stringGroupByFirstCharOrderbyCustom() { String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"}; List<Pair<Character, List<String>>> wordsGroups = Arrays.stream(words).collect(groupingBy(w -> Character.toLowerCase(w.charAt(0)))) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().sorted(new CaseInsensitiveComparer()).toList())).toList(); return wordsGroups; }
Ref: 
public List<Tuple<char, List<string>>> StringGroupByFirstCharOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w,new CaseInsensitiveComparer()).ToList())).ToList(); return wordsGroups; }
Hyp: 
public List<Tuple<char, List<string>>> StringGroupByFirstCharOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<Tuple<char, List<string>>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .Select(g => Tuple.Create(g.Key, g.OrderBy(w=>w,new CaseInsensitiveComparer()).ToList())).ToList(); return wordsGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Customer>> customerCrossJoinRegions() { String[] regions = {"BC", "SP", "OR", "LA"}; List<Customer> customers = getCustomerList(); List<Pair<String, Customer>> q = Arrays.stream(regions).flatMap( r -> customers.stream().filter(c -> c.getRegion().equals(r)).map( c -> Pair.with(r, c))).toList(); return q; }
Ref: 
public List<Tuple<string, Customer>> CustomerCrossJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, Customer>> q = regions.Join(customers, r => r, c => c.Region, (r, c) => Tuple.Create(r, c)).ToList(); return q; }
Hyp: 
public List<Tuple<string, Customer>> CustomerCrossJoinRegions() { string[] regions = { "BC", "SP", "OR", "LA" }; List<Customer> customers = GetCustomerList(); List<Tuple<string, Customer>> q = regions.SelectMany(c => c.Region, (r, c) => Tuple.Create(r, c)).ToList(); return q; }

BLEU: 81.59
Edit Sim: 22


Src: 
public double bigNumbersAggregateMultiply() { double[] numbers = {1.7, 2.3, 1.9, 4.1, 2.9}; double product = Arrays.stream(numbers).filter(n -> n > 2).reduce((a, b) -> a * b).getAsDouble(); return product; }
Ref: 
public double BigNumbersAggregateMultiply() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double product = numbers.Where(n => n > 2).Aggregate((a, b) => a * b); return product; }
Hyp: 
public double BigNumbersAggregateMultiply() { double[] numbers = { 1.7, 2.3, 1.9, 4.1, 2.9 }; double product = numbers.Where(d => d > 2).Aggregate((a, b) => a * b); return product; }

BLEU: 85.21
Edit Sim: 2


Src: 
public String stringElementAtStartWithO() { String[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; String startWithO = Arrays.stream(strings).filter(s ->s.charAt(0)=='o').skip(0).findFirst().get(); return startWithO; }
Ref: 
public string StringElementAtStartWithO() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithO = strings.Where(s => s[0] == 'o').ElementAt(0); return startWithO; }
Hyp: 
public string StringElementAtStartWithO() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithO = strings.Where(s => s[0]=='o').ElementAt(0); return startWithO; }

BLEU: 84.37
Edit Sim: 2


Src: 
public int aggregateWithdrawMoney() { int[] attemptedWithdrawals = {100, 20, 10, 40, 50, 10, 70, 30}; int endBalance = Arrays.stream(attemptedWithdrawals).reduce((balance, nextWithdrawal) -> nextWithdrawal <= balance ? balance - nextWithdrawal : balance).getAsInt(); return 0; }
Ref: 
public int AggregateWithdrawMoney() { int[] attemptedWithdrawals = { 100, 20, 10, 40, 50, 10, 70, 30 }; int endBalance = attemptedWithdrawals.Aggregate((balance, nextWithdrawal) => nextWithdrawal <= balance ? balance - nextWithdrawal : balance); return 0; }
Hyp: 
public int AggregateWithdrawMoney() { int[] attemptedWithdrawals = { 100, 20, 10, 40, 50, 10, 70, 30 }; int endBalance = attemptedWithdrawals.Aggregate((balance, nextWithdrawal) => balance - nextWithdrawal); return endBalance; }

BLEU: 67.4
Edit Sim: 46


Src: 
public int[] intZipSub() { int[] numbersA = {0, 2, 4, 5, 6, 8, 9}; int[] numbersB = {1, 3, 5, 7, 8, 10, 11}; int length = numbersA.length; int[] subNumbers = IntStream.range(0, length).map(i -> numbersA[i] - numbersB[i]).toArray(); return subNumbers; }
Ref: 
public int[] IntZipSub() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int[] subNumbers = numbersA.Zip(numbersB, (a, b) => a - b).ToArray(); return subNumbers; }
Hyp: 
public int[] IntZipSub() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8, 10, 11 }; int[] subNumbers = numbersA.Zip(numbersB, (a, b) => a - b).ToArray(); return subNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Integer> intSkipWhileIndexedCount(int n) { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; List<Integer> afterNumbers = IntStream.range(0, numbers.length) .dropWhile(i -> n > i).map(i -> numbers[i]).boxed().toList(); return afterNumbers; }
Ref: 
public List<int> IntSkipWhileIndexedCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbers = numbers.SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }
Hyp: 
public List<int> IntSkipWhileIndexedCount(int n) { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; List<int> afterNumbers = numbers.SkipWhile((n, i) => n > i).ToList(); return afterNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> longStringTakeWhile() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; List<String> after3Words = Arrays.stream(words).filter(w -> w.length() > 5).takeWhile(w -> w.charAt(0) > 'b').toList(); return after3Words; }
Ref: 
public List<string> LongStringTakeWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstWordsWhile = words.Where(w => w.Length > 5).TakeWhile(w => w[0] > 'b').ToList(); return firstWordsWhile; }
Hyp: 
public List<string> LongStringTakeWhile() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> firstWordsWhile = words.Where(w => w.Length > 5).TakeWhile(w => w[0] > 'b').ToList(); return firstWordsWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public String stringElementAtStartWith(char c) { String[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; String startWithO = Arrays.stream(strings).filter(s ->s.charAt(0)==c).skip(2).findFirst().get(); return startWithO; }
Ref: 
public string StringElementAtStartWith(char c) { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithChar = strings.Where(s => s[0] == c).ElementAt(2); return startWithChar; }
Hyp: 
public string StringElementAtStartWith(char c) { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startWithO = strings.Where(s => s[0]==c).ElementAt(2); return startWithO; }

BLEU: 73.12
Edit Sim: 10


Src: 
public Map<String, List<Customer>> customerEachRegionOrdersMaxCustomerDict() { List<Customer> customers = getCustomerList(); Map<String, List<Customer>> customerOrdersMax = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream(). collect(groupingBy(c -> c.getOrders().size())).entrySet() .stream().max(Map.Entry.comparingByKey()).get().getValue())); return customerOrdersMax; }
Ref: 
public Dictionary<string, List<Customer>> CustomerEachRegionOrdersMaxCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g => g.Where(c => c.Orders.Count ==g.Max(c => c.Orders.Count)).ToList()); return customerOrdersMax; }
Hyp: 
public Dictionary<string, List<Customer>> CustomerEachRegionOrdersMaxCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersMax = customers.GroupBy(c => c.Region) .ToDictionary(g => g.Key, g=> g.Where(c => c.Orders.Count ==g.Max(c => c.Orders.Count)).ToList()); return customerOrdersMax; }

BLEU: 87.88
Edit Sim: 1


Src: 
public boolean stringLengthAnyMatch() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; boolean anyMatch = Arrays.stream(words).map(w -> w.length()).anyMatch(n -> n > 5); return anyMatch; }
Ref: 
public bool StringLengthAnyMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Select(w => w.Length).Any(n => n > 5); return anyMatch; }
Hyp: 
public bool StringLengthAnyMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool anyMatch = words.Select(w => w.Length).Any(n => n > 5); return anyMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> stringOrderbyDescendingCustom() { String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"}; List<String> sortedWords = Arrays.stream(words).sorted(new CaseInsensitiveComparer().reversed()).toList(); return sortedWords; }
Ref: 
public List<string> StringOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderByDescending(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
Hyp: 
public List<string> StringOrderbyDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderByDescending(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public String stringFirstOrDefaultLong() { String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; String startsWithO = Arrays.stream(strings).filter(s -> s.length() > 4).findFirst().orElse("empty"); return startsWithO; }
Ref: 
public string StringFirstOrDefaultLong() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startsWithO = strings.FirstOrDefault(s => s.Length > 4,"empty"); return startsWithO; }
Hyp: 
public string StringFirstOrDefaultLong() { string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }; string startsWithO = strings.FirstOrDefault(s => s.Length > 4, "empty"); return startsWithO; }

BLEU: 88.28
Edit Sim: 1


Src: 
public boolean projectionEqualInts() { int[] numbersA = {0, 2, 4, 5, 9}; int[] numbersB = {1, 3, 5, 6, 10}; boolean equal = Arrays.equals(Arrays.stream(numbersA).map(n -> n + 1). toArray(), numbersB); return equal; }
Ref: 
public bool ProjectionEqualInts() { int[] numbersA = { 0, 2, 4, 5, 9 }; int[] numbersB = { 1, 3, 5, 6, 10 }; bool equal = numbersA.Select(n => n + 1).SequenceEqual(numbersB); return equal; }
Hyp: 
public bool ProjectionEqualInts() { int[] numbersA = { 0, 2, 4, 5, 9 }; int[] numbersB = { 1, 3, 5, 6, 10 }; bool equal = numbersA.SequenceEqual(numbersB).ToArray(); return equal; }

BLEU: 80.49
Edit Sim: 29


Src: 
public Map<Boolean, List<String>> stringGroupByLengthDict() { String[] words = {"blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese"}; Map<Boolean, List<String>> wordsGroups = Arrays.stream(words).collect(groupingBy(w -> w.length() > 8)); return wordsGroups; }
Ref: 
public Dictionary<bool, List<string>> StringGroupByLengthDict() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<bool, List<string>> wordsGroups = words.GroupBy(w => w.Length > 8) .ToDictionary(g => g.Key, g => g.ToList()); return wordsGroups; }
Hyp: 
public Dictionary<bool, List<string>> StringGroupByLengthDict() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<bool, List<string>> wordsGroups = words.GroupBy(w => w.Length > 8) .ToDictionary(g => g.Key, g => g.ToList()); return wordsGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> doubleOrderby() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).boxed().sorted().toList(); return sortedNumbers; }
Ref: 
public List<double> DoubleOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleOrderby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderBy(d => d).ToList(); return sortedNumbers; }

BLEU: 84.1
Edit Sim: 2


Src: 
public String[] selectByStringAndLengthConcat() { String[] words = {"aPPLE", "BlUeBeRrY", "cHeRry"}; String[] upperLowerWords = (String[]) Arrays.stream(words).map(w -> w + w.length()).toArray(); return upperLowerWords; }
Ref: 
public string[] SelectByStringAndLengthConcat() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; string[] upperLowerWords = words.Select(w => w + w.Length).ToArray(); return upperLowerWords; }
Hyp: 
public string[] SelectByStringAndLengthConcat() { string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" }; string[] upperLowerWords = words.Select(w => w + w.Length).ToArray(); return upperLowerWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, Integer>> customerEachRegionOrdersMin() { List<Customer> customers = getCustomerList(); List<Pair<String, Integer>> ordersMin = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().mapToInt(c -> c.getOrders().size()).min().getAsInt())).toList(); return ordersMin; }
Ref: 
public List<Tuple<string, int>> CustomerEachRegionOrdersMin() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersMin = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.Min(c => c.Orders.Count))).ToList(); return ordersMin; }
Hyp: 
public List<Tuple<string, int>> CustomerEachRegionOrdersMin() { List<Customer> customers = GetCustomerList(); List<Tuple<string, int>> ordersMin = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.Min(c => c.Orders.Count))).ToList(); return ordersMin; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double projectedDoubleFirst() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; double firstNum = Arrays.stream(numbers).map(i -> Math.log(i)).filter(n -> n > 3).findFirst().getAsDouble(); return firstNum; }
Ref: 
public double ProjectedDoubleFirst() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.Select(i => Math.Log(i)).First(n => n > 3); return firstNum; }
Hyp: 
public double ProjectedDoubleFirst() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.Select(i => Math.Log(i)) .First(n => n > 3); return firstNum; }

BLEU: 89.02
Edit Sim: 1


Src: 
public double expensiveProductUnitPriceMin() { List<Product> products = getProductList(); double minUnitPrice = products.stream().filter(p -> p.getUnitPrice() > 100) .mapToDouble(p -> p.getUnitPrice()).min().getAsDouble(); return minUnitPrice; }
Ref: 
public double ExpensiveProductUnitPriceMin() { List<Product> products = GetProductList(); double minUnitPrice = products.Where(p => p.UnitPrice > 100).Min(p => p.UnitPrice); return minUnitPrice; }
Hyp: 
public double ExpensiveProductUnitPriceMin() { List<Product> products = GetProductList(); double minUnitPrice = products.Where(p => p.UnitPrice > 100).Min(p => p.UnitPrice); return minUnitPrice; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> stringOrderbyCustomThenbyLengthDescendingCustom() { String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"}; List<String> sortedWords = Arrays.stream(words).sorted(Comparator.comparing((String w) -> w,new CaseInsensitiveComparer()) .thenComparing(w -> w.length(),new CustomNumberComparer().reversed())).toList(); return sortedWords; }
Ref: 
public List<string> StringOrderbyCustomThenbyLengthDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w,new CaseInsensitiveComparer()) .ThenByDescending(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
Hyp: 
public List<string> StringOrderbyCustomThenbyLengthDescendingCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.OrderBy(w => w,new CaseInsensitiveComparer()) .ThenByDescending(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int[] projectionIntUnion() { int[] numbersA = {0, 2, 4, 5, 6, 8, 9}; int[] numbersB = {1, 3, 5, 7, 8}; var first = Arrays.stream(numbersA).map(n -> n + 1); var second = Arrays.stream(numbersB).map(n -> n - 1); int[] uniqueNumbers = IntStream.concat(first, second).distinct().toArray(); return uniqueNumbers; }
Ref: 
public int[] ProjectionIntUnion() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; var first = numbersA.Select(n => n+1); var second = numbersB.Select(n => n-1); int[] numbers = first.Union(second).ToArray(); return numbers; }
Hyp: 
public int[] ProjectionIntUnion() { int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 }; int[] numbersB = { 1, 3, 5, 7, 8 }; int[] uniqueNumbers = numbersA.Select(n => n + 1); var first = numbersB.Select(n => n - 1); var second = first.Union(second).ToArray(); return uniqueNumbers; }

BLEU: 66.62
Edit Sim: 44


Src: 
public String[] stringExcept() { String[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; String[] wordsB = {"Cafe", "Bar", "Restaurant"}; String[] differemtWords = (String[]) Arrays.stream(wordsA).distinct().filter(a -> Arrays.stream(wordsB).allMatch(b -> !b.equals(a))).toArray(); return differemtWords; }
Ref: 
public string[] StringExcept() { string[] wordsA = {"Alice", "Bob", "Foo", "Bar"}; string[] wordsB = {"Cafe", "Bar","Restaurant" }; string[] differentWords = wordsA.Except(wordsB).ToArray(); return differentWords; }
Hyp: 
public string[] StringExcept() { string[] wordsA = { "Alice", "Bob", "Foo", "Bar" }; string[] wordsB = { "Cafe", "Bar", "Restaurant" }; string[] differentWords = wordsA.Except(wordsB).ToArray(); return differentWords; }

BLEU: 53.42
Edit Sim: 4


Src: 
public Map<Character, List<String>> stringGroupByFirstCharDictOrderbyCustom() { String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"}; Map<Character, List<String>> wordsGroups = Arrays.stream(words).collect(groupingBy(w -> Character.toLowerCase(w.charAt(0)))) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().sorted(new CaseInsensitiveComparer()).toList())); return wordsGroups; }
Ref: 
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w,new CaseInsensitiveComparer()).ToList()); return wordsGroups; }
Hyp: 
public Dictionary<char, List<string>> StringGroupByFirstCharDictOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => char.ToLower(w[0])) .ToDictionary(g => g.Key, g => g.OrderBy(w=>w,new CaseInsensitiveComparer()).ToList()); return wordsGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Integer> expensiveProductEachCategoryStockDict() { List<Product> products = getProductList(); Map<String, Integer> categories = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().filter( p -> p.getUnitPrice() > 100).mapToInt(p -> p.getUnitsInStock()).max().getAsInt())); return categories; }
Ref: 
public Dictionary<string, int> ExpensiveProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Where(p => p.UnitPrice > 100).Max(p => p.UnitsInStock)); return categories; }
Hyp: 
public Dictionary<string, int> ExpensiveProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Where(p => p.UnitPrice > 100).Max(p => p.UnitsInStock)); return categories; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, List<Product>> productEachCategoryFirstUnitPriceProductsDict() { List<Product> products = getProductList(); Map<String, List<Product>> categories = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().filter(p -> p.getUnitPrice() == g.getValue().stream().findFirst().get().getUnitPrice()).toList())); return categories; }
Ref: 
public Dictionary<string, List<Product>> ProductEachCategoryFirstUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.First().UnitPrice) .ToList()); return categories; }
Hyp: 
public Dictionary<string, List<Product>> ProductEachCategoryFirstUnitPriceProductsDict() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g=> g.Where(p => p.UnitPrice == g.First().UnitPrice).ToList()); return categories; }

BLEU: 87.44
Edit Sim: 1


Src: 
public List<String> stringOrderbyLengthReverse() { String[] words = { "cherry", "apple", "blueberry" }; List<String> sortedWords = Arrays.stream(words).sorted(Comparator.comparing(w->w.length())).collect( collectingAndThen(toList(),l->{Collections.reverse(l);return l;})); return sortedWords; }
Ref: 
public List<string> StringOrderbyLengthReverse() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderBy(w => w.Length).Reverse().ToList(); return sortedWords; }
Hyp: 
public List<string> StringOrderbyLengthReverse() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.OrderBy(w => w.Length).Reverse().ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int oddNumbersMaxTwice() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int maxNum = Arrays.stream(numbers).filter(n -> n % 2 == 0).map(n -> n * 2).max().getAsInt(); return maxNum; }
Ref: 
public int OddNumbersMaxTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Where(n => n % 2 == 1).Max(n => n * 2); return maxNum; }
Hyp: 
public int OddNumbersMaxTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Where(n => n % 2 == 1).Max(n => n * 2); return maxNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> productOrderbyId() { List<Product> products = getProductList(); List<Product> sortedProducts = products.stream().sorted(Comparator.comparing(p -> p.getProductId())).toList(); return sortedProducts; }
Ref: 
public List<Product> ProductOrderbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.ProductId).ToList(); return sortedProducts; }
Hyp: 
public List<Product> ProductOrderbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.ProductId).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public boolean expensiveProductAllMatch() { List<Product> products = getProductList(); boolean allMatch = products.stream().filter(p -> p.getUnitPrice() > 100).allMatch(p -> p.getUnitsInStock() > 0); return allMatch; }
Ref: 
public bool ExpensiveProductAllMatch() { List<Product> products = GetProductList(); bool allMatch = products.Where(p => p.UnitPrice > 100).All(p => p.UnitsInStock > 0); return allMatch; }
Hyp: 
public bool ExpensiveProductAllMatch() { List<Product> products = GetProductList(); bool allMatch = products.Where(p => p.UnitPrice > 100).All(p => p.UnitsInStock > 0); return allMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> expensiveProductOrderbyId() { List<Product> products = getProductList(); List<Product> sortedProducts = products.stream().filter(p -> p.getUnitPrice() > 100).sorted(Comparator.comparing(p -> p.getProductId())).toList(); return sortedProducts; }
Ref: 
public List<Product> ExpensiveProductOrderbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.ProductId).ToList(); return sortedProducts; }
Hyp: 
public List<Product> ExpensiveProductOrderbyId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.Where(p=>p.UnitPrice>100).OrderBy(p => p.ProductId).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double shortStringAverageLength() { String[] words = {"cherry", "apple", "blueberry"}; double averageLength = Arrays.stream(words).filter(w -> w.length() < 7).mapToInt(w -> w.length()).average().getAsDouble(); return averageLength; }
Ref: 
public double ShortStringAverageLength() { string[] words = { "cherry", "apple", "blueberry" }; double averageLength = words.Where(w => w.Length < 7).Average(w => w.Length); return averageLength; }
Hyp: 
public double ShortStringAverageLength() { string[] words = { "cherry", "apple", "blueberry" }; double averageLength = words.Where(w => w.Length < 7).Average(w => w.Length); return averageLength; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int oddNumbersMax() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int maxNum = Arrays.stream(numbers).filter(n -> n % 2 == 0).max().getAsInt(); return maxNum; }
Ref: 
public int OddNumbersMax() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Where(n => n % 2 == 1).Max(); return maxNum; }
Hyp: 
public int OddNumbersMax() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int maxNum = numbers.Where(n => n % 2 == 1).Max(); return maxNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> expensiveProductUnitPrice() { List<Product> products = getProductList(); List<Double> productNames = products.stream().filter(p -> p.getUnitPrice() > 100).map(p -> p.getUnitPrice()).toList(); return productNames; }
Ref: 
public List<double> ExpensiveProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Where(p => p.UnitPrice > 100).Select(p => p.UnitPrice).ToList(); return productNames; }
Hyp: 
public List<double> ExpensiveProductUnitPrice() { List<Product> products = GetProductList(); List<double> productNames = products.Where(p => p.UnitPrice > 100).Select(p => p.UnitPrice).ToList(); return productNames; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double[] projectionDoubleExcept() { double[] numbersA = {0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7}; double[] numbersB = {0.1, 3.3, 5.4, 7.7, 8.6}; var first = Arrays.stream(numbersA).map(n -> n - (int) n); var second = Arrays.stream(numbersB).map(n -> n - (int) n); double[] differemtNumbers = first.distinct().filter(a -> second.allMatch(b -> b != a)).toArray(); return differemtNumbers; }
Ref: 
public double[] ProjectionDoubleExcept() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; var first = numbersA.Select(n => n-(int)n); var second = numbersB.Select(n => n-(int)n); double[] numbers = first.Except(second).ToArray(); return numbers; }
Hyp: 
public double[] ProjectionDoubleExcept() { double[] numbersA = { 0.1, 2.2, 4.3, 5.4, 6.5, 8.6, 9.7 }; double[] numbersB = { 0.1, 3.3, 5.4, 7.7, 8.6 }; double[] differentNumbers = numbersA.Select(n => n-(int)n).Except(second).ToArray(); return differentNumbers; }

BLEU: 60.05
Edit Sim: 81


Src: 
public List<Pair<String, String>> productCrossGroupJoinCategoriesName() { String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"}; List<Product> products = getProductList(); List<Pair<String, String>> q = Arrays.stream(categories).map( c -> Pair.with(c, products.stream().filter(p -> p.getCategory().equals(c)) .collect(Collectors.toList()))).flatMap(t -> t.getValue1().stream() .map(p1 -> Pair.with(t.getValue0(), p1.getProductName()))).toList(); return q; }
Ref: 
public List<Tuple<string, string>> ProductCrossGroupJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, string>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2.Select(p=>p.ProductName), (t, n) => Tuple.Create(t.Item1, n)).ToList(); return q; }
Hyp: 
public List<Tuple<string, string>> ProductCrossGroupJoinCategoriesName() { string[] categories = { "Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood" }; List<Product> products = GetProductList(); List<Tuple<string, string>> q = categories.GroupJoin(products, c => c, p => p.Category, (c, p) => Tuple.Create(c, p)) .SelectMany(t => t.Item2, (t, p) => Tuple.Create(t.Item1, p)).ToList(); return q; }

BLEU: 85.74
Edit Sim: 27


Src: 
public Map<Boolean, List<Product>> productGroupByPriceDictPrint() { List<Product> products = getProductList(); Map<Boolean, List<Product>> productGroup = products.stream().collect(groupingBy(p -> p.getUnitPrice() > 100)); productGroup.get(true).stream().forEach(n -> System.out.print(n)); System.out.println(); productGroup.get(false).stream().forEach(n -> System.out.print(n)); return productGroup; }
Ref: 
public Dictionary<bool, List<Product>> ProductGroupByPriceDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<Product>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .ToDictionary(g => g.Key, g => g.ToList()); productGroup[true].ForEach(p => Console.Write(p)); Console.WriteLine(); productGroup[false].ForEach(p => Console.Write(p)); return productGroup; }
Hyp: 
public Dictionary<bool, List<Product>> ProductGroupByPriceDictPrint() { List<Product> products = GetProductList(); Dictionary<bool, List<Product>> productGroup = products.GroupBy(p => p.UnitPrice>100); Console.WriteLine(productGroup); return productGroup; }

BLEU: 40.41
Edit Sim: 136


Src: 
public int[] intsConvertToArrayAndPrintForeach() { int[] ints = {2, 3, 1, 5, 4}; int[] intsArray = Arrays.stream(ints).sorted().toArray(); for (int i : intsArray) System.out.println(i); return intsArray; }
Ref: 
public int[] IntsConvertToArrayAndPrintForeach() { int[] ints = { 2, 3, 1, 5, 4 }; int[] intsArray = ints.OrderBy(d => d).ToArray(); foreach (int i in intsArray) Console.WriteLine(i); return intsArray; }
Hyp: 
public int[] IntsConvertToArrayAndPrintForeach() { int[] ints = { 2, 3, 1, 5, 4 }; int[] intsArray = ints.OrderBy(d => d).ToArray(); foreach (int i in intsArray) Console.WriteLine(i); return intsArray; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> inStockProductSkipWhile() { List<Product> products = getProductList(); List<Product> after3Products = products.stream().filter(p -> p.getUnitsInStock() > 100).dropWhile(p -> p.getProductId() > 100).toList(); return after3Products; }
Ref: 
public List<Product> InStockProductSkipWhile() { List<Product> products = GetProductList(); List<Product> afterProductsWhile = products.Where(p => p.UnitsInStock > 0).SkipWhile(p => p.ProductId > 100).ToList(); return afterProductsWhile; }
Hyp: 
public List<Product> InStockProductSkipWhile() { List<Product> products = GetProductList(); List<Product> afterProductsWhile = products.Where(p => p.UnitsInStock > 0).SkipWhile(p => p.ProductId > 100).ToList(); return afterProductsWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int oddNumbersFirst() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int firstNum = Arrays.stream(numbers).filter(n -> n % 2 == 1).findFirst().getAsInt(); return firstNum; }
Ref: 
public int OddNumbersFirst() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.First(n => n % 2 == 1); return firstNum; }
Hyp: 
public int OddNumbersFirst() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int firstNum = numbers.Where(n => n % 2 == 1).First(); return firstNum; }

BLEU: 83.5
Edit Sim: 13


Src: 
public int totalOrdersCount(String region) { List<Customer> customers = getCustomerList(); int count = (int) customers.stream().flatMap(c -> c.getOrders().stream()).count(); return count; }
Ref: 
public int TotalOrdersCount(string region) { List<Customer> customers = GetCustomerList(); int count = customers.SelectMany(c => c.Orders).Count(); return count; }
Hyp: 
public int TotalOrdersCount(string region) { List<Customer> customers = GetCustomerList(); int count = customers.SelectMany(c => c.Orders).Count(); return count; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Character, List<String>> stringGroupByFirstCharDict() { String[] words = {"blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese"}; Map<Character, List<String>> wordsGroups = Arrays.stream(words).collect(groupingBy(w -> w.charAt(0))); return wordsGroups; }
Ref: 
public Dictionary<char, List<string>> StringGroupByFirstCharDict() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => w[0]) .ToDictionary(g => g.Key, g => g.ToList()); return wordsGroups; }
Hyp: 
public Dictionary<char, List<string>> StringGroupByFirstCharDict() { string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" }; Dictionary<char, List<string>> wordsGroups = words.GroupBy(w => w[0]) .ToDictionary(g => g.Key, g => g.ToList()); return wordsGroups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> stringReverse() { String[] words = { "cherry", "apple", "blueberry" }; List<String> sortedWords = Arrays.stream(words).collect( collectingAndThen(toList(),l->{Collections.reverse(l);return l;})); return sortedWords; }
Ref: 
public List<string> StringReverse() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.Reverse().ToList(); return sortedWords; }
Hyp: 
public List<string> StringReverse() { string[] words = { "cherry", "apple", "blueberry" }; List<string> sortedWords = words.Reverse().ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Integer> customerEachCountryOrdersMaxDict() { List<Customer> customers = getCustomerList(); Map<String, Integer> ordersMax = customers.stream().collect(groupingBy(c -> c.getCountry())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().mapToInt(c -> c.getOrders().size()).max().getAsInt())); return ordersMax; }
Ref: 
public Dictionary<string, int> CustomerEachCountryOrdersMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersMax = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Max(c => c.Orders.Count)); return ordersMax; }
Hyp: 
public Dictionary<string, int> CustomerEachCountryOrdersMaxDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, int> ordersMax = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Max(c => c.Orders.Count)); return ordersMax; }

BLEU: 100.0
Edit Sim: 0


Src: 
public double bigNumbersAverage() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; double averageNum = Arrays.stream(numbers).filter(n -> n >= 5).average().getAsDouble(); return averageNum; }
Ref: 
public double BigNumbersAverage() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; double averageNum = numbers.Where(n => n > 5).Average(); return averageNum; }
Hyp: 
public double BigNumbersAverage() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; double averageNum = numbers.Where(n => n > 5).Average(); return averageNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public void oddNumbersTwiceEager() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; AtomicInteger i = new AtomicInteger(0); var q = Arrays.stream(numbers).filter(n->n%2==1).map(n->n*2).map(n -> i.addAndGet(n)).boxed().toList(); for (var v : q) System.out.println(v + " " + i); }
Ref: 
public void OddNumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }
Hyp: 
public void OddNumbersTwiceEager() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int i = 0; var q = numbers.Where(n => n % 2 == 1).Select(n => n * 2).Select(n => i += n).ToList(); foreach (var v in q) Console.Write(v + " " + i); }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Integer,Boolean> rangeOfIntsToDict() { Map<Integer,Boolean> numbers =IntStream.range(0, 100).boxed().collect(toMap(n->n,n->n%2==0)); return numbers; }
Ref: 
public Dictionary<int,bool> RangeOfIntsToDict() { Dictionary<int, bool> numbers = Enumerable.Range(0, 100).ToDictionary(n => n, n => n % 2 == 0); return numbers; }
Hyp: 
public Dictionary<int,bool> RangeOfIntsToDict() { Dictionary<int,bool> numbers = Enumerable.Range(0, 100).ToDictionary(n => n,n=>n%2==1); return numbers; }

BLEU: 32.6
Edit Sim: 9


Src: 
public List<Integer> intsConvertToDescendingListAndPrint() { int[] ints = {2, 3, 1, 5, 4}; List<Integer> intsList = Arrays.stream(ints).boxed().sorted(Comparator.reverseOrder()).toList(); for (int i = 0; i < intsList.size(); i++) System.out.println(intsList.get(i)); return intsList; }
Ref: 
public List<int> IntsConvertToDescendingListAndPrint() { int[] ints = { 2, 3, 1, 5, 4 }; List<int> intsList = ints.OrderByDescending(d => d).ToList(); for (int i = 0; i < intsList.Count; i++) Console.WriteLine(intsList[i]); return intsList; }
Hyp: 
public List<int> IntsConvertToDescendingListAndPrint() { int[] ints = { 2, 3, 1, 5, 4 }; List<int> intsList = ints.OrderByDescending(d => d).ToList(); foreach (int i = 0; i < intsList.Count; i++) Console.WriteLine(intsList.Item(i)); return intsList; }

BLEU: 84.03
Edit Sim: 11


Src: 
public Map<String, List<Customer>> customerEachCountryOrdersFirstCustomerDict() { List<Customer> customers = getCustomerList(); Map<String, List<Customer>> customerOrdersFirst = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().collect(toMap(g -> g.getKey(), g->g.getValue().stream().filter( c -> c.getOrders().size() == g.getValue().stream().findFirst().get().getOrders().size()).toList())); return customerOrdersFirst; }
Ref: 
public Dictionary<string, List<Customer>> CustomerEachCountryOrdersFirstCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersFirst = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g => g.Where(c => c.Orders.Count ==g.First().Orders.Count).ToList()); return customerOrdersFirst; }
Hyp: 
public Dictionary<string, List<Customer>> CustomerEachCountryOrdersFirstCustomerDict() { List<Customer> customers = GetCustomerList(); Dictionary<string, List<Customer>> customerOrdersFirst = customers.GroupBy(c => c.Country) .ToDictionary(g => g.Key, g=>g.Where(c => c.Orders.Count ==g.First().Orders.Count).ToList()); return customerOrdersFirst; }

BLEU: 83.2
Edit Sim: 2


Src: 
public List<Pair<String, Double>> customerEachRegionOrdersTotalMax() { List<Customer> customers = getCustomerList(); List<Pair<String, Double>> ordersTotalMax = customers.stream().collect(groupingBy(c -> c.getRegion())) .entrySet().stream().map(g -> Pair.with(g.getKey(), g.getValue().stream().flatMap(c -> c.getOrders().stream()).mapToDouble(o -> o.getTotal()).max().getAsDouble())).toList(); return ordersTotalMax; }
Ref: 
public List<Tuple<string, double>> CustomerEachRegionOrdersTotalMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c => c.Orders).Max(o => o.Total))).ToList(); return ordersTotalMax; }
Hyp: 
public List<Tuple<string, double>> CustomerEachRegionOrdersTotalMax() { List<Customer> customers = GetCustomerList(); List<Tuple<string, double>> ordersTotalMax = customers.GroupBy(c => c.Region) .Select(g => Tuple.Create(g.Key, g.SelectMany(c => c.Orders).Max(o => o.Total))).ToList(); return ordersTotalMax; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> bigDoubleFractionOrderbyDescending() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).filter(n -> n > 5).map(n -> n - (int) n).boxed() .sorted(Comparator.reverseOrder()).toList(); return sortedNumbers; }
Ref: 
public List<double> BigDoubleFractionOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).Select(n => n-(int)n).OrderByDescending(n=>n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> BigDoubleFractionOrderbyDescending() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.Where(n => n > 5).Select(n => n-(int)n).OrderByDescending(n=>n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Boolean, List<Product>> productGroupByInStockDict() { List<Product> products = getProductList(); Map<Boolean, List<Product>> productGroup = products.stream().collect(groupingBy(p -> p.getUnitsInStock() > 0)); return productGroup; }
Ref: 
public Dictionary<bool, List<Product>> ProductGroupByInStockDict() { List<Product> products = GetProductList(); Dictionary<bool, List<Product>> productGroup = products.GroupBy(p => p.UnitsInStock == 0) .ToDictionary(g => g.Key, g => g.ToList()); return productGroup; }
Hyp: 
public Dictionary<bool, List<Product>> ProductGroupByInStockDict() { List<Product> products = GetProductList(); Dictionary<bool, List<Product>> productGroup = products.GroupBy(p => p.UnitsInStock > 0) .ToDictionary(g => g.Key, g => g.ToList()); return productGroup; }

BLEU: 90.25
Edit Sim: 2


Src: 
public int uniqueFactorOf300Count() { int[] factorsOf300 = {2, 2, 3, 5, 5}; int uniqueFactorsCount = (int) Arrays.stream(factorsOf300).distinct().count(); return uniqueFactorsCount; }
Ref: 
public int UniqueFactorOf300Count() { int[] factorsOf300 = { 2, 2, 3, 5, 5 }; int uniqueFactorsCount = factorsOf300.Distinct().Count(); return uniqueFactorsCount; }
Hyp: 
public int UniqueFactorOf300Count() { int[] factorsOf300 = { 2, 2, 3, 5, 5 }; int uniqueFactorsCount = factorsOf300.Distinct().Count(); return uniqueFactorsCount; }

BLEU: 100.0
Edit Sim: 0


Src: 
public boolean longStringAllMatch() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; boolean allMatch = Arrays.stream(words).filter(w -> w.length() > 5).allMatch(n -> n.compareTo("b") > 0); return allMatch; }
Ref: 
public bool LongStringAllMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool allMatch = words.Where(w => w.Length > 5).All(n => string.CompareOrdinal(n, "b") > 0); return allMatch; }
Hyp: 
public bool LongStringAllMatch() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; bool allMatch = words.Where(w => w.Length > 5).All(n => string.CompareOrdinal(n, "b") > 0); return allMatch; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> productTakeWhile() { List<Product> products = getProductList(); List<Product> after3Products = products.stream().takeWhile(p -> p.getProductId() > 100).toList(); return after3Products; }
Ref: 
public List<Product> ProductTakeWhile() { List<Product> products = GetProductList(); List<Product> firstProductsWhile = products.TakeWhile(p => p.ProductId > 100).ToList(); return firstProductsWhile; }
Hyp: 
public List<Product> ProductTakeWhile() { List<Product> products = GetProductList(); List<Product> firstProductsWhile = products.TakeWhile(p => p.ProductId > 100).ToList(); return firstProductsWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public int oddNumbersMinTwice() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int minNum = Arrays.stream(numbers).filter(n -> n % 2 == 0).map(n -> n * 2).min().getAsInt(); return minNum; }
Ref: 
public int OddNumbersMinTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Where(n => n % 2 == 1).Min(n => n * 2); return minNum; }
Hyp: 
public int OddNumbersMinTwice() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Where(n => n % 2 == 1).Min(n => n * 2); return minNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public void bigDoubleNumbersDeferred() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; AtomicReference<Double> d = new AtomicReference<>(0.0); var q = Arrays.stream(numbers).filter(n->n>5).map(n -> d.accumulateAndGet(n, Double::sum)); q.forEach(v -> System.out.println(v + " " + d)); }
Ref: 
public void BigDoubleNumbersDeferred() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Where(d => d > 5).Select(n => d += n); foreach (var v in q) Console.Write(v + " " + d); }
Hyp: 
public void BigDoubleNumbersDeferred() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double d = 0; var q = numbers.Where(d => d > 5).Select(n => d += n); foreach (var v in q) Console.Write(v + " " + d); }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Pair<String, LocalDate>> waCustomerOrdersEachNestedTakeWhile() { List<Customer> customers = getCustomerList(); List<Pair<String, LocalDate>> after3EachWAOrders = customers.stream().filter(c -> c.getRegion().equals("WA")) .flatMap(c -> c.getOrders().stream().takeWhile(o -> o.getOrderDate() .isAfter(LocalDate.of(2000, 1, 1))) .map(o -> Pair.with(c.getCustomerId(), o.getOrderDate()))).toList(); return after3EachWAOrders; }
Ref: 
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersEachWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.TakeWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return firstOrdersEachWhile; }
Hyp: 
public List<Tuple<string, DateTime>> WaCustomerOrdersEachNestedTakeWhile() { List<Customer> customers = GetCustomerList(); List<Tuple<string, DateTime>> firstOrdersEachWhile = customers.Where(c => c.Region == "WA") .SelectMany(c => c.Orders.TakeWhile(o => o.OrderDate > new DateTime( 2000, 1, 1)), (c, o) => Tuple.Create( c.CustomerId, o.OrderDate)).ToList(); return firstOrdersEachWhile; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Integer> expensiveProductEachCategoryStockDict() { List<Product> products = getProductList(); Map<String, Integer> categories = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().collect(toMap(g -> g.getKey(), g -> g.getValue().stream().filter( p -> p.getUnitPrice() > 100).mapToInt(p -> p.getUnitsInStock()).sum())); return categories; }
Ref: 
public Dictionary<string, int> ExpensiveProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Where(p=>p.UnitPrice>100).Sum(p => p.UnitsInStock)); return categories; }
Hyp: 
public Dictionary<string, int> ExpensiveProductEachCategoryStockDict() { List<Product> products = GetProductList(); Dictionary<string, int> categories = products.GroupBy(p => p.Category) .ToDictionary(g => g.Key, g => g.Where(p => p.UnitPrice > 100).Sum(p => p.UnitsInStock)); return categories; }

BLEU: 78.4
Edit Sim: 4


Src: 
public List<String> stringOrderbyThenbyLengthDescendingCustom() { String[] words = {"cherry", "apple", "blueberry", "banana", "abacus"}; List<String> sortedWords =Arrays.stream(words).sorted(Comparator.comparing((String w) -> w) .thenComparing(w -> w.length(),new CustomNumberComparer().reversed())).toList(); return sortedWords; }
Ref: 
public List<string> StringOrderbyThenbyLengthDescendingCustom() { string[] words = { "cherry", "apple", "blueberry","banana","abacus" }; List<string> sortedWords = words.OrderBy(w => w) .ThenByDescending(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }
Hyp: 
public List<string> StringOrderbyThenbyLengthDescendingCustom() { string[] words = { "cherry", "apple", "blueberry", "banana", "abacus" }; List<string> sortedWords = words.OrderBy(w => w) .ThenByDescending(w=>w.Length,new CustomNumberComparer()).ToList(); return sortedWords; }

BLEU: 81.2
Edit Sim: 2


Src: 
public double bigDoubleNumbersFirstOrDefault() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; double firstNum = Arrays.stream(numbers).filter(d -> d > 5).findFirst().orElse(-2.3); return firstNum; }
Ref: 
public double BigDoubleNumbersFirstOrDefault() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.FirstOrDefault(d => d > 5,-2.3); return firstNum; }
Hyp: 
public double BigDoubleNumbersFirstOrDefault() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; double firstNum = numbers.FirstOrDefault(d => d > 5,-2.3); return firstNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, Double> customerInRegionOrdersTotalSumDict(String region) { List<Customer> customers = getCustomerList(); Map<String, Double> ordersTotalSum = customers.stream().filter(c -> c.getRegion().equals(region)) .collect(toMap(c -> c.getCustomerId(), c -> c.getOrders().stream().mapToDouble(o -> o.getTotal()).sum())); return ordersTotalSum; }
Ref: 
public Dictionary<string, double> CustomerInRegionOrdersTotalSumDict(string region) { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.Where(c => c.Region.Equals(region)) .ToDictionary(c => c.CustomerId, c => c.Orders.Sum(o => o.Total)); return ordersTotalSum; }
Hyp: 
public Dictionary<string, double> CustomerInRegionOrdersTotalSumDict(string region) { List<Customer> customers = GetCustomerList(); Dictionary<string, double> ordersTotalSum = customers.Where(c => c.Region.Equals(region)) .ToDictionary(c => c.CustomerId, c => c.Orders.Sum(o => o.Total)); return ordersTotalSum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Double> doubleOrderbyFractionDescendingThenby() { double[] numbers = {3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0}; List<Double> sortedNumbers = Arrays.stream(numbers).boxed().sorted( Comparator.comparing((Double n) -> n - (int) n.doubleValue(),Comparator.reverseOrder()) .thenComparing(Comparator.naturalOrder())).toList(); return sortedNumbers; }
Ref: 
public List<double> DoubleOrderbyFractionDescendingThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }
Hyp: 
public List<double> DoubleOrderbyFractionDescendingThenby() { double[] numbers = { 3.1, 4.2, 1.6, 0.7, 8.7, 6.9, 7.4, 2.5, 5.7, 0 }; List<double> sortedNumbers = numbers.OrderByDescending(n => n-(int)n).ThenBy(n => n).ToList(); return sortedNumbers; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<String, List<Product>> productGroupSkip() { List<Product> products = getProductList(); Map<String, List<Product>> after3Groups = products.stream().collect(groupingBy(p -> p.getCategory())) .entrySet().stream().skip(3).collect(toMap(g -> g.getKey(), g -> g.getValue())); return after3Groups; }
Ref: 
public Dictionary<string, List<Product>> ProductGroupSkip() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> after3Groups = products.GroupBy(p => p.Category) .Skip(3).ToDictionary(g => g.Key, g => g.ToList()); return after3Groups; }
Hyp: 
public Dictionary<string, List<Product>> ProductGroupSkip() { List<Product> products = GetProductList(); Dictionary<string, List<Product>> after3Groups = products.GroupBy(p => p.Category) .Skip(3).ToDictionary(g => g.Key, g => g.ToList()); return after3Groups; }

BLEU: 100.0
Edit Sim: 0


Src: 
public Map<Boolean, List<Product>> productGroupByPriceDict() { List<Product> products = getProductList(); Map<Boolean, List<Product>> productGroup = products.stream().collect(groupingBy(p -> p.getUnitPrice() > 100)); return productGroup; }
Ref: 
public Dictionary<bool, List<Product>> ProductGroupByPriceDict() { List<Product> products = GetProductList(); Dictionary<bool, List<Product>> productGroup = products.GroupBy(p => p.UnitPrice > 100) .ToDictionary(g => g.Key, g => g.ToList()); return productGroup; }
Hyp: 
public Dictionary<bool, List<Product>> ProductGroupByPriceDict() { List<Product> products = GetProductList(); Dictionary<bool, List<Product>> productGroup = products.GroupBy(p => p.UnitPrice > 100).ToDictionary(g => g.Key, g => g.ToList()); return productGroup; }

BLEU: 86.46
Edit Sim: 1


Src: 
public int numbersMin() { int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0}; int minNum = Arrays.stream(numbers).min().getAsInt(); return minNum; }
Ref: 
public int NumbersMin() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Min(); return minNum; }
Hyp: 
public int NumbersMin() { int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 }; int minNum = numbers.Min(); return minNum; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> expensiveProductNameOrderby() { List<Product> products = getProductList(); List<String> sortedProducts = products.stream().filter(p -> p.getUnitPrice() > 100).map(p -> p.getProductName()).sorted().toList(); return sortedProducts; }
Ref: 
public List<string> ExpensiveProductNameOrderby() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Where(p=>p.UnitPrice>100).Select(p => p.ProductName).OrderBy(n=>n).ToList(); return sortedProducts; }
Hyp: 
public List<string> ExpensiveProductNameOrderby() { List<Product> products = GetProductList(); List<string> sortedProducts = products.Where(p=>p.UnitPrice>100).Select(p => p.ProductName).OrderBy(n=>n).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public boolean projectionEqualDoubles() { double[] numbersA = {0.5, 2.3, 4.7, 5.4, 9.8}; double[] numbersB = {6.5, 1.3, 8.7, 2.4, 4.8}; boolean equal = Arrays.equals(Arrays.stream(numbersA).map(n -> n - (int) n). toArray(), numbersB); return equal; }
Ref: 
public bool ProjectionEqualDoubles() { double[] numbersA = { 0.5, 2.3, 4.7, 5.4, 9.8 }; double[] numbersB = { 6.5, 1.3, 8.7, 2.4, 4.8 }; bool equal = numbersA.Select(n => n - (int)n).SequenceEqual(numbersB.Select(n => n - (int)n)); return equal; }
Hyp: 
public bool ProjectionEqualDoubles() { double[] numbersA = { 0.5, 2.3, 4.7, 5.4, 9.8 }; double[] numbersB = { 6.5, 1.3, 8.7, 2.4, 4.8 }; bool equal = numbersA.SequenceEqual(numbersB).ToArray(); return equal; }

BLEU: 70.74
Edit Sim: 47


Src: 
public List<Product> productOrderbyCategoryThenbyDescendingId() { List<Product> products = getProductList(); List<Product> sortedProducts = products.stream().sorted(Comparator.comparing((Product p) -> p.getCategory()) .thenComparing(p -> p.getProductId(),Comparator.reverseOrder())).toList(); return sortedProducts; }
Ref: 
public List<Product> ProductOrderbyCategoryThenbyDescendingId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenByDescending(p=>p.ProductId).ToList(); return sortedProducts; }
Hyp: 
public List<Product> ProductOrderbyCategoryThenbyDescendingId() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenByDescending(p=>p.ProductId).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<String> shortStringOrderbyCustom() { String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"}; List<String> sortedWords = Arrays.stream(words).filter(w -> w.length() < 6).sorted(new CaseInsensitiveComparer()). toList(); return sortedWords; }
Ref: 
public List<string> ShortStringOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }
Hyp: 
public List<string> ShortStringOrderbyCustom() { string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" }; List<string> sortedWords = words.Where(w => w.Length < 6).OrderBy(w => w, new CaseInsensitiveComparer()).ToList(); return sortedWords; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> productOrderbyName() { List<Product> products = getProductList(); List<Product> sortedProducts = products.stream().sorted(Comparator.comparing(p -> p.getProductName())).toList(); return sortedProducts; }
Ref: 
public List<Product> ProductOrderbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.ProductName).ToList(); return sortedProducts; }
Hyp: 
public List<Product> ProductOrderbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.ProductName).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public List<Product> productOrderbyCategoryThenbyName() { List<Product> products = getProductList(); List<Product> sortedProducts = products.stream().sorted(Comparator.comparing((Product p) -> p.getCategory()) .thenComparing(p -> p.getProductName())).toList(); return sortedProducts; }
Ref: 
public List<Product> ProductOrderbyCategoryThenbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenBy(p=>p.ProductName).ToList(); return sortedProducts; }
Hyp: 
public List<Product> ProductOrderbyCategoryThenbyName() { List<Product> products = GetProductList(); List<Product> sortedProducts = products.OrderBy(p => p.Category).ThenBy(p=>p.ProductName).ToList(); return sortedProducts; }

BLEU: 100.0
Edit Sim: 0


Src: 
public boolean projectionEqualStrings() { List<String> wordsA = Arrays.asList("Alpha", "Beta", "Gamma"); List<String> wordsB = Arrays.asList("aLPhA", "bETa", "gAaMa"); boolean equal = wordsA.stream().map(w -> w.toLowerCase()).toList().equals(wordsB); return equal; }
Ref: 
public bool ProjectionEqualStrings() { List<string> wordsA = new List<string> { "Alpha", "Beta", "Gamma" }; List<string> wordsB = new List<string> { "aLPhA", "bETa", "gAaMa" }; bool equal = wordsA.Select(w => w.ToLower()).SequenceEqual(wordsB.Select(w => w.ToLower())); return equal; }
Hyp: 
public bool ProjectionEqualStrings() { List<string> wordsA = new List<string>{ "Alpha", "Beta", "Gamma" }; List<string> wordsB = new List<string>{ "aLPhA", "bETa", "gAaMa" }; bool equal = wordsA.Select(w => w.ToLower()) .ToList(); return equal; }

BLEU: 65.24
Edit Sim: 42


Src: 
public List<Order> customerSelectManyBigOrders() { List<Customer> customers = getCustomerList(); List<Order> customerProperties = customers.stream().flatMap(c -> c.getOrders() .stream().filter(o -> o.getTotal() > 100)).toList(); return customerProperties; }
Ref: 
public List<Order> CustomerSelectManyBigOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=> c.Orders.Where(o=>o.Total>100)).ToList(); return customerProperties; }
Hyp: 
public List<Order> CustomerSelectManyBigOrders() { List<Customer> customers = GetCustomerList(); List<Order> customerProperties = customers.SelectMany(c=>c.Orders.Where(o=>o.Total>100).ToList(); return customerProperties; }

BLEU: 76.28
Edit Sim: 2


